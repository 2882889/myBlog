[{"title":"hexo部署报错解决","date":"2017-12-06T15:21:15.000Z","path":"2017/12/06/hexo部署报错解决/","text":"前言由于换了一个电脑搭建hexo,在部署的时候报错了，这里记录一下解决办法： 删除.deploy_git 报错操作从git拉下代码，在新搭建的hexo环境中hexo d部署的时候报一下错误 1234567891011121314~/Desktop/myBlog (master ✘)✖✹✭ ᐅ hexo dINFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...fatal: in unpopulated submodule &apos;.deploy_git&apos;FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlError: fatal: in unpopulated submodule &apos;.deploy_git&apos; at ChildProcess.&lt;anonymous&gt; (/Users/xxx/Desktop/myBlog/node_modules/hexo-util/lib/spawn.js:37:17) at ChildProcess.emit (events.js:182:13) at maybeClose (internal/child_process.js:978:16) at Socket.stream.socket.on (internal/child_process.js:395:11) at Socket.emit (events.js:182:13) at Pipe._handle.close (net.js:616:12) 解决办法解决办法很简单，把博客目录下的.deploy_git删除重新构建部署就好，命令如下 123rm -rf .deploy_githexo ghexo d 看来以后要把这个文件夹添加到.gitignore文件中试试","tags":[{"name":"日常","slug":"日常","permalink":"http://yoursite.com/tags/日常/"}]},{"title":"使用命令行启动Sublime","date":"2017-10-06T14:10:38.000Z","path":"2017/10/06/使用命令行启动Sublime/","text":"使用终端启动Sublime工作中需要经常使用终端，有时候查看文本文件又需要使用Sublime,所以可以用终端调用Sublime是一件很方便的事情 准备工作系统：mac ox 软件：sublime 第一步 查看终端是否能打开Sublime打开终端，cd到任意一个文件夹，输入如下命令： 1/Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl . 这时候如果Sublime成功的打开了当前命令所在的文件夹，就说明终端启动成功。 如果无法启动，请查看sublime的路径和名称是否和你安装的相同 .表示打开当前文件夹，如果输入具体文件名称，也可以打开具体文件 第二步 查看终端环境变量在终端输入： 1vim ~/.bash_profile 在里面找到当前系统的环境变量 1export PATH= 注意：如果你安装过zsh,那么你的环境变量应该到~/.zshrc中寻找 如果你的环境变量文件编辑了，那么你需要source 环境变量文件一下你的环境变量文件，使他生效 第三步 创建命令终端执行： 1ln -s /Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl 然后就搞定了。 前面的路径是sublime的安装路径，后面的路径是设置好的环境变量 在终端中使用下面命令测试一下 1subl . 如果成功打开当前路径文件夹就说明成了，以后使用subl 文件名就可以快速的在终端用Sublime打开文件啦 参考文件： Open Sublime Text from Terminal in macOS mac中的环境变量 sublime 官网描述","tags":[{"name":"日常","slug":"日常","permalink":"http://yoursite.com/tags/日常/"}]},{"title":"iOS中的isEqual：和 “==”","date":"2017-06-13T15:32:00.000Z","path":"2017/06/13/iOS中的isEqual：和 “==”/","text":"前言在iOS开发中常常要比较两个值是否一样，通常的做法有两种，就是用isEqual：或者使用== “==” 比较如果用==比较的是两基本类型，则比较的是两个两个基本类型的值，如果比较的是两个对象类型，则比较的是对象的地址 这时如果有两个string： 12NSString *str1 = @&quot;hello&quot;;NSString *str2 = [NSString stringWithFormat:@&quot;hello&quot;]; 这两个string的内容明显是一样的，但是地址却不一样，如果使用==比较就会返回NO 这样就用到我们的isEqual： 注：isEqualToString：会在下面说 isEqual：比较使用isEqual：是想要比较对象的值，而不是地址，注意这里是想要 使用isEqual：比较上面两个字符串，会返回YES 但是这不代表所有的对象使用都会去自动比较对象的值，比如比较两个自己定义的对象的时候，默认情况下他其实还是比较的两个对象的地址 之所以比较字符串会比较两个值，是因为NSString的isEqual： 已经被重写了,注意这里是重写因为isEqual：是NSObject的方法 同时还增加了一个isEqualToString：方法，这里是增加，因为这是NSString自己的方法 同样的还有还多，比如NSDate,NSArray,NSDictionary,NSSet,甚至是UIColor 所以当我们想要比较自己定义的对象的值的时候，我们也要重写自己的isEqual： 重写的时候其实你可以说任何一个比较的对象都是一样的，换句话说只要你觉得符合你的业务逻辑，你就可以说他是一样 重写isEqual：123456789101112131415161718- (BOOL)isEqual:(id)other &#123; if (other == self) return YES; if (!other || ![other isKindOfClass:[self class]]) return NO; return [self isEqualToWidget:other]; &#125; - (BOOL)isEqualToWidget:(MyWidget *)aWidget &#123; if (self == aWidget) return YES; if (![(id)[self name] isEqual:[aWidget name]]) return NO; if (![[self data] isEqualToData:[aWidget data]]) return NO; return YES; &#125; 其实上面的方法可以随意返回，只要你觉得需要","tags":[{"name":"iOS","slug":"iOS","permalink":"http://yoursite.com/tags/iOS/"}]},{"title":"Hexo创建一个blog","date":"2016-08-03T12:38:44.000Z","path":"2016/08/03/Hexo创建一个blog/","text":"post布局当你的Hexo已经搭建完成的时候，你就可以写blog了，最简单的创建一个blog的方法就是调用 1hexo new blog_title 执行完成之后，hexo会在根目录的source文件夹下创建一个_post文件夹，并在里面生成一个blog_title.md文件。 这个创建blog的完整命令是 1hexo new post blog_title 这个就是post布局，当hexo g 或者 s 或者 d的时候，会把_post文件夹中的文件都生成静态页面 draft布局1hexo new draft blog_title 当使用draft布局创建一个博客的时候，hexo也会在根目录的source文件夹下创建一个_draft文件夹，并在里面生成一个blog_title.md文件， 但是在hexo g 或者 s 或者 d的时候，是无法看到你创建的博客的 因为draft布局是草稿布局，在_draft文件夹中的博客都认为是草稿，不能发布 那当你想看看你的草稿写出来的效果怎么样的时候，你可以使用下面命令将草稿部署到本地 12hexo g --drafthexo s --draft 如果你的博客已经完成了，你可以使用下面的命令将他发布 1hexo publish draft blog_title.md page布局1hexo new page &quot;about&quot; 当使用page布局创建一个博客的时候，hexo会在根目录的source文件夹下创建一个about文件夹，并在里面生成一个index.md文件 当你部署完，你需要使用子路径去访问他 eg： 1http://localhost:4000/about","tags":[{"name":"日常","slug":"日常","permalink":"http://yoursite.com/tags/日常/"},{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]},{"title":"Hexo的安装和使用","date":"2016-08-02T11:13:00.000Z","path":"2016/08/02/Hexo的安装和使用/","text":"一、hexo的安装1、安装Node.jsHexo是基于Node.js的静态博客框架，所以要安装Hexo先要安装Node.js。 Node.js的安装方法非常简单，从Node.js官网下载安装包安装就好 2、安装gitmac下安装了Xcode就会有git 3、安装Hexo在终端执行如下命令 1sudo npm install -g hexo 等待安装成功 安装完成后使用查看版本命令，看看是否安装成功 1hexo -v 如果正常显示版本说明安装成功 注意如果报如下错误： 123456789101112Error: The module &apos;/Users/***/Desktop/***/node_modules/dtrace-provider/build/Release/DTraceProviderBindings.node&apos;was compiled against a different Node.js version usingNODE_MODULE_VERSION 48. This version of Node.js requiresNODE_MODULE_VERSION 67. Please try re-compiling or re-installingthe module (for instance, using `npm rebuild` or `npm install`). at Object.Module._extensions..node (internal/modules/cjs/loader.js:751:18) at Module.load (internal/modules/cjs/loader.js:620:32) at tryModuleLoad (internal/modules/cjs/loader.js:560:12) at Function.Module._load (internal/modules/cjs/loader.js:552:3) at Module.require (internal/modules/cjs/loader.js:658:17) ... 执行下面操作： 1231. cd hexo 根目录2. rm -rvf node_modules3. npm install 这是因为node_modules的缓存存在版本问题 二、hexo的使用创建一个blog库1hexo init blog blog是文件夹的名称，可以随便起 创建一个blog1hexo new blog_title 这个样就可以创建一个title是blog_title的博客了 这个只是一个默认参数的简写命令 生成静态页面123hexo generate 或者：hexo g 部署到本地123hexo server 或者：hexo s 部署完可以在浏览器中打开预设的地址查看blog 部署到远端123hexo deploy 或者：hexo d 要部署到远端需要配置博客更目录下的_config.yml文件中的内容 1234deploy: type: git repo: 自己的git地址 branch: master","tags":[{"name":"日常","slug":"日常","permalink":"http://yoursite.com/tags/日常/"},{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]}]