{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME.ml","path":"CNAME.ml","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/header.jpeg","path":"images/header.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"936bd0773fccc5f1c930a43e760ecf1a89099d92","modified":1539833934090},{"_id":"source/CNAME.ml","hash":"d62d122efe6c38068bd2f4d2e6e1bbf301eb9c80","modified":1486613210000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1525686455294},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1525686455295},{"_id":"themes/next/.DS_Store","hash":"50039554cc1f3ed28bb576495085e82145d037d9","modified":1539920860472},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1525686455293},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1525686455298},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1525686455298},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1525686455298},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1525686455298},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1525686455299},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1525686455299},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1525686455299},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1525686455300},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1525686455301},{"_id":"themes/next/_config_backUp.yml","hash":"3f282b1c27c76344bb06b2a54bc262922cbda850","modified":1525752507431},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1525686455302},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1525686455302},{"_id":"themes/next/_config.yml","hash":"506a220b48862af837257ff0e168a0859e8a0545","modified":1539920525710},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1525686455323},{"_id":"themes/next/untitled.js","hash":"c509c2049dc3a9ccf359db1276208b6b90ca4141","modified":1528870974314},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1491397936000},{"_id":"source/_posts/Blocks.md","hash":"b4f66aa7c7b7d6416b1ce3587d9457ab07e16a93","modified":1530696119101},{"_id":"source/_posts/JavaScript.md","hash":"8db137d48e5d2e8046c16099e59b2b9979ce9b35","modified":1491481584000},{"_id":"source/_posts/OC使用静态库中的类别.md","hash":"b33b0110d25c848d3ec3f4f5ff86413dc4ffc4c1","modified":1491450535000},{"_id":"source/_posts/Untitled.md","hash":"c43775ea2c21066b61765461f6a37e668d1f322b","modified":1491831810000},{"_id":"source/_posts/bridged.md","hash":"cdcbd70821b65c6e3ad68dbd2f0c7f0fba034ff3","modified":1526369734232},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1484642734000},{"_id":"source/_posts/Xcode8 报错resource fork, Finder information, or similar detritus not allowed.md","hash":"0bcd1c365e43174385c552b316dbe523c36ad952","modified":1491394618000},{"_id":"source/_posts/appium测试时候的那些事.md","hash":"2b20e37d1d2988de01b9e3c75a20c4d76c55ac8c","modified":1487215247000},{"_id":"source/_posts/centOS系统命令.md","hash":"8f8732fb483c64b07f10b29d11f6a34d29d00de5","modified":1535529436961},{"_id":"source/_posts/ios与os x多线程与内存管理","hash":"3ff361ba18c430818d50c2b9d50b8ca3bff5ea8e","modified":1502711881000},{"_id":"source/_posts/读《iOS与OS X多线程和内存管理》——前言.md","hash":"02257ab2d3c114bfd01a730feb829832d57854cd","modified":1526287893591},{"_id":"source/_posts/my-first-blog.md","hash":"0680931befcaa34f362706642599c0276f6704be","modified":1484128049000},{"_id":"source/iOS日常/index.md","hash":"61f20f7ba6d3c1511e4c30c0a7254128358523fa","modified":1539926048199},{"_id":"source/_posts/ssh连接报错.md","hash":"2663779c010ae1fc30ccc0c671807f18c535cada","modified":1499741710000},{"_id":"source/tags/index.md","hash":"129c3aa7f5ea53a996a6d703a7181f42af45567f","modified":1539922414007},{"_id":"source/_posts/枚举的实现方式(移位枚举).md","hash":"699c4495723f65e8cfa4801b33f1cf8c6ccda834","modified":1490866007000},{"_id":"source/_posts/读《iOS与OS X多线程和内存管理》——引用计数.md","hash":"2b5c8c654dd81811755e8cd56af86ff39bf98d20","modified":1528287099617},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1525686455302},{"_id":"themes/next/languages/.DS_Store","hash":"ffe4bcd55a7317dfe84ef15c5f62969652f6084a","modified":1539921267750},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1525686455302},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1525686455303},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1525686455303},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1525686455303},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1525686455303},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1525686455303},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1525686455303},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1525686455304},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1525686455304},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1525686455304},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1525686455304},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1525686455305},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1525686455305},{"_id":"themes/next/languages/zh-Hans_backup.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1525686455305},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1525686455305},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1525686455305},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1525686455306},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1525686455322},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1525686455322},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1525686455322},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1525686455323},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1525686455323},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1525686455323},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1525686455324},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1525686455324},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1525686455323},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1525686455409},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1525686455410},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1525686455410},{"_id":"source/_posts/OC使用静态库中的类别/OC使用静态库中的类别.md","hash":"6d0182bc2ed10369e15ba6f99775b37072805e51","modified":1530696748561},{"_id":"source/_posts/WeView 2 使用翻译/WeView 2 使用翻译.md","hash":"b5a0e6ddb12b2eb09ab6bda8c41f895a6daa46dd","modified":1530696739677},{"_id":"source/_posts/Xcode8 报错resource fork, Finder information, or similar detritus not allowed/Xcode8 报错resource fork, Finder information, or similar detritus not allowed.md","hash":"7e59017c88f693ce0a6120e720c874edd9e86ad2","modified":1530696757570},{"_id":"source/_posts/枚举的实现方式(移位枚举)/枚举的实现方式(移位枚举).md","hash":"86c8baeba8b19c5263344b516176869553c1940f","modified":1530696699035},{"_id":"source/_posts/加密算法/加密算法.md","hash":"e6520b8a8905ddf764d146c71ac41451480dcfdc","modified":1530696730074},{"_id":"source/_posts/内存管理/内存管理.md","hash":"457a275c7c71b8f3646e0a93aaa262d8075b12c3","modified":1530696716034},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1525686455354},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1525686455306},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1525686455306},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1525686455306},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1525686455307},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1525686455307},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1525686455307},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1525686455308},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1525686455308},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1525686455307},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1525686455308},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1525686455308},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1525686455309},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1525686455309},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1525686455309},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1525686455309},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1525686455311},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1525686455311},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1525686455313},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1525686455319},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1525686455319},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1525686455319},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1525686455320},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1525686455320},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1525686455320},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1525686455320},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1525686455325},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1525686455325},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1525686455325},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1525686455326},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1525686455326},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1525686455326},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1525686455326},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1525686455326},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1525686455327},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1525686455354},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1525686455355},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1525686455355},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1525686455355},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1525686455355},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1525686455356},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1525686455356},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1525686455356},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1525686455356},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1525686455357},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1525686455357},{"_id":"themes/next/source/images/header.jpeg","hash":"c04a1acaa898505134f4373630e128ccc72bf99a","modified":1484127199000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1525686455357},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1525686455357},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1525686455358},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1525686455358},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1525686455358},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1525686455358},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1525686455359},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1525686455358},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1525686455312},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1525686455312},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1525686455353},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1525686455354},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1525686455347},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1525686455348},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1525686455348},{"_id":"source/_posts/WeView 2 使用翻译/resources/9AF089FB76B2ADB18C4B3E9423098F77.jpg","hash":"cdf10d2b08adcfbfc5aa0cd0f2f2c99ce95e6bea","modified":1492571665000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1525686455308},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1525686455309},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1525686455310},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1525686455310},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1525686455310},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1525686455310},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1525686455310},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1525686455311},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1525686455311},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1525686455312},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1525686455312},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1525686455313},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1525686455313},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1525686455313},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1525686455313},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1525686455314},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1525686455314},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1525686455314},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1525686455314},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1525686455315},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1525686455315},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1525686455315},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1525686455315},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1525686455315},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1525686455316},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1525686455316},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1525686455316},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1525686455316},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1525686455318},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1525686455318},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1525686455318},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1525686455318},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1525686455318},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1525686455319},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1525686455321},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1525686455321},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1525686455321},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1525686455322},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1525686455353},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1525686455354},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1525686455354},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1525686455347},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1525686455353},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1525686455347},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1525686455348},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1525686455348},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1525686455359},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1525686455360},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1525686455360},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1525686455360},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1525686455360},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1525686455361},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1525686455360},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1525686455361},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1525686455362},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1525686455361},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1525686455362},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1525686455371},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1525686455371},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1525686455370},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1525686455366},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1525686455370},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1525686455375},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1525686455375},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1525686455375},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1525686455392},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1525686455376},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1525686455393},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1525686455393},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1525686455394},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1525686455395},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1525686455395},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1525686455394},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1525686455395},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1525686455394},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1525686455394},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1525686455377},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1525686455377},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1525686455378},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1525686455378},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1525686455378},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1525686455396},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1525686455396},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1525686455396},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1525686455396},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1525686455396},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1525686455396},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1525686455397},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1525686455397},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1525686455397},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1525686455397},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1525686455397},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1525686455398},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1525686455398},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1525686455398},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1525686455399},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1525686455399},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1525686455399},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1525686455404},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1525686455407},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1525686455405},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1525686455409},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1525686455409},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1525686455393},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1525686455320},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1525686455321},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1525686455327},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1525686455329},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1525686455329},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1525686455329},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1525686455327},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1525686455334},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1525686455340},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1525686455345},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1525686455345},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1525686455346},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1525686455346},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1525686455346},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1525686455347},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1525686455346},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1525686455348},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1525686455349},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1525686455349},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1525686455349},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1525686455349},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1525686455350},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1525686455350},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1525686455350},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1525686455351},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1525686455351},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1525686455351},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1525686455351},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1525686455352},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1525686455352},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1525686455352},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1525686455353},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1525686455351},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1525686455352},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1525686455353},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1525686455361},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1525686455364},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1525686455371},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1525686455366},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1525686455366},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1525686455371},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1525686455372},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1525686455372},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1525686455374},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1525686455372},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1525686455375},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1525686455372},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1525686455374},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1525686455377},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1525686455376},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1525686455380},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1525686455379},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1525686455404},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1525686455404},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1525686455378},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1525686455365},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1525686455392},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1525686455391},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1525686455406},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1525686455332},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1525686455329},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1525686455332},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1525686455332},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1525686455332},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1525686455333},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1525686455333},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1525686455333},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1525686455333},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1525686455330},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1525686455330},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1525686455330},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1525686455330},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1525686455331},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1525686455340},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1525686455340},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1525686455341},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1525686455341},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1525686455341},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1525686455341},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1525686455342},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1525686455340},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1525686455337},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1525686455341},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1525686455338},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1525686455338},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1525686455338},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1525686455339},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1525686455338},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1525686455339},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1525686455339},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1525686455339},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1525686455339},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1525686455334},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1525686455335},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1525686455335},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1525686455335},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1525686455335},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1525686455336},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1525686455336},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1525686455336},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1525686455335},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1525686455336},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1525686455337},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1525686455337},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1525686455336},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1525686455337},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1525686455337},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1525686455342},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1525686455343},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1525686455343},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1525686455342},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1525686455343},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1525686455344},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1525686455344},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1525686455345},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1525686455343},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1525686455344},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1525686455350},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1525686455350},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1525686455352},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1525686455363},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1525686455363},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1525686455363},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1525686455364},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1525686455364},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1525686455373},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1525686455372},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1525686455373},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1525686455373},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1525686455373},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1525686455373},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1525686455382},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1525686455384},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1525686455390},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1525686455369},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1525686455402},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1525686455388},{"_id":"public/content.json","hash":"6a35075103f1e46d73b3af4bc8592be77f3ed9b7","modified":1539926067483},{"_id":"public/tags/index.html","hash":"b334f5032953316e055b9c0d672b86a3f6f39217","modified":1539926067561},{"_id":"public/2018/07/04/Xcode8 报错resource fork, Finder information, or similar detritus not allowed/Xcode8 报错resource fork, Finder information, or similar detritus not allowed/index.html","hash":"6e8fef40088b9248b296575009b92958905fc1b0","modified":1539926067561},{"_id":"public/2018/07/04/加密算法/加密算法/index.html","hash":"eee77681f33ea38ae7f74b14d982f7c268f530c8","modified":1539926067561},{"_id":"public/2018/07/04/内存管理/内存管理/index.html","hash":"4470084b4d45fca015fc8b67865aab0859821cf0","modified":1539926067561},{"_id":"public/2017/04/05/OC使用静态库中的类别/index.html","hash":"713c15de4503a0f018c79794f53204d3910d17c3","modified":1539926067561},{"_id":"public/2017/04/05/OC使用静态库中的类别/OC使用静态库中的类别/index.html","hash":"5ca0d97ae12080631fc730c8c90b56d41b3c106e","modified":1539926067561},{"_id":"public/2017/03/31/Xcode8 报错resource fork, Finder information, or similar detritus not allowed/index.html","hash":"f9ef7ae311c0ee3e1278589b062e878178e4e771","modified":1539926067561},{"_id":"public/2017/03/28/Untitled/index.html","hash":"e320e370940e3b0723f17924bba99a8528c30c87","modified":1539926067562},{"_id":"public/2017/01/11/appium测试时候的那些事/index.html","hash":"fb243b1bc293c9a1252a71f42ecc3f135c18ad11","modified":1539926067562},{"_id":"public/2017/01/11/my-first-blog/index.html","hash":"14b23210704292c55a8fc508b2d790a1e8783a88","modified":1539926067562},{"_id":"public/2017/01/11/hello-world/index.html","hash":"7d4e6336f4f8163a595c723cf6f8d372b57db1c3","modified":1539926067562},{"_id":"public/2016/12/11/ssh连接报错/index.html","hash":"a048e403caff793d0f53834815f8e06a2c8e3c44","modified":1539926067562},{"_id":"public/archives/index.html","hash":"20aa6cee9e20798eecdf5c5b0c568436e00b0c9d","modified":1539926067562},{"_id":"public/archives/page/2/index.html","hash":"af3b39bac56684bcd33a61855d3a075272f9cd33","modified":1539926067562},{"_id":"public/archives/2016/index.html","hash":"cf160056ab8aa62bab0c6048ea3d929a56ca5fa8","modified":1539926067562},{"_id":"public/archives/2016/05/index.html","hash":"ec2ad756945b3dea47acfe0adcc868dda73979bf","modified":1539926067562},{"_id":"public/archives/2016/12/index.html","hash":"8650821128ba37304e2edcc52b3e8298b2808d0a","modified":1539926067562},{"_id":"public/archives/2017/index.html","hash":"19067ac5741ff3f4ecb469cd773ab85445e94846","modified":1539926067562},{"_id":"public/archives/2017/page/2/index.html","hash":"328e61d925fd0174c711c915c63ba1acefba29bb","modified":1539926067562},{"_id":"public/archives/2017/01/index.html","hash":"4d02135806d10fc8060f7fbbe5875d9f0aae44c1","modified":1539926067562},{"_id":"public/archives/2017/03/index.html","hash":"622a3121ea719d53381bc371b5beb64598defd6a","modified":1539926067562},{"_id":"public/archives/2017/04/index.html","hash":"1b1ee49b78d156dba730f9795a27ce4b8dd0d92a","modified":1539926067562},{"_id":"public/archives/2018/index.html","hash":"8776ccefe969c1216f528db9b54d51b5d0d36f96","modified":1539926067562},{"_id":"public/archives/2018/07/index.html","hash":"d2b0bce7093ffc73d99127eaa9dd72f92b775de0","modified":1539926067562},{"_id":"public/tags/JavaScript/index.html","hash":"2f3c556f4249595e9809a91cba2efce01a4d849c","modified":1539926067562},{"_id":"public/tags/iOS/index.html","hash":"50c3ba96609da761208f05a36ae0ecbae920fa1b","modified":1539926067562},{"_id":"public/tags/appium/index.html","hash":"fd5e103089df3fdc7fd64a614f55acb6500af6c5","modified":1539926067563},{"_id":"public/tags/hello/index.html","hash":"cdf8eab3fb3ae402930c277425919beebe2ae4d8","modified":1539926067563},{"_id":"public/tags/Linux/index.html","hash":"2475325782413c85f361d6cf29908980572bdef9","modified":1539926067563},{"_id":"public/tags/VPS那些事/index.html","hash":"48d7ae0f95a82932f70c97729667f6c20c00be2a","modified":1539926067563},{"_id":"public/2018/07/04/WeView 2 使用翻译/WeView 2 使用翻译/index.html","hash":"9a1f867c2dcfeea4523391e8bb2c17faef89f084","modified":1539926067563},{"_id":"public/2018/07/04/枚举的实现方式(移位枚举)/枚举的实现方式(移位枚举)/index.html","hash":"1eb2ddfb6aa1902678c4089518674b5dcab637ae","modified":1539926067563},{"_id":"public/2018/07/04/Blocks/index.html","hash":"62bad5e79ebeb9815db51fc1037a78b9542b2e91","modified":1539926067563},{"_id":"public/2017/01/11/读《iOS与OS X多线程和内存管理》——引用计数/index.html","hash":"ad33d3227e9049bb600d619569585ac38f8b1669","modified":1539926067563},{"_id":"public/2017/01/11/读《iOS与OS X多线程和内存管理》——前言/index.html","hash":"f62127469f67fcc5ed3018219415a7c56b6187a6","modified":1539926067563},{"_id":"public/2017/01/11/bridged/index.html","hash":"00f749c241eacb207f7b1f7508f76d067466e071","modified":1539926067563},{"_id":"public/2017/01/11/JavaScript/index.html","hash":"ff05cf3787a374171bdcf29c56f37aa0ce6abd7a","modified":1539926067563},{"_id":"public/2016/12/11/centOS系统命令/index.html","hash":"c9d05891371350df61de47ccd48556087c3459e9","modified":1539926067563},{"_id":"public/2016/05/11/枚举的实现方式(移位枚举)/index.html","hash":"d88f29d814aac99412e56cc62f13a9b7d12df7a4","modified":1539926067563},{"_id":"public/index.html","hash":"d4f88c1c0ccf621b2b435da604fdbb12b502f6f7","modified":1539926067563},{"_id":"public/page/2/index.html","hash":"cb8e4f90098cf7e62341db752b24a8f86423285c","modified":1539926067563},{"_id":"public/iOS日常/index.html","hash":"9a11e9b19aa9391ad34fa2fee8c6451c417fb9ac","modified":1539926067620},{"_id":"public/CNAME.ml","hash":"d62d122efe6c38068bd2f4d2e6e1bbf301eb9c80","modified":1539926067631},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1539926067631},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1539926067631},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1539926067631},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1539926067631},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1539926067631},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1539926067631},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1539926067631},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1539926067631},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1539926067632},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1539926067632},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1539926067632},{"_id":"public/images/header.jpeg","hash":"c04a1acaa898505134f4373630e128ccc72bf99a","modified":1539926067632},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1539926067632},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1539926067632},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1539926067632},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1539926067632},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1539926067632},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1539926067632},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1539926067632},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1539926067632},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1539926067632},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1539926067632},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1539926067632},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1539926067632},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1539926067632},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1539926067632},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1539926067632},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1539926067632},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1539926067632},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1539926067632},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1539926067632},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1539926067632},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1539926067633},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1539926067633},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1539926068766},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1539926068795},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1539926068814},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1539926068814},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1539926068814},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1539926068814},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1539926068814},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1539926068815},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1539926068815},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1539926068815},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1539926068815},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1539926068815},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1539926068815},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1539926068815},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1539926068815},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1539926068815},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1539926068815},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1539926068815},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1539926068815},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1539926068815},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1539926068815},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1539926068815},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1539926068815},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1539926068815},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1539926068815},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1539926068815},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1539926068816},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1539926068816},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1539926068817},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1539926068817},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1539926068817},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1539926068817},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1539926068817},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1539926068817},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1539926068817},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1539926068819},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1539926068819},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1539926068819},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1539926068819},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1539926068819},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1539926068819},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1539926068820},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1539926068820},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1539926068820},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1539926068820},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1539926068820},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1539926068821},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1539926068821},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1539926068821},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1539926068821},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1539926068821},{"_id":"public/css/main.css","hash":"b3f999f694d075398ac4395e05fe8ab39a9af42f","modified":1539926068821},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1539926068821},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1539926068821},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1539926068821},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1539926068824},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1539926068825},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1539926068825},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1539926068826},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1539926068826},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1539926068826},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1539926068826},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1539926068826},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1539926068826},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1539926068826},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1539926068827},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1539926068827},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1539926068827},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1539926068827},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1539926068827},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1539926068827},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1539926068827},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1539926068828},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1539926068828},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1539926068828},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1539926068847}],"Category":[],"Data":[],"Page":[{"title":"iOS日常","date":"2018-10-19T05:14:08.000Z","_content":"","source":"iOS日常/index.md","raw":"---\ntitle: iOS日常\ndate: 2018-10-19 13:14:08\n---\n","updated":"2018-10-19T05:14:08.199Z","path":"iOS日常/index.html","comments":1,"layout":"page","_id":"cjnfk7vfv0001zb7uc321qet7","content":"","excerpt":"","more":""},{"title":"tags","date":"2018-10-19T04:13:33.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-10-19 12:13:33\n---\n","updated":"2018-10-19T04:13:34.007Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjnfk7vg00003zb7urzzjelw9","content":"","excerpt":"","more":""}],"Post":[{"_content":"# Blocks #\n\n## 什么是Blocks ##\n\n```blocks```是带有自动变量（局部变量）的匿名函数\n\n匿名函数，通过```Blocks``` 源码中能够使用不带名称的函数\n\n\n\n\n\n## Block 截获自动变量的值 ##\n\n```blocks```被称为“带有自动变量（局部变量）的匿名函数”\n\n\n那么```blocks```如何带自动变量呢？\n\n```\nvoid subMain() {\n    \n    int val = 10;\n    char *fmt = \"the val is %d\";\n    \n    void (^blk)(void) = ^{printf(fmt,val);};\n    blk();//the val is 10\n    val = 2;\n    blk();//the val is 10\n}\n```\n\n上面这个函数中两次调用block变量 blk，输出的都是“the val is 10”，因为block截获自动变量的值，\n所谓block截获自动变量的值，指的是在block表达式中会保存该自动变量的瞬间值\n\n\n如果要在block中改变局部变量呢？\n\n```\nvoid subMain() {\n    \n    int val = 10;\n    char *fmt = \"the val is %d\";\n    \n    void (^blk)(void) = ^{ val = 2};\n    blk();\n    \n}\n```\n\n这个函数想在block中改变局部变量的值，但是会报编译错误，显然，直接在block中改变自动变量的值也是不可以的\n\n如果想要在block中改变局部变量的值需要在局部变量前面加上一个```__blcok```修饰\n\n```\nvoid subMain() {\n    \n    __block int val = 10;\n    char *fmt = \"the val is %d\";\n    \n    void (^blk)(void) = ^{ val = 2};\n    blk();\n    \n}\n```\n\n这样就不会报错，而且可以改变局部变量的值\n\n\nclang -rewrite-objc\n\n\n\n\nblock 会在以下情况从栈拷贝到堆上\n\n1. 调用copy的实例方法\n2. block作为函数返回值返回时\n3. 将block赋值给附有__strong修饰符id类型的类或block类型成员变量时\n4. 在方法名中含有usingBlock的cocoa框架方法或GCD的API中传递Block时\n\n\n\n栈区(stack)\n概述：栈是向低地址扩展的数据结构，是一块连续的内存区域。由栈顶的地址和栈的最大容量是系统预先规定好的。栈的空间很小，大概1-2M。超出overflow。\n\n使用：栈区，就是函数(方法)运行时向系统请求的内存。栈中的局部变量，参数由编译器分配和释放，函数运行就分配，函数结束就释放，由系统完成。是系统数据结构，对应进程唯一。\n\n特别注意：系统栈的剩余空间 大于 所申请的空间，系统为程序提供内存，不然，报错异常，提示栈的溢出。\n\n堆区(heap)\n概述：堆是向高地址扩展的数据结构，不连续的内存区域。系统用链表储存空闲地址的。链表遍历由低向高。堆大小直接受设备有效虚拟内存影响。\n\n1.首先应该知道操作系统有一个记录空闲内存地址的链表。\n2.当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序。\n3.由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中\n1\n2\n3\n使用: 存放实体对象的。由程序员分配和释放(arc自动插入分配和释放代码)，例如alloc 申请的会放入堆中。\n\n全局\\静态区(static)\n静态变量和全局变量是存储在一起的。初始化的全局变量和静态变量存放在一块区域，未初始化的全局变量和静态变量在相邻的另一块区域，程序结束后有系统释放。\n\nint a;//未初始化的静态区\nint b = 10;//初始化的静态区\n1\n2\n文字常量区\n存放常量字符串，程序结束系统释放\n\n程序代码区\n存放函数的二进制代码\n\n```\nmain{\n   int b; 栈区\n   char s[] = \"abc\" 栈\n   char *p1; 栈 \n   char *p2 = \"123456\";  //123456在文字常量区，p2在栈上。\n   static int c =0； 全局（静态）初始化区 \n\n   w1 = (char *)malloc(10); \n   w2 = (char *)malloc(20); \n   分配得来得10和20字节的区域就在堆区。 \n }\n\n```\n\n\n# GCD\n\n同步添加\ndispatch_sync(Queue,Block) \n\n等待 queue 中的所有任务都完成了之后，把block任务添加进入\n\n异步添加\ndispatch_async(Queue,Block) \n\n不做任何等待，直接把block中的任务添加进入queue\n\n\n注意：\n\n1. 如果是dispatch_sync（同步添加），但是queue 就是当前dispatch_sync运行的队列，就会造成死锁\n\n\n打比方：\n\nblock ：每个学生\n\nqueue ： 学生所站的队 （有两类）\n\ndispatch_sync 和 dispatch_async\n\n线程 ： 在哪个跑道上跑步\n\n\n\n把一个任务使用GCD让其在线程中执行，比喻下来就是安排一个学生到跑道上跑步\n\n\nqueue：这里有两种队列，一直叫串行队列，一种叫并行队列，\n\n串行队列：只能有一个学生在排队，如果有多个学生想要去排队，只能等前一个学生跑玩步，跑道空出来才能去排队\n\n\n\n\neg：\n\n异步并行队列：\n\n```\nvoid GCD_async_Test() {\n    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0); //获得一个并行队列\n    NSLog(@\"任务1加入队列1前\");\n    dispatch_async(queue, ^{\n        NSLog(@\"开始长时间任务1\");\n        [NSThread sleepForTimeInterval:3];\n        NSLog(@\"长时间任务1完成\");\n    });//把任务放入并行队列中\n    NSLog(@\"任务1加入队列后\");\n}\n```\n\n输出：\n\n任务1加入队列1前\n任务1加入队列后\n开始长时间任务1\n长时间任务1完成\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Blocks.md","raw":"# Blocks #\n\n## 什么是Blocks ##\n\n```blocks```是带有自动变量（局部变量）的匿名函数\n\n匿名函数，通过```Blocks``` 源码中能够使用不带名称的函数\n\n\n\n\n\n## Block 截获自动变量的值 ##\n\n```blocks```被称为“带有自动变量（局部变量）的匿名函数”\n\n\n那么```blocks```如何带自动变量呢？\n\n```\nvoid subMain() {\n    \n    int val = 10;\n    char *fmt = \"the val is %d\";\n    \n    void (^blk)(void) = ^{printf(fmt,val);};\n    blk();//the val is 10\n    val = 2;\n    blk();//the val is 10\n}\n```\n\n上面这个函数中两次调用block变量 blk，输出的都是“the val is 10”，因为block截获自动变量的值，\n所谓block截获自动变量的值，指的是在block表达式中会保存该自动变量的瞬间值\n\n\n如果要在block中改变局部变量呢？\n\n```\nvoid subMain() {\n    \n    int val = 10;\n    char *fmt = \"the val is %d\";\n    \n    void (^blk)(void) = ^{ val = 2};\n    blk();\n    \n}\n```\n\n这个函数想在block中改变局部变量的值，但是会报编译错误，显然，直接在block中改变自动变量的值也是不可以的\n\n如果想要在block中改变局部变量的值需要在局部变量前面加上一个```__blcok```修饰\n\n```\nvoid subMain() {\n    \n    __block int val = 10;\n    char *fmt = \"the val is %d\";\n    \n    void (^blk)(void) = ^{ val = 2};\n    blk();\n    \n}\n```\n\n这样就不会报错，而且可以改变局部变量的值\n\n\nclang -rewrite-objc\n\n\n\n\nblock 会在以下情况从栈拷贝到堆上\n\n1. 调用copy的实例方法\n2. block作为函数返回值返回时\n3. 将block赋值给附有__strong修饰符id类型的类或block类型成员变量时\n4. 在方法名中含有usingBlock的cocoa框架方法或GCD的API中传递Block时\n\n\n\n栈区(stack)\n概述：栈是向低地址扩展的数据结构，是一块连续的内存区域。由栈顶的地址和栈的最大容量是系统预先规定好的。栈的空间很小，大概1-2M。超出overflow。\n\n使用：栈区，就是函数(方法)运行时向系统请求的内存。栈中的局部变量，参数由编译器分配和释放，函数运行就分配，函数结束就释放，由系统完成。是系统数据结构，对应进程唯一。\n\n特别注意：系统栈的剩余空间 大于 所申请的空间，系统为程序提供内存，不然，报错异常，提示栈的溢出。\n\n堆区(heap)\n概述：堆是向高地址扩展的数据结构，不连续的内存区域。系统用链表储存空闲地址的。链表遍历由低向高。堆大小直接受设备有效虚拟内存影响。\n\n1.首先应该知道操作系统有一个记录空闲内存地址的链表。\n2.当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序。\n3.由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中\n1\n2\n3\n使用: 存放实体对象的。由程序员分配和释放(arc自动插入分配和释放代码)，例如alloc 申请的会放入堆中。\n\n全局\\静态区(static)\n静态变量和全局变量是存储在一起的。初始化的全局变量和静态变量存放在一块区域，未初始化的全局变量和静态变量在相邻的另一块区域，程序结束后有系统释放。\n\nint a;//未初始化的静态区\nint b = 10;//初始化的静态区\n1\n2\n文字常量区\n存放常量字符串，程序结束系统释放\n\n程序代码区\n存放函数的二进制代码\n\n```\nmain{\n   int b; 栈区\n   char s[] = \"abc\" 栈\n   char *p1; 栈 \n   char *p2 = \"123456\";  //123456在文字常量区，p2在栈上。\n   static int c =0； 全局（静态）初始化区 \n\n   w1 = (char *)malloc(10); \n   w2 = (char *)malloc(20); \n   分配得来得10和20字节的区域就在堆区。 \n }\n\n```\n\n\n# GCD\n\n同步添加\ndispatch_sync(Queue,Block) \n\n等待 queue 中的所有任务都完成了之后，把block任务添加进入\n\n异步添加\ndispatch_async(Queue,Block) \n\n不做任何等待，直接把block中的任务添加进入queue\n\n\n注意：\n\n1. 如果是dispatch_sync（同步添加），但是queue 就是当前dispatch_sync运行的队列，就会造成死锁\n\n\n打比方：\n\nblock ：每个学生\n\nqueue ： 学生所站的队 （有两类）\n\ndispatch_sync 和 dispatch_async\n\n线程 ： 在哪个跑道上跑步\n\n\n\n把一个任务使用GCD让其在线程中执行，比喻下来就是安排一个学生到跑道上跑步\n\n\nqueue：这里有两种队列，一直叫串行队列，一种叫并行队列，\n\n串行队列：只能有一个学生在排队，如果有多个学生想要去排队，只能等前一个学生跑玩步，跑道空出来才能去排队\n\n\n\n\neg：\n\n异步并行队列：\n\n```\nvoid GCD_async_Test() {\n    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0); //获得一个并行队列\n    NSLog(@\"任务1加入队列1前\");\n    dispatch_async(queue, ^{\n        NSLog(@\"开始长时间任务1\");\n        [NSThread sleepForTimeInterval:3];\n        NSLog(@\"长时间任务1完成\");\n    });//把任务放入并行队列中\n    NSLog(@\"任务1加入队列后\");\n}\n```\n\n输出：\n\n任务1加入队列1前\n任务1加入队列后\n开始长时间任务1\n长时间任务1完成\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Blocks","published":1,"date":"2018-07-04T09:21:59.101Z","updated":"2018-07-04T09:21:59.101Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnfk7vfq0000zb7u3eek5b52","content":"<h1 id=\"Blocks\"><a href=\"#Blocks\" class=\"headerlink\" title=\"Blocks\"></a>Blocks</h1><h2 id=\"什么是Blocks\"><a href=\"#什么是Blocks\" class=\"headerlink\" title=\"什么是Blocks\"></a>什么是Blocks</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">匿名函数，通过```Blocks``` 源码中能够使用不带名称的函数</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">## Block 截获自动变量的值 ##</div><div class=\"line\"></div><div class=\"line\">```blocks```被称为“带有自动变量（局部变量）的匿名函数”</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">那么```blocks```如何带自动变量呢？</div></pre></td></tr></table></figure>\n<p>void subMain() {</p>\n<pre><code>int val = 10;\nchar *fmt = &quot;the val is %d&quot;;\n\nvoid (^blk)(void) = ^{printf(fmt,val);};\nblk();//the val is 10\nval = 2;\nblk();//the val is 10\n</code></pre><p>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">上面这个函数中两次调用block变量 blk，输出的都是“the val is 10”，因为block截获自动变量的值，</div><div class=\"line\">所谓block截获自动变量的值，指的是在block表达式中会保存该自动变量的瞬间值</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">如果要在block中改变局部变量呢？</div></pre></td></tr></table></figure></p>\n<p>void subMain() {</p>\n<pre><code>int val = 10;\nchar *fmt = &quot;the val is %d&quot;;\n\nvoid (^blk)(void) = ^{ val = 2};\nblk();\n</code></pre><p>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">这个函数想在block中改变局部变量的值，但是会报编译错误，显然，直接在block中改变自动变量的值也是不可以的</div><div class=\"line\"></div><div class=\"line\">如果想要在block中改变局部变量的值需要在局部变量前面加上一个```__blcok```修饰</div></pre></td></tr></table></figure></p>\n<p>void subMain() {</p>\n<pre><code>__block int val = 10;\nchar *fmt = &quot;the val is %d&quot;;\n\nvoid (^blk)(void) = ^{ val = 2};\nblk();\n</code></pre><p>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">这样就不会报错，而且可以改变局部变量的值</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">clang -rewrite-objc</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">block 会在以下情况从栈拷贝到堆上</div><div class=\"line\"></div><div class=\"line\">1. 调用copy的实例方法</div><div class=\"line\">2. block作为函数返回值返回时</div><div class=\"line\">3. 将block赋值给附有__strong修饰符id类型的类或block类型成员变量时</div><div class=\"line\">4. 在方法名中含有usingBlock的cocoa框架方法或GCD的API中传递Block时</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">栈区(stack)</div><div class=\"line\">概述：栈是向低地址扩展的数据结构，是一块连续的内存区域。由栈顶的地址和栈的最大容量是系统预先规定好的。栈的空间很小，大概1-2M。超出overflow。</div><div class=\"line\"></div><div class=\"line\">使用：栈区，就是函数(方法)运行时向系统请求的内存。栈中的局部变量，参数由编译器分配和释放，函数运行就分配，函数结束就释放，由系统完成。是系统数据结构，对应进程唯一。</div><div class=\"line\"></div><div class=\"line\">特别注意：系统栈的剩余空间 大于 所申请的空间，系统为程序提供内存，不然，报错异常，提示栈的溢出。</div><div class=\"line\"></div><div class=\"line\">堆区(heap)</div><div class=\"line\">概述：堆是向高地址扩展的数据结构，不连续的内存区域。系统用链表储存空闲地址的。链表遍历由低向高。堆大小直接受设备有效虚拟内存影响。</div><div class=\"line\"></div><div class=\"line\">1.首先应该知道操作系统有一个记录空闲内存地址的链表。</div><div class=\"line\">2.当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序。</div><div class=\"line\">3.由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中</div><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">使用: 存放实体对象的。由程序员分配和释放(arc自动插入分配和释放代码)，例如alloc 申请的会放入堆中。</div><div class=\"line\"></div><div class=\"line\">全局\\静态区(static)</div><div class=\"line\">静态变量和全局变量是存储在一起的。初始化的全局变量和静态变量存放在一块区域，未初始化的全局变量和静态变量在相邻的另一块区域，程序结束后有系统释放。</div><div class=\"line\"></div><div class=\"line\">int a;//未初始化的静态区</div><div class=\"line\">int b = 10;//初始化的静态区</div><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">文字常量区</div><div class=\"line\">存放常量字符串，程序结束系统释放</div><div class=\"line\"></div><div class=\"line\">程序代码区</div><div class=\"line\">存放函数的二进制代码</div></pre></td></tr></table></figure></p>\n<p>main{<br>   int b; 栈区<br>   char s[] = “abc” 栈<br>   char <em>p1; 栈<br>   char </em>p2 = “123456”;  //123456在文字常量区，p2在栈上。<br>   static int c =0； 全局（静态）初始化区 </p>\n<p>   w1 = (char <em>)malloc(10);<br>   w2 = (char </em>)malloc(20);<br>   分配得来得10和20字节的区域就在堆区。<br> }</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># GCD</div><div class=\"line\"></div><div class=\"line\">同步添加</div><div class=\"line\">dispatch_sync(Queue,Block) </div><div class=\"line\"></div><div class=\"line\">等待 queue 中的所有任务都完成了之后，把block任务添加进入</div><div class=\"line\"></div><div class=\"line\">异步添加</div><div class=\"line\">dispatch_async(Queue,Block) </div><div class=\"line\"></div><div class=\"line\">不做任何等待，直接把block中的任务添加进入queue</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">注意：</div><div class=\"line\"></div><div class=\"line\">1. 如果是dispatch_sync（同步添加），但是queue 就是当前dispatch_sync运行的队列，就会造成死锁</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">打比方：</div><div class=\"line\"></div><div class=\"line\">block ：每个学生</div><div class=\"line\"></div><div class=\"line\">queue ： 学生所站的队 （有两类）</div><div class=\"line\"></div><div class=\"line\">dispatch_sync 和 dispatch_async</div><div class=\"line\"></div><div class=\"line\">线程 ： 在哪个跑道上跑步</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">把一个任务使用GCD让其在线程中执行，比喻下来就是安排一个学生到跑道上跑步</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">queue：这里有两种队列，一直叫串行队列，一种叫并行队列，</div><div class=\"line\"></div><div class=\"line\">串行队列：只能有一个学生在排队，如果有多个学生想要去排队，只能等前一个学生跑玩步，跑道空出来才能去排队</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">eg：</div><div class=\"line\"></div><div class=\"line\">异步并行队列：</div></pre></td></tr></table></figure>\n<p>void GCD_async_Test() {<br>    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0); //获得一个并行队列<br>    NSLog(@”任务1加入队列1前”);<br>    dispatch_async(queue, ^{<br>        NSLog(@”开始长时间任务1”);<br>        [NSThread sleepForTimeInterval:3];<br>        NSLog(@”长时间任务1完成”);<br>    });//把任务放入并行队列中<br>    NSLog(@”任务1加入队列后”);<br>}<br>```</p>\n<p>输出：</p>\n<p>任务1加入队列1前<br>任务1加入队列后<br>开始长时间任务1<br>长时间任务1完成</p>\n","excerpt":"","more":"<h1 id=\"Blocks\"><a href=\"#Blocks\" class=\"headerlink\" title=\"Blocks\"></a>Blocks</h1><h2 id=\"什么是Blocks\"><a href=\"#什么是Blocks\" class=\"headerlink\" title=\"什么是Blocks\"></a>什么是Blocks</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">匿名函数，通过```Blocks``` 源码中能够使用不带名称的函数</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">## Block 截获自动变量的值 ##</div><div class=\"line\"></div><div class=\"line\">```blocks```被称为“带有自动变量（局部变量）的匿名函数”</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">那么```blocks```如何带自动变量呢？</div></pre></td></tr></table></figure>\n<p>void subMain() {</p>\n<pre><code>int val = 10;\nchar *fmt = &quot;the val is %d&quot;;\n\nvoid (^blk)(void) = ^{printf(fmt,val);};\nblk();//the val is 10\nval = 2;\nblk();//the val is 10\n</code></pre><p>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">上面这个函数中两次调用block变量 blk，输出的都是“the val is 10”，因为block截获自动变量的值，</div><div class=\"line\">所谓block截获自动变量的值，指的是在block表达式中会保存该自动变量的瞬间值</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">如果要在block中改变局部变量呢？</div></pre></td></tr></table></figure></p>\n<p>void subMain() {</p>\n<pre><code>int val = 10;\nchar *fmt = &quot;the val is %d&quot;;\n\nvoid (^blk)(void) = ^{ val = 2};\nblk();\n</code></pre><p>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">这个函数想在block中改变局部变量的值，但是会报编译错误，显然，直接在block中改变自动变量的值也是不可以的</div><div class=\"line\"></div><div class=\"line\">如果想要在block中改变局部变量的值需要在局部变量前面加上一个```__blcok```修饰</div></pre></td></tr></table></figure></p>\n<p>void subMain() {</p>\n<pre><code>__block int val = 10;\nchar *fmt = &quot;the val is %d&quot;;\n\nvoid (^blk)(void) = ^{ val = 2};\nblk();\n</code></pre><p>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">这样就不会报错，而且可以改变局部变量的值</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">clang -rewrite-objc</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">block 会在以下情况从栈拷贝到堆上</div><div class=\"line\"></div><div class=\"line\">1. 调用copy的实例方法</div><div class=\"line\">2. block作为函数返回值返回时</div><div class=\"line\">3. 将block赋值给附有__strong修饰符id类型的类或block类型成员变量时</div><div class=\"line\">4. 在方法名中含有usingBlock的cocoa框架方法或GCD的API中传递Block时</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">栈区(stack)</div><div class=\"line\">概述：栈是向低地址扩展的数据结构，是一块连续的内存区域。由栈顶的地址和栈的最大容量是系统预先规定好的。栈的空间很小，大概1-2M。超出overflow。</div><div class=\"line\"></div><div class=\"line\">使用：栈区，就是函数(方法)运行时向系统请求的内存。栈中的局部变量，参数由编译器分配和释放，函数运行就分配，函数结束就释放，由系统完成。是系统数据结构，对应进程唯一。</div><div class=\"line\"></div><div class=\"line\">特别注意：系统栈的剩余空间 大于 所申请的空间，系统为程序提供内存，不然，报错异常，提示栈的溢出。</div><div class=\"line\"></div><div class=\"line\">堆区(heap)</div><div class=\"line\">概述：堆是向高地址扩展的数据结构，不连续的内存区域。系统用链表储存空闲地址的。链表遍历由低向高。堆大小直接受设备有效虚拟内存影响。</div><div class=\"line\"></div><div class=\"line\">1.首先应该知道操作系统有一个记录空闲内存地址的链表。</div><div class=\"line\">2.当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序。</div><div class=\"line\">3.由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中</div><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">使用: 存放实体对象的。由程序员分配和释放(arc自动插入分配和释放代码)，例如alloc 申请的会放入堆中。</div><div class=\"line\"></div><div class=\"line\">全局\\静态区(static)</div><div class=\"line\">静态变量和全局变量是存储在一起的。初始化的全局变量和静态变量存放在一块区域，未初始化的全局变量和静态变量在相邻的另一块区域，程序结束后有系统释放。</div><div class=\"line\"></div><div class=\"line\">int a;//未初始化的静态区</div><div class=\"line\">int b = 10;//初始化的静态区</div><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">文字常量区</div><div class=\"line\">存放常量字符串，程序结束系统释放</div><div class=\"line\"></div><div class=\"line\">程序代码区</div><div class=\"line\">存放函数的二进制代码</div></pre></td></tr></table></figure></p>\n<p>main{<br>   int b; 栈区<br>   char s[] = “abc” 栈<br>   char <em>p1; 栈<br>   char </em>p2 = “123456”;  //123456在文字常量区，p2在栈上。<br>   static int c =0； 全局（静态）初始化区 </p>\n<p>   w1 = (char <em>)malloc(10);<br>   w2 = (char </em>)malloc(20);<br>   分配得来得10和20字节的区域就在堆区。<br> }</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># GCD</div><div class=\"line\"></div><div class=\"line\">同步添加</div><div class=\"line\">dispatch_sync(Queue,Block) </div><div class=\"line\"></div><div class=\"line\">等待 queue 中的所有任务都完成了之后，把block任务添加进入</div><div class=\"line\"></div><div class=\"line\">异步添加</div><div class=\"line\">dispatch_async(Queue,Block) </div><div class=\"line\"></div><div class=\"line\">不做任何等待，直接把block中的任务添加进入queue</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">注意：</div><div class=\"line\"></div><div class=\"line\">1. 如果是dispatch_sync（同步添加），但是queue 就是当前dispatch_sync运行的队列，就会造成死锁</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">打比方：</div><div class=\"line\"></div><div class=\"line\">block ：每个学生</div><div class=\"line\"></div><div class=\"line\">queue ： 学生所站的队 （有两类）</div><div class=\"line\"></div><div class=\"line\">dispatch_sync 和 dispatch_async</div><div class=\"line\"></div><div class=\"line\">线程 ： 在哪个跑道上跑步</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">把一个任务使用GCD让其在线程中执行，比喻下来就是安排一个学生到跑道上跑步</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">queue：这里有两种队列，一直叫串行队列，一种叫并行队列，</div><div class=\"line\"></div><div class=\"line\">串行队列：只能有一个学生在排队，如果有多个学生想要去排队，只能等前一个学生跑玩步，跑道空出来才能去排队</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">eg：</div><div class=\"line\"></div><div class=\"line\">异步并行队列：</div></pre></td></tr></table></figure>\n<p>void GCD_async_Test() {<br>    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0); //获得一个并行队列<br>    NSLog(@”任务1加入队列1前”);<br>    dispatch_async(queue, ^{<br>        NSLog(@”开始长时间任务1”);<br>        [NSThread sleepForTimeInterval:3];<br>        NSLog(@”长时间任务1完成”);<br>    });//把任务放入并行队列中<br>    NSLog(@”任务1加入队列后”);<br>}<br>```</p>\n<p>输出：</p>\n<p>任务1加入队列1前<br>任务1加入队列后<br>开始长时间任务1<br>长时间任务1完成</p>\n"},{"title":"Learn JavaScript","date":"2017-01-11T03:10:12.000Z","_content":"\n## Equality (相等比较符) ##\n\n```Javascript\nvar foo = 42;\nvar bar = 42;\nvar baz = \"42\";\nvar qux = \"life\";\n```\n定义了四个变量在Javascript中 `==`是用来比较两个值但是不会判断类型故 `foo == baz`返回的值是`true`\n\n使用`==`比较的时候编译器会先把类型转换成相同的类型,再去比较\n\n因此在JavaScript 要是比较不同类型的两个值可以使用`===`这样会先判断类型,如果类型不同就会返回`false`\n\n所以推荐使用`===`比较\n\n<!----- more ----->\n\n注意: 1.`NaN`是个特殊的Number,他与所有其他值都不相等,包括它自己\n```JavaScript\nNaN === NaN ; // false\n```\n唯一能判断NaN的方法是通过isNaN()函数:\n```JavaScript\nisNaN(NaN); // true\n```\n\n2.浮点数的比较:\n```JavaScript\n1/3 === (1 - 2 / 3); //false\n```\n这个结果是正确的,出现这个结果这是因为浮点数在运算过程中会产生误差,计算机无法精确的表示无限小数,所以要比较两个浮点数是否相等,只能计算他们之差的绝对值,看是否小于某个阈值:\n\n```JavaScript\nMath.abs(1/3 - (1 - 2 / 3)) < 0.0000001; //true\n```\n\n\n## Types ##\n\n### numbers\n\nJavaScript中只有一种数字类型 – 64-bit float point,类似于Java中的double类型,所以在JavaScript中1和1.0是相同的值\nnumber可以直接做四则运算，规则和数学一致\n\n### 字符串\n\n字符串是以'单引号'或\"双引号\"括起来的文本,如`'abc'` `\"xyz\"`\n\n注意`' '`和`\" \"`并不是字符串的一部分\n\n如果字符串中包含`'` 就使用`\"\"`把文本包起来,如果字符串中包含`\"` 就需要使用转义字符了`\\`\n\n在多行字符串中换行使用的是`\\n` 但是如果行数太多`\\n`需要写多个,不方便,在JavaScript中又增加了一种表示方法(ES6),就是将多行文本用\\`... \\`括起来,就是键盘上tab键上边的那个按键.\n\n#### 模板字符串\n多个字符串可以使用`+`连接起来.字符串也可以是变量如:\n\n```JavaScript\nvar name = '小王吧';\nvar age = '100';\nvar message = '你好,' + name + ',你现在' + age + '岁';\n```\n同样,如果要连接的变量有很多,使用`+`就会很不方便,在JavaScript中增加了一种模板字符串的表示(ES6):\n\n```JavaScript\nvar name = '小王吧';\nvar age = '101';\nvar message = `${name},你今年${age}岁,是不是?`\n```\n注意:新的表示方法使用的是\\` ,就是新的多行文本使用的符号,就是键盘上`tab`按键上边的那个按键,不能使用`\"\"或''`,那样无法转换变量\n\n#### 字符串操作 ####\n获取字符的长度\n\n```JavaScript\nvar name = 'xiao wang ba.';\nalert(name.length); //13\n```\n\n获取指定位置字符,可以把字符串看成是特殊的数组,对字符串进行下标操作,从0索引开始\n\n```JavaScript\nvar name = 'xiao wang ba.';\nname[0]; //'x'\nname[1]; //'i'\nname[4]; //' '\nname[12];//'.'\nname[13];//undefined 超出范围的索引一律返回undefined\n```\n注意:给字符串的索引赋值不会有报错,也不会有任何效果,字符串也不会改变\n\n改变字符串为大写\n\n```JavaScript\nvar name = 'xiao wang ba.';\nname.toUpperCase(); //返回'XIAO WANG BA.'\n```\n\n改变字符串为小写\n\n```JavaScript\nvar name = 'Xiao Wang Ba.';\nname.toLowerCase(); //返回'xiao wang ba.'\n```\n注意:如果字符串是中文,则没效果\n\n返回字符串出现的位置\n\n```JavaScript\nvar name = 'Xiao Wang Ba.';\nname.indexOf('Wang');//返回5\nname.indexOf('wang');//如果没有找到指定的子串,返回-1\n```\n\n获取字符串中的子串\n\n```JavaScript\nvar name = 'xiao wang ba.';\nname.substring(0,4);//从索引0开始到4(不包括4),返回'xiao'\nname.substring(10);//从索引10开始到结束,返回'ba.'\n```\n\n\n### 布尔值\nJavaScript中的布尔值有`true`和`false`两种值,可以直接用`true`或`false`表示,也可以通过布尔运算计算出来\n\n### null和undefined\n`null`表示一个\"空\"的值,同Java中的`null`,Swift中的nil,Python中的None用法类似.\n`undefined`表示\"未定义\".\nJavaScript设计的时候希望用`null`表示一个空的值,用`undefined`表示值未定义,但是大多数情况下我们都应该用`null`.`undefined`仅仅在判断函数参数是否传递的情况下有用\n\n### 数组\n数组是一组按顺序排列的集合,集合的每个值称为元素.JavaScript的数组可以包括任意数据类型.\n创建方法:\n\n```JavaScript\n[1,2,3.14,\"hello\",null,true]; //推荐使用\n```\n另一种创建方法:\n\n```JavaScript\nnew Array(1,2,3);\n```\n\n获取数组的长度\n\n```JavaScript\nvar arr = [1,2,3.14,\"hello\",null,true];\narr.length;//6\n//可以给数组的长度赋值,改变数组的大小\narr.length = 7;//数组改变为[1,2,3.14,\"hello\",null,true,undefined]\narr.length = 4;//数组改变为[1,2,3.14,\"hello\"]\n```\n\n\n数组可以通过索引来访问每个元素的值,也可以改变索引对应元素的值:\n\n```JavaScript\nvar arr = [1,2,3.14,\"hello\",null,true];\narr[0]; //数组第一个元素,值为1\narr[1] = 10;//修改数组第二个元素的值为10\n```\n\n注意:如果通过索引给数组赋值的时候,索引超过了数组长度,数组会被变大\n\n```JavaScript\nvar arr = ['A', 'B', 'C'];\narr[5] = 'F';//arr会变为['A', 'B', 'C', undefined, undefined, 'F'];\n```\n\n获取对应元素的索引\n\n```JavaScript\nvar arr = [10, 20 ,'30', 'xyz'];\narr.indexOf(10);//元素10的索引是0\narr.indexOf(20);//元素20的索引是1\narr.indexOf(30);//元素30的索引是 -1 因为没有找到元素\narr.indexOf('30');//元素'30'的索引是2\n```\n注意：数字`30`和`'30'`是不同的元素\n\n获取数组中的部分元素\n\n```JavaScript\nvar arr =['A','B','C','D','E','F','G'];\narr.slice(0,3);//从索引0开始,到索引3结束,但不包括索引3:['A','B','C']\narr.slice(3);//从索引3开始到结束:['D','E','F','G']\n\n```\n\n注意:`slice()`的起止参数包括开始索引,不包括结束索引\n如果不给`slice()`传递任何参数,它会从头到尾截取所有元素,这个方法可以复制一个`array`\n\n```JavaScript\nvar arr = ['A','B','C','D','E','F','G'];\nvar aCopy = arr.slice();\naCopy; //['A','B','C','D','E','F','G'];\naCopy === arr; //false\nif(aCopy.toString() === arr.toString()) {\n    alert('一样');//数组相同\n}else {\n    alert('不一样');//数组不同\n}\n```\n注意:`JavaScript`比较两个数组是否相同不能直接使用`===` 要比较两个数组是否相同,需要先把数组转换成字符串,然后再比较\n\n在数组末尾添加或删除若干元素,`push()`和`pop()`\n\n```JavaScript\nvar arr = [1 , 2];\narr.push('A','B'); //返回新的长度为4的数组\narr; //[1,2,'A','B']\narr.pop();//pop()返回'B'\narr; // [1,2,'A']\narr.pop();arr.pop();arr.pop(); //连续pop 3次\narr; //[]\narr.pop(); //空数组继续pop不会报错,而是返回undefined\narr;//[]\n```\n\n在数组头部添加或删除若干元素,`unshift()`和`shift()`\n\n```JavaScript\nvar arr =[1,2];\narr.unshift('A','B');//返回新的长度为4的数组\narr;//['A','B',1,2]\narr.shift();//'A'\narr;//['B',1,2]\narr.shift();arr.shift();arr.shift();//连续shift 3次\narr;//[]\narr.shift();//空数组继续shift不会报错,而是返回undefined\narr;//[]\n```\n\n数组排序\n`sort()`可以对当前数组进行排序,它会直接修改当前的数组元素的位置,直接调用时,会按照默认顺序排序\n\n```JavaScript\nvar arr = ['B','C','A'];\narr.sort();\narr;//['A','B','C']\n```\n注意 在函数中可以自定义排序条件\n\n数组反转\n\n`reverse()`可以把数组的元素反转\n\n```JavaScript\nvar arr = ['A','B','C'];\narr.reverse();\narr;//['three','two','one']\n```\n\n数组修改的\"万能方法\",可以从指定索引开始删除若干元素,然后再从该位置添加若干元素\n\n```JavaScript\nvar arr =['Microsoft','Apple','Yahoo','AOL','Excite','Oracle']\narr.splice(2,3,'Google','Facebook');//从索引2开始删除3个元素,然后再添加两个元素,返回删除的元素['Yahoo','AOL','Excite']\narr.splice(2,2);//只删除不添加,返回['Google','Facebook']\narr;//['Microsoft','Apple','Oracle']\narr.splice(2.0,'Google','Facebook');//只添加,不删除,返回[]\narr;//['Microsoft','Apple','Google','Facebook','Oracle']\n```\n把两个数组连接起来,返回一个新的数组\n\n```JavaScript\nvar arr = ['A','B','C'];\nvar added = arr.concat([1,2,3]);\nadded; //['A','B','C',1,2,3]\nARR;//['A','B','C']\n```\n注意 `concat()`方法并没有修改当前数组,而是返回了一个新的数组\n\n而且`concat()`可以接收任意个元素和数组,并把所有数组自动拆开,添加到新的数组中\n\n```JavaScript\nvar arr = ['A','B','C'];\narr.concat(1,2,[3,4]);//['A','B','C',1,2,3,4]\n```\n\n把数组的每个元素都用指定的字符串连接起来,然后返回字符串\n\n```JavaScript\nvar arr = ['A','B','C',1,2,3];\narr.join('-'); //'A-B-C-1-2-3'\n```\n注意如果数组的元素不是字符串,会自动转换成字符串再连接\n\n多维数组,指的是数组中的某个元素又是一个数组\n\n```JavaScript\nvar arr = [[1,2,3],[400,500,600],'-'];\n```\n\n上述`Array`包含3个元素,其中头两个元素本身也是`Array`\n\n\n### 对象\n对象是一组由键-值组成的无序集合:\n\n```JavaScript\nvar person = {\n\tname: 'XiaoWang',\n\ttags: ['js', 'web', 'mobile'],\n\tage: 12,\n\tcity: 'shanghai',\n\thasCar: false,\n\tzipcode: null\n};\n```\n\nJavaScript用一个`{...}` 表示一个对象,键值对以`xxx: xxx`形式申明,用`,`隔开,最后一个键值对不需要加\n\nJavaScript对象的键都是字符串类型,值可以是任意数据类型,每个键都是对象的一个属性,获取属性的方法:\n\n```JavaScript\nperson.name; // 'XiaoWang'\nperson.zipcode; // null\n```\n注:`var person` 是JavaScript的一个变量,`person`是变量名,变量名是大小写英文,数字,`$`和`_`的组合,且不能用数字开头,也不能使用JavaScript中的关键字\n\n\n#### strict模式\n蛋疼的布兰登在设计JavaScript的时候为了赶工期,并没有强制使用`var`声明变量,如果一个变量没有通过`var`声明就被使用,这个变量就会被自动声明为全局变量\n\n```JavaScript\ni = 10; //i就是一个全局变量\n```\n\n如果在不同的JavaScript文件中,你都使用了同样名字的变量,而且都没有用`var`声明,那么你就麻烦了.\n\n因此,为了给布兰登填坑,ECMA在后续的规范中推出了strict模式,在strict模式下运行JavaScript代码不允许使用没有`var`声明的变量,如果有那么就给你报错\n\n启动strict模式的方法很简单,就是在JavaScript代码的第一行写上:\n\n```JavaScript\n'use strict';\n```\n注:如果你用的是老爷机,你的浏览器太老了,他会自以为是的把上面那就话当做一个字符串语句执行,如果这样的话还是换个最新版的浏览器吧\n\n#### Advanced Operaters (高级运算符)\n取余运算 `x = y % 2`\n累加运算 `a = 5`\n\t\t`c = a++`/Users/YaoWanXin/Desktop/app.html resulets : c = 5 and a = 6\n\t\t`c = ++a` resulets : c = 6 and a = 6\n累减运算 `a = 5`\n\t\t`c = a--` resulets : c = 5 and a = 4\n\t\t`c = --a` resulets : c = 4 and a = 4\n","source":"_posts/JavaScript.md","raw":"---\ntitle: Learn JavaScript\ndate: 2017-01-11 11:10:12\ntags: JavaScript\n---\n\n## Equality (相等比较符) ##\n\n```Javascript\nvar foo = 42;\nvar bar = 42;\nvar baz = \"42\";\nvar qux = \"life\";\n```\n定义了四个变量在Javascript中 `==`是用来比较两个值但是不会判断类型故 `foo == baz`返回的值是`true`\n\n使用`==`比较的时候编译器会先把类型转换成相同的类型,再去比较\n\n因此在JavaScript 要是比较不同类型的两个值可以使用`===`这样会先判断类型,如果类型不同就会返回`false`\n\n所以推荐使用`===`比较\n\n<!----- more ----->\n\n注意: 1.`NaN`是个特殊的Number,他与所有其他值都不相等,包括它自己\n```JavaScript\nNaN === NaN ; // false\n```\n唯一能判断NaN的方法是通过isNaN()函数:\n```JavaScript\nisNaN(NaN); // true\n```\n\n2.浮点数的比较:\n```JavaScript\n1/3 === (1 - 2 / 3); //false\n```\n这个结果是正确的,出现这个结果这是因为浮点数在运算过程中会产生误差,计算机无法精确的表示无限小数,所以要比较两个浮点数是否相等,只能计算他们之差的绝对值,看是否小于某个阈值:\n\n```JavaScript\nMath.abs(1/3 - (1 - 2 / 3)) < 0.0000001; //true\n```\n\n\n## Types ##\n\n### numbers\n\nJavaScript中只有一种数字类型 – 64-bit float point,类似于Java中的double类型,所以在JavaScript中1和1.0是相同的值\nnumber可以直接做四则运算，规则和数学一致\n\n### 字符串\n\n字符串是以'单引号'或\"双引号\"括起来的文本,如`'abc'` `\"xyz\"`\n\n注意`' '`和`\" \"`并不是字符串的一部分\n\n如果字符串中包含`'` 就使用`\"\"`把文本包起来,如果字符串中包含`\"` 就需要使用转义字符了`\\`\n\n在多行字符串中换行使用的是`\\n` 但是如果行数太多`\\n`需要写多个,不方便,在JavaScript中又增加了一种表示方法(ES6),就是将多行文本用\\`... \\`括起来,就是键盘上tab键上边的那个按键.\n\n#### 模板字符串\n多个字符串可以使用`+`连接起来.字符串也可以是变量如:\n\n```JavaScript\nvar name = '小王吧';\nvar age = '100';\nvar message = '你好,' + name + ',你现在' + age + '岁';\n```\n同样,如果要连接的变量有很多,使用`+`就会很不方便,在JavaScript中增加了一种模板字符串的表示(ES6):\n\n```JavaScript\nvar name = '小王吧';\nvar age = '101';\nvar message = `${name},你今年${age}岁,是不是?`\n```\n注意:新的表示方法使用的是\\` ,就是新的多行文本使用的符号,就是键盘上`tab`按键上边的那个按键,不能使用`\"\"或''`,那样无法转换变量\n\n#### 字符串操作 ####\n获取字符的长度\n\n```JavaScript\nvar name = 'xiao wang ba.';\nalert(name.length); //13\n```\n\n获取指定位置字符,可以把字符串看成是特殊的数组,对字符串进行下标操作,从0索引开始\n\n```JavaScript\nvar name = 'xiao wang ba.';\nname[0]; //'x'\nname[1]; //'i'\nname[4]; //' '\nname[12];//'.'\nname[13];//undefined 超出范围的索引一律返回undefined\n```\n注意:给字符串的索引赋值不会有报错,也不会有任何效果,字符串也不会改变\n\n改变字符串为大写\n\n```JavaScript\nvar name = 'xiao wang ba.';\nname.toUpperCase(); //返回'XIAO WANG BA.'\n```\n\n改变字符串为小写\n\n```JavaScript\nvar name = 'Xiao Wang Ba.';\nname.toLowerCase(); //返回'xiao wang ba.'\n```\n注意:如果字符串是中文,则没效果\n\n返回字符串出现的位置\n\n```JavaScript\nvar name = 'Xiao Wang Ba.';\nname.indexOf('Wang');//返回5\nname.indexOf('wang');//如果没有找到指定的子串,返回-1\n```\n\n获取字符串中的子串\n\n```JavaScript\nvar name = 'xiao wang ba.';\nname.substring(0,4);//从索引0开始到4(不包括4),返回'xiao'\nname.substring(10);//从索引10开始到结束,返回'ba.'\n```\n\n\n### 布尔值\nJavaScript中的布尔值有`true`和`false`两种值,可以直接用`true`或`false`表示,也可以通过布尔运算计算出来\n\n### null和undefined\n`null`表示一个\"空\"的值,同Java中的`null`,Swift中的nil,Python中的None用法类似.\n`undefined`表示\"未定义\".\nJavaScript设计的时候希望用`null`表示一个空的值,用`undefined`表示值未定义,但是大多数情况下我们都应该用`null`.`undefined`仅仅在判断函数参数是否传递的情况下有用\n\n### 数组\n数组是一组按顺序排列的集合,集合的每个值称为元素.JavaScript的数组可以包括任意数据类型.\n创建方法:\n\n```JavaScript\n[1,2,3.14,\"hello\",null,true]; //推荐使用\n```\n另一种创建方法:\n\n```JavaScript\nnew Array(1,2,3);\n```\n\n获取数组的长度\n\n```JavaScript\nvar arr = [1,2,3.14,\"hello\",null,true];\narr.length;//6\n//可以给数组的长度赋值,改变数组的大小\narr.length = 7;//数组改变为[1,2,3.14,\"hello\",null,true,undefined]\narr.length = 4;//数组改变为[1,2,3.14,\"hello\"]\n```\n\n\n数组可以通过索引来访问每个元素的值,也可以改变索引对应元素的值:\n\n```JavaScript\nvar arr = [1,2,3.14,\"hello\",null,true];\narr[0]; //数组第一个元素,值为1\narr[1] = 10;//修改数组第二个元素的值为10\n```\n\n注意:如果通过索引给数组赋值的时候,索引超过了数组长度,数组会被变大\n\n```JavaScript\nvar arr = ['A', 'B', 'C'];\narr[5] = 'F';//arr会变为['A', 'B', 'C', undefined, undefined, 'F'];\n```\n\n获取对应元素的索引\n\n```JavaScript\nvar arr = [10, 20 ,'30', 'xyz'];\narr.indexOf(10);//元素10的索引是0\narr.indexOf(20);//元素20的索引是1\narr.indexOf(30);//元素30的索引是 -1 因为没有找到元素\narr.indexOf('30');//元素'30'的索引是2\n```\n注意：数字`30`和`'30'`是不同的元素\n\n获取数组中的部分元素\n\n```JavaScript\nvar arr =['A','B','C','D','E','F','G'];\narr.slice(0,3);//从索引0开始,到索引3结束,但不包括索引3:['A','B','C']\narr.slice(3);//从索引3开始到结束:['D','E','F','G']\n\n```\n\n注意:`slice()`的起止参数包括开始索引,不包括结束索引\n如果不给`slice()`传递任何参数,它会从头到尾截取所有元素,这个方法可以复制一个`array`\n\n```JavaScript\nvar arr = ['A','B','C','D','E','F','G'];\nvar aCopy = arr.slice();\naCopy; //['A','B','C','D','E','F','G'];\naCopy === arr; //false\nif(aCopy.toString() === arr.toString()) {\n    alert('一样');//数组相同\n}else {\n    alert('不一样');//数组不同\n}\n```\n注意:`JavaScript`比较两个数组是否相同不能直接使用`===` 要比较两个数组是否相同,需要先把数组转换成字符串,然后再比较\n\n在数组末尾添加或删除若干元素,`push()`和`pop()`\n\n```JavaScript\nvar arr = [1 , 2];\narr.push('A','B'); //返回新的长度为4的数组\narr; //[1,2,'A','B']\narr.pop();//pop()返回'B'\narr; // [1,2,'A']\narr.pop();arr.pop();arr.pop(); //连续pop 3次\narr; //[]\narr.pop(); //空数组继续pop不会报错,而是返回undefined\narr;//[]\n```\n\n在数组头部添加或删除若干元素,`unshift()`和`shift()`\n\n```JavaScript\nvar arr =[1,2];\narr.unshift('A','B');//返回新的长度为4的数组\narr;//['A','B',1,2]\narr.shift();//'A'\narr;//['B',1,2]\narr.shift();arr.shift();arr.shift();//连续shift 3次\narr;//[]\narr.shift();//空数组继续shift不会报错,而是返回undefined\narr;//[]\n```\n\n数组排序\n`sort()`可以对当前数组进行排序,它会直接修改当前的数组元素的位置,直接调用时,会按照默认顺序排序\n\n```JavaScript\nvar arr = ['B','C','A'];\narr.sort();\narr;//['A','B','C']\n```\n注意 在函数中可以自定义排序条件\n\n数组反转\n\n`reverse()`可以把数组的元素反转\n\n```JavaScript\nvar arr = ['A','B','C'];\narr.reverse();\narr;//['three','two','one']\n```\n\n数组修改的\"万能方法\",可以从指定索引开始删除若干元素,然后再从该位置添加若干元素\n\n```JavaScript\nvar arr =['Microsoft','Apple','Yahoo','AOL','Excite','Oracle']\narr.splice(2,3,'Google','Facebook');//从索引2开始删除3个元素,然后再添加两个元素,返回删除的元素['Yahoo','AOL','Excite']\narr.splice(2,2);//只删除不添加,返回['Google','Facebook']\narr;//['Microsoft','Apple','Oracle']\narr.splice(2.0,'Google','Facebook');//只添加,不删除,返回[]\narr;//['Microsoft','Apple','Google','Facebook','Oracle']\n```\n把两个数组连接起来,返回一个新的数组\n\n```JavaScript\nvar arr = ['A','B','C'];\nvar added = arr.concat([1,2,3]);\nadded; //['A','B','C',1,2,3]\nARR;//['A','B','C']\n```\n注意 `concat()`方法并没有修改当前数组,而是返回了一个新的数组\n\n而且`concat()`可以接收任意个元素和数组,并把所有数组自动拆开,添加到新的数组中\n\n```JavaScript\nvar arr = ['A','B','C'];\narr.concat(1,2,[3,4]);//['A','B','C',1,2,3,4]\n```\n\n把数组的每个元素都用指定的字符串连接起来,然后返回字符串\n\n```JavaScript\nvar arr = ['A','B','C',1,2,3];\narr.join('-'); //'A-B-C-1-2-3'\n```\n注意如果数组的元素不是字符串,会自动转换成字符串再连接\n\n多维数组,指的是数组中的某个元素又是一个数组\n\n```JavaScript\nvar arr = [[1,2,3],[400,500,600],'-'];\n```\n\n上述`Array`包含3个元素,其中头两个元素本身也是`Array`\n\n\n### 对象\n对象是一组由键-值组成的无序集合:\n\n```JavaScript\nvar person = {\n\tname: 'XiaoWang',\n\ttags: ['js', 'web', 'mobile'],\n\tage: 12,\n\tcity: 'shanghai',\n\thasCar: false,\n\tzipcode: null\n};\n```\n\nJavaScript用一个`{...}` 表示一个对象,键值对以`xxx: xxx`形式申明,用`,`隔开,最后一个键值对不需要加\n\nJavaScript对象的键都是字符串类型,值可以是任意数据类型,每个键都是对象的一个属性,获取属性的方法:\n\n```JavaScript\nperson.name; // 'XiaoWang'\nperson.zipcode; // null\n```\n注:`var person` 是JavaScript的一个变量,`person`是变量名,变量名是大小写英文,数字,`$`和`_`的组合,且不能用数字开头,也不能使用JavaScript中的关键字\n\n\n#### strict模式\n蛋疼的布兰登在设计JavaScript的时候为了赶工期,并没有强制使用`var`声明变量,如果一个变量没有通过`var`声明就被使用,这个变量就会被自动声明为全局变量\n\n```JavaScript\ni = 10; //i就是一个全局变量\n```\n\n如果在不同的JavaScript文件中,你都使用了同样名字的变量,而且都没有用`var`声明,那么你就麻烦了.\n\n因此,为了给布兰登填坑,ECMA在后续的规范中推出了strict模式,在strict模式下运行JavaScript代码不允许使用没有`var`声明的变量,如果有那么就给你报错\n\n启动strict模式的方法很简单,就是在JavaScript代码的第一行写上:\n\n```JavaScript\n'use strict';\n```\n注:如果你用的是老爷机,你的浏览器太老了,他会自以为是的把上面那就话当做一个字符串语句执行,如果这样的话还是换个最新版的浏览器吧\n\n#### Advanced Operaters (高级运算符)\n取余运算 `x = y % 2`\n累加运算 `a = 5`\n\t\t`c = a++`/Users/YaoWanXin/Desktop/app.html resulets : c = 5 and a = 6\n\t\t`c = ++a` resulets : c = 6 and a = 6\n累减运算 `a = 5`\n\t\t`c = a--` resulets : c = 5 and a = 4\n\t\t`c = --a` resulets : c = 4 and a = 4\n","slug":"JavaScript","published":1,"updated":"2017-04-06T12:26:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnfk7vfw0002zb7ump629kxp","content":"<h2 id=\"Equality-相等比较符\"><a href=\"#Equality-相等比较符\" class=\"headerlink\" title=\"Equality (相等比较符)\"></a>Equality (相等比较符)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">42</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"number\">42</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> baz = <span class=\"string\">\"42\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> qux = <span class=\"string\">\"life\"</span>;</div></pre></td></tr></table></figure>\n<p>定义了四个变量在Javascript中 <code>==</code>是用来比较两个值但是不会判断类型故 <code>foo == baz</code>返回的值是<code>true</code></p>\n<p>使用<code>==</code>比较的时候编译器会先把类型转换成相同的类型,再去比较</p>\n<p>因此在JavaScript 要是比较不同类型的两个值可以使用<code>===</code>这样会先判断类型,如果类型不同就会返回<code>false</code></p>\n<p>所以推荐使用<code>===</code>比较</p>\n<a id=\"more\"></a>\n<p>注意: 1.<code>NaN</code>是个特殊的Number,他与所有其他值都不相等,包括它自己<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span> ; <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<p>唯一能判断NaN的方法是通过isNaN()函数:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>2.浮点数的比较:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>/<span class=\"number\">3</span> === (<span class=\"number\">1</span> - <span class=\"number\">2</span> / <span class=\"number\">3</span>); <span class=\"comment\">//false</span></div></pre></td></tr></table></figure></p>\n<p>这个结果是正确的,出现这个结果这是因为浮点数在运算过程中会产生误差,计算机无法精确的表示无限小数,所以要比较两个浮点数是否相等,只能计算他们之差的绝对值,看是否小于某个阈值:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Math</span>.abs(<span class=\"number\">1</span>/<span class=\"number\">3</span> - (<span class=\"number\">1</span> - <span class=\"number\">2</span> / <span class=\"number\">3</span>)) &lt; <span class=\"number\">0.0000001</span>; <span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<h2 id=\"Types\"><a href=\"#Types\" class=\"headerlink\" title=\"Types\"></a>Types</h2><h3 id=\"numbers\"><a href=\"#numbers\" class=\"headerlink\" title=\"numbers\"></a>numbers</h3><p>JavaScript中只有一种数字类型 – 64-bit float point,类似于Java中的double类型,所以在JavaScript中1和1.0是相同的值<br>number可以直接做四则运算，规则和数学一致</p>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>字符串是以’单引号’或”双引号”括起来的文本,如<code>&#39;abc&#39;</code> <code>&quot;xyz&quot;</code></p>\n<p>注意<code>&#39; &#39;</code>和<code>&quot; &quot;</code>并不是字符串的一部分</p>\n<p>如果字符串中包含<code>&#39;</code> 就使用<code>&quot;&quot;</code>把文本包起来,如果字符串中包含<code>&quot;</code> 就需要使用转义字符了<code>\\</code></p>\n<p>在多行字符串中换行使用的是<code>\\n</code> 但是如果行数太多<code>\\n</code>需要写多个,不方便,在JavaScript中又增加了一种表示方法(ES6),就是将多行文本用`… `括起来,就是键盘上tab键上边的那个按键.</p>\n<h4 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h4><p>多个字符串可以使用<code>+</code>连接起来.字符串也可以是变量如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'小王吧'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"string\">'100'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">'你好,'</span> + name + <span class=\"string\">',你现在'</span> + age + <span class=\"string\">'岁'</span>;</div></pre></td></tr></table></figure>\n<p>同样,如果要连接的变量有很多,使用<code>+</code>就会很不方便,在JavaScript中增加了一种模板字符串的表示(ES6):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'小王吧'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"string\">'101'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>,你今年<span class=\"subst\">$&#123;age&#125;</span>岁,是不是?`</span></div></pre></td></tr></table></figure>\n<p>注意:新的表示方法使用的是` ,就是新的多行文本使用的符号,就是键盘上<code>tab</code>按键上边的那个按键,不能使用<code>&quot;&quot;或&#39;&#39;</code>,那样无法转换变量</p>\n<h4 id=\"字符串操作\"><a href=\"#字符串操作\" class=\"headerlink\" title=\"字符串操作\"></a>字符串操作</h4><p>获取字符的长度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'xiao wang ba.'</span>;</div><div class=\"line\">alert(name.length); <span class=\"comment\">//13</span></div></pre></td></tr></table></figure>\n<p>获取指定位置字符,可以把字符串看成是特殊的数组,对字符串进行下标操作,从0索引开始</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'xiao wang ba.'</span>;</div><div class=\"line\">name[<span class=\"number\">0</span>]; <span class=\"comment\">//'x'</span></div><div class=\"line\">name[<span class=\"number\">1</span>]; <span class=\"comment\">//'i'</span></div><div class=\"line\">name[<span class=\"number\">4</span>]; <span class=\"comment\">//' '</span></div><div class=\"line\">name[<span class=\"number\">12</span>];<span class=\"comment\">//'.'</span></div><div class=\"line\">name[<span class=\"number\">13</span>];<span class=\"comment\">//undefined 超出范围的索引一律返回undefined</span></div></pre></td></tr></table></figure>\n<p>注意:给字符串的索引赋值不会有报错,也不会有任何效果,字符串也不会改变</p>\n<p>改变字符串为大写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'xiao wang ba.'</span>;</div><div class=\"line\">name.toUpperCase(); <span class=\"comment\">//返回'XIAO WANG BA.'</span></div></pre></td></tr></table></figure>\n<p>改变字符串为小写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'Xiao Wang Ba.'</span>;</div><div class=\"line\">name.toLowerCase(); <span class=\"comment\">//返回'xiao wang ba.'</span></div></pre></td></tr></table></figure>\n<p>注意:如果字符串是中文,则没效果</p>\n<p>返回字符串出现的位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'Xiao Wang Ba.'</span>;</div><div class=\"line\">name.indexOf(<span class=\"string\">'Wang'</span>);<span class=\"comment\">//返回5</span></div><div class=\"line\">name.indexOf(<span class=\"string\">'wang'</span>);<span class=\"comment\">//如果没有找到指定的子串,返回-1</span></div></pre></td></tr></table></figure>\n<p>获取字符串中的子串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'xiao wang ba.'</span>;</div><div class=\"line\">name.substring(<span class=\"number\">0</span>,<span class=\"number\">4</span>);<span class=\"comment\">//从索引0开始到4(不包括4),返回'xiao'</span></div><div class=\"line\">name.substring(<span class=\"number\">10</span>);<span class=\"comment\">//从索引10开始到结束,返回'ba.'</span></div></pre></td></tr></table></figure>\n<h3 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h3><p>JavaScript中的布尔值有<code>true</code>和<code>false</code>两种值,可以直接用<code>true</code>或<code>false</code>表示,也可以通过布尔运算计算出来</p>\n<h3 id=\"null和undefined\"><a href=\"#null和undefined\" class=\"headerlink\" title=\"null和undefined\"></a>null和undefined</h3><p><code>null</code>表示一个”空”的值,同Java中的<code>null</code>,Swift中的nil,Python中的None用法类似.<br><code>undefined</code>表示”未定义”.<br>JavaScript设计的时候希望用<code>null</code>表示一个空的值,用<code>undefined</code>表示值未定义,但是大多数情况下我们都应该用<code>null</code>.<code>undefined</code>仅仅在判断函数参数是否传递的情况下有用</p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>数组是一组按顺序排列的集合,集合的每个值称为元素.JavaScript的数组可以包括任意数据类型.<br>创建方法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3.14</span>,<span class=\"string\">\"hello\"</span>,<span class=\"literal\">null</span>,<span class=\"literal\">true</span>]; <span class=\"comment\">//推荐使用</span></div></pre></td></tr></table></figure>\n<p>另一种创建方法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n<p>获取数组的长度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3.14</span>,<span class=\"string\">\"hello\"</span>,<span class=\"literal\">null</span>,<span class=\"literal\">true</span>];</div><div class=\"line\">arr.length;<span class=\"comment\">//6</span></div><div class=\"line\"><span class=\"comment\">//可以给数组的长度赋值,改变数组的大小</span></div><div class=\"line\">arr.length = <span class=\"number\">7</span>;<span class=\"comment\">//数组改变为[1,2,3.14,\"hello\",null,true,undefined]</span></div><div class=\"line\">arr.length = <span class=\"number\">4</span>;<span class=\"comment\">//数组改变为[1,2,3.14,\"hello\"]</span></div></pre></td></tr></table></figure>\n<p>数组可以通过索引来访问每个元素的值,也可以改变索引对应元素的值:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3.14</span>,<span class=\"string\">\"hello\"</span>,<span class=\"literal\">null</span>,<span class=\"literal\">true</span>];</div><div class=\"line\">arr[<span class=\"number\">0</span>]; <span class=\"comment\">//数组第一个元素,值为1</span></div><div class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"number\">10</span>;<span class=\"comment\">//修改数组第二个元素的值为10</span></div></pre></td></tr></table></figure>\n<p>注意:如果通过索引给数组赋值的时候,索引超过了数组长度,数组会被变大</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\">arr[<span class=\"number\">5</span>] = <span class=\"string\">'F'</span>;<span class=\"comment\">//arr会变为['A', 'B', 'C', undefined, undefined, 'F'];</span></div></pre></td></tr></table></figure>\n<p>获取对应元素的索引</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">20</span> ,<span class=\"string\">'30'</span>, <span class=\"string\">'xyz'</span>];</div><div class=\"line\">arr.indexOf(<span class=\"number\">10</span>);<span class=\"comment\">//元素10的索引是0</span></div><div class=\"line\">arr.indexOf(<span class=\"number\">20</span>);<span class=\"comment\">//元素20的索引是1</span></div><div class=\"line\">arr.indexOf(<span class=\"number\">30</span>);<span class=\"comment\">//元素30的索引是 -1 因为没有找到元素</span></div><div class=\"line\">arr.indexOf(<span class=\"string\">'30'</span>);<span class=\"comment\">//元素'30'的索引是2</span></div></pre></td></tr></table></figure>\n<p>注意：数字<code>30</code>和<code>&#39;30&#39;</code>是不同的元素</p>\n<p>获取数组中的部分元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr =[<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>,<span class=\"string\">'D'</span>,<span class=\"string\">'E'</span>,<span class=\"string\">'F'</span>,<span class=\"string\">'G'</span>];</div><div class=\"line\">arr.slice(<span class=\"number\">0</span>,<span class=\"number\">3</span>);<span class=\"comment\">//从索引0开始,到索引3结束,但不包括索引3:['A','B','C']</span></div><div class=\"line\">arr.slice(<span class=\"number\">3</span>);<span class=\"comment\">//从索引3开始到结束:['D','E','F','G']</span></div></pre></td></tr></table></figure>\n<p>注意:<code>slice()</code>的起止参数包括开始索引,不包括结束索引<br>如果不给<code>slice()</code>传递任何参数,它会从头到尾截取所有元素,这个方法可以复制一个<code>array</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>,<span class=\"string\">'D'</span>,<span class=\"string\">'E'</span>,<span class=\"string\">'F'</span>,<span class=\"string\">'G'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> aCopy = arr.slice();</div><div class=\"line\">aCopy; <span class=\"comment\">//['A','B','C','D','E','F','G'];</span></div><div class=\"line\">aCopy === arr; <span class=\"comment\">//false</span></div><div class=\"line\"><span class=\"keyword\">if</span>(aCopy.toString() === arr.toString()) &#123;</div><div class=\"line\">    alert(<span class=\"string\">'一样'</span>);<span class=\"comment\">//数组相同</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    alert(<span class=\"string\">'不一样'</span>);<span class=\"comment\">//数组不同</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意:<code>JavaScript</code>比较两个数组是否相同不能直接使用<code>===</code> 要比较两个数组是否相同,需要先把数组转换成字符串,然后再比较</p>\n<p>在数组末尾添加或删除若干元素,<code>push()</code>和<code>pop()</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span> , <span class=\"number\">2</span>];</div><div class=\"line\">arr.push(<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>); <span class=\"comment\">//返回新的长度为4的数组</span></div><div class=\"line\">arr; <span class=\"comment\">//[1,2,'A','B']</span></div><div class=\"line\">arr.pop();<span class=\"comment\">//pop()返回'B'</span></div><div class=\"line\">arr; <span class=\"comment\">// [1,2,'A']</span></div><div class=\"line\">arr.pop();arr.pop();arr.pop(); <span class=\"comment\">//连续pop 3次</span></div><div class=\"line\">arr; <span class=\"comment\">//[]</span></div><div class=\"line\">arr.pop(); <span class=\"comment\">//空数组继续pop不会报错,而是返回undefined</span></div><div class=\"line\">arr;<span class=\"comment\">//[]</span></div></pre></td></tr></table></figure>\n<p>在数组头部添加或删除若干元素,<code>unshift()</code>和<code>shift()</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr =[<span class=\"number\">1</span>,<span class=\"number\">2</span>];</div><div class=\"line\">arr.unshift(<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>);<span class=\"comment\">//返回新的长度为4的数组</span></div><div class=\"line\">arr;<span class=\"comment\">//['A','B',1,2]</span></div><div class=\"line\">arr.shift();<span class=\"comment\">//'A'</span></div><div class=\"line\">arr;<span class=\"comment\">//['B',1,2]</span></div><div class=\"line\">arr.shift();arr.shift();arr.shift();<span class=\"comment\">//连续shift 3次</span></div><div class=\"line\">arr;<span class=\"comment\">//[]</span></div><div class=\"line\">arr.shift();<span class=\"comment\">//空数组继续shift不会报错,而是返回undefined</span></div><div class=\"line\">arr;<span class=\"comment\">//[]</span></div></pre></td></tr></table></figure>\n<p>数组排序<br><code>sort()</code>可以对当前数组进行排序,它会直接修改当前的数组元素的位置,直接调用时,会按照默认顺序排序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>,<span class=\"string\">'A'</span>];</div><div class=\"line\">arr.sort();</div><div class=\"line\">arr;<span class=\"comment\">//['A','B','C']</span></div></pre></td></tr></table></figure>\n<p>注意 在函数中可以自定义排序条件</p>\n<p>数组反转</p>\n<p><code>reverse()</code>可以把数组的元素反转</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>];</div><div class=\"line\">arr.reverse();</div><div class=\"line\">arr;<span class=\"comment\">//['three','two','one']</span></div></pre></td></tr></table></figure>\n<p>数组修改的”万能方法”,可以从指定索引开始删除若干元素,然后再从该位置添加若干元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr =[<span class=\"string\">'Microsoft'</span>,<span class=\"string\">'Apple'</span>,<span class=\"string\">'Yahoo'</span>,<span class=\"string\">'AOL'</span>,<span class=\"string\">'Excite'</span>,<span class=\"string\">'Oracle'</span>]</div><div class=\"line\">arr.splice(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">'Google'</span>,<span class=\"string\">'Facebook'</span>);<span class=\"comment\">//从索引2开始删除3个元素,然后再添加两个元素,返回删除的元素['Yahoo','AOL','Excite']</span></div><div class=\"line\">arr.splice(<span class=\"number\">2</span>,<span class=\"number\">2</span>);<span class=\"comment\">//只删除不添加,返回['Google','Facebook']</span></div><div class=\"line\">arr;<span class=\"comment\">//['Microsoft','Apple','Oracle']</span></div><div class=\"line\">arr.splice(<span class=\"number\">2.0</span>,<span class=\"string\">'Google'</span>,<span class=\"string\">'Facebook'</span>);<span class=\"comment\">//只添加,不删除,返回[]</span></div><div class=\"line\">arr;<span class=\"comment\">//['Microsoft','Apple','Google','Facebook','Oracle']</span></div></pre></td></tr></table></figure>\n<p>把两个数组连接起来,返回一个新的数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> added = arr.concat([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]);</div><div class=\"line\">added; <span class=\"comment\">//['A','B','C',1,2,3]</span></div><div class=\"line\">ARR;<span class=\"comment\">//['A','B','C']</span></div></pre></td></tr></table></figure>\n<p>注意 <code>concat()</code>方法并没有修改当前数组,而是返回了一个新的数组</p>\n<p>而且<code>concat()</code>可以接收任意个元素和数组,并把所有数组自动拆开,添加到新的数组中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>];</div><div class=\"line\">arr.concat(<span class=\"number\">1</span>,<span class=\"number\">2</span>,[<span class=\"number\">3</span>,<span class=\"number\">4</span>]);<span class=\"comment\">//['A','B','C',1,2,3,4]</span></div></pre></td></tr></table></figure>\n<p>把数组的每个元素都用指定的字符串连接起来,然后返回字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</div><div class=\"line\">arr.join(<span class=\"string\">'-'</span>); <span class=\"comment\">//'A-B-C-1-2-3'</span></div></pre></td></tr></table></figure>\n<p>注意如果数组的元素不是字符串,会自动转换成字符串再连接</p>\n<p>多维数组,指的是数组中的某个元素又是一个数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">400</span>,<span class=\"number\">500</span>,<span class=\"number\">600</span>],<span class=\"string\">'-'</span>];</div></pre></td></tr></table></figure>\n<p>上述<code>Array</code>包含3个元素,其中头两个元素本身也是<code>Array</code></p>\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p>对象是一组由键-值组成的无序集合:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">'XiaoWang'</span>,</div><div class=\"line\">\t<span class=\"attr\">tags</span>: [<span class=\"string\">'js'</span>, <span class=\"string\">'web'</span>, <span class=\"string\">'mobile'</span>],</div><div class=\"line\">\t<span class=\"attr\">age</span>: <span class=\"number\">12</span>,</div><div class=\"line\">\t<span class=\"attr\">city</span>: <span class=\"string\">'shanghai'</span>,</div><div class=\"line\">\t<span class=\"attr\">hasCar</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">\t<span class=\"attr\">zipcode</span>: <span class=\"literal\">null</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>JavaScript用一个<code>{...}</code> 表示一个对象,键值对以<code>xxx: xxx</code>形式申明,用<code>,</code>隔开,最后一个键值对不需要加</p>\n<p>JavaScript对象的键都是字符串类型,值可以是任意数据类型,每个键都是对象的一个属性,获取属性的方法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">person.name; <span class=\"comment\">// 'XiaoWang'</span></div><div class=\"line\">person.zipcode; <span class=\"comment\">// null</span></div></pre></td></tr></table></figure>\n<p>注:<code>var person</code> 是JavaScript的一个变量,<code>person</code>是变量名,变量名是大小写英文,数字,<code>$</code>和<code>_</code>的组合,且不能用数字开头,也不能使用JavaScript中的关键字</p>\n<h4 id=\"strict模式\"><a href=\"#strict模式\" class=\"headerlink\" title=\"strict模式\"></a>strict模式</h4><p>蛋疼的布兰登在设计JavaScript的时候为了赶工期,并没有强制使用<code>var</code>声明变量,如果一个变量没有通过<code>var</code>声明就被使用,这个变量就会被自动声明为全局变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">i = <span class=\"number\">10</span>; <span class=\"comment\">//i就是一个全局变量</span></div></pre></td></tr></table></figure>\n<p>如果在不同的JavaScript文件中,你都使用了同样名字的变量,而且都没有用<code>var</code>声明,那么你就麻烦了.</p>\n<p>因此,为了给布兰登填坑,ECMA在后续的规范中推出了strict模式,在strict模式下运行JavaScript代码不允许使用没有<code>var</code>声明的变量,如果有那么就给你报错</p>\n<p>启动strict模式的方法很简单,就是在JavaScript代码的第一行写上:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div></pre></td></tr></table></figure>\n<p>注:如果你用的是老爷机,你的浏览器太老了,他会自以为是的把上面那就话当做一个字符串语句执行,如果这样的话还是换个最新版的浏览器吧</p>\n<h4 id=\"Advanced-Operaters-高级运算符\"><a href=\"#Advanced-Operaters-高级运算符\" class=\"headerlink\" title=\"Advanced Operaters (高级运算符)\"></a>Advanced Operaters (高级运算符)</h4><p>取余运算 <code>x = y % 2</code><br>累加运算 <code>a = 5</code><br>        <code>c = a++</code>/Users/YaoWanXin/Desktop/app.html resulets : c = 5 and a = 6<br>        <code>c = ++a</code> resulets : c = 6 and a = 6<br>累减运算 <code>a = 5</code><br>        <code>c = a--</code> resulets : c = 5 and a = 4<br>        <code>c = --a</code> resulets : c = 4 and a = 4</p>\n","excerpt":"<h2 id=\"Equality-相等比较符\"><a href=\"#Equality-相等比较符\" class=\"headerlink\" title=\"Equality (相等比较符)\"></a>Equality (相等比较符)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">42</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"number\">42</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> baz = <span class=\"string\">\"42\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> qux = <span class=\"string\">\"life\"</span>;</div></pre></td></tr></table></figure>\n<p>定义了四个变量在Javascript中 <code>==</code>是用来比较两个值但是不会判断类型故 <code>foo == baz</code>返回的值是<code>true</code></p>\n<p>使用<code>==</code>比较的时候编译器会先把类型转换成相同的类型,再去比较</p>\n<p>因此在JavaScript 要是比较不同类型的两个值可以使用<code>===</code>这样会先判断类型,如果类型不同就会返回<code>false</code></p>\n<p>所以推荐使用<code>===</code>比较</p>","more":"<p>注意: 1.<code>NaN</code>是个特殊的Number,他与所有其他值都不相等,包括它自己<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span> ; <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<p>唯一能判断NaN的方法是通过isNaN()函数:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>2.浮点数的比较:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>/<span class=\"number\">3</span> === (<span class=\"number\">1</span> - <span class=\"number\">2</span> / <span class=\"number\">3</span>); <span class=\"comment\">//false</span></div></pre></td></tr></table></figure></p>\n<p>这个结果是正确的,出现这个结果这是因为浮点数在运算过程中会产生误差,计算机无法精确的表示无限小数,所以要比较两个浮点数是否相等,只能计算他们之差的绝对值,看是否小于某个阈值:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Math</span>.abs(<span class=\"number\">1</span>/<span class=\"number\">3</span> - (<span class=\"number\">1</span> - <span class=\"number\">2</span> / <span class=\"number\">3</span>)) &lt; <span class=\"number\">0.0000001</span>; <span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<h2 id=\"Types\"><a href=\"#Types\" class=\"headerlink\" title=\"Types\"></a>Types</h2><h3 id=\"numbers\"><a href=\"#numbers\" class=\"headerlink\" title=\"numbers\"></a>numbers</h3><p>JavaScript中只有一种数字类型 – 64-bit float point,类似于Java中的double类型,所以在JavaScript中1和1.0是相同的值<br>number可以直接做四则运算，规则和数学一致</p>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>字符串是以’单引号’或”双引号”括起来的文本,如<code>&#39;abc&#39;</code> <code>&quot;xyz&quot;</code></p>\n<p>注意<code>&#39; &#39;</code>和<code>&quot; &quot;</code>并不是字符串的一部分</p>\n<p>如果字符串中包含<code>&#39;</code> 就使用<code>&quot;&quot;</code>把文本包起来,如果字符串中包含<code>&quot;</code> 就需要使用转义字符了<code>\\</code></p>\n<p>在多行字符串中换行使用的是<code>\\n</code> 但是如果行数太多<code>\\n</code>需要写多个,不方便,在JavaScript中又增加了一种表示方法(ES6),就是将多行文本用`… `括起来,就是键盘上tab键上边的那个按键.</p>\n<h4 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h4><p>多个字符串可以使用<code>+</code>连接起来.字符串也可以是变量如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'小王吧'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"string\">'100'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">'你好,'</span> + name + <span class=\"string\">',你现在'</span> + age + <span class=\"string\">'岁'</span>;</div></pre></td></tr></table></figure>\n<p>同样,如果要连接的变量有很多,使用<code>+</code>就会很不方便,在JavaScript中增加了一种模板字符串的表示(ES6):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'小王吧'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"string\">'101'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>,你今年<span class=\"subst\">$&#123;age&#125;</span>岁,是不是?`</span></div></pre></td></tr></table></figure>\n<p>注意:新的表示方法使用的是` ,就是新的多行文本使用的符号,就是键盘上<code>tab</code>按键上边的那个按键,不能使用<code>&quot;&quot;或&#39;&#39;</code>,那样无法转换变量</p>\n<h4 id=\"字符串操作\"><a href=\"#字符串操作\" class=\"headerlink\" title=\"字符串操作\"></a>字符串操作</h4><p>获取字符的长度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'xiao wang ba.'</span>;</div><div class=\"line\">alert(name.length); <span class=\"comment\">//13</span></div></pre></td></tr></table></figure>\n<p>获取指定位置字符,可以把字符串看成是特殊的数组,对字符串进行下标操作,从0索引开始</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'xiao wang ba.'</span>;</div><div class=\"line\">name[<span class=\"number\">0</span>]; <span class=\"comment\">//'x'</span></div><div class=\"line\">name[<span class=\"number\">1</span>]; <span class=\"comment\">//'i'</span></div><div class=\"line\">name[<span class=\"number\">4</span>]; <span class=\"comment\">//' '</span></div><div class=\"line\">name[<span class=\"number\">12</span>];<span class=\"comment\">//'.'</span></div><div class=\"line\">name[<span class=\"number\">13</span>];<span class=\"comment\">//undefined 超出范围的索引一律返回undefined</span></div></pre></td></tr></table></figure>\n<p>注意:给字符串的索引赋值不会有报错,也不会有任何效果,字符串也不会改变</p>\n<p>改变字符串为大写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'xiao wang ba.'</span>;</div><div class=\"line\">name.toUpperCase(); <span class=\"comment\">//返回'XIAO WANG BA.'</span></div></pre></td></tr></table></figure>\n<p>改变字符串为小写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'Xiao Wang Ba.'</span>;</div><div class=\"line\">name.toLowerCase(); <span class=\"comment\">//返回'xiao wang ba.'</span></div></pre></td></tr></table></figure>\n<p>注意:如果字符串是中文,则没效果</p>\n<p>返回字符串出现的位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'Xiao Wang Ba.'</span>;</div><div class=\"line\">name.indexOf(<span class=\"string\">'Wang'</span>);<span class=\"comment\">//返回5</span></div><div class=\"line\">name.indexOf(<span class=\"string\">'wang'</span>);<span class=\"comment\">//如果没有找到指定的子串,返回-1</span></div></pre></td></tr></table></figure>\n<p>获取字符串中的子串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'xiao wang ba.'</span>;</div><div class=\"line\">name.substring(<span class=\"number\">0</span>,<span class=\"number\">4</span>);<span class=\"comment\">//从索引0开始到4(不包括4),返回'xiao'</span></div><div class=\"line\">name.substring(<span class=\"number\">10</span>);<span class=\"comment\">//从索引10开始到结束,返回'ba.'</span></div></pre></td></tr></table></figure>\n<h3 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h3><p>JavaScript中的布尔值有<code>true</code>和<code>false</code>两种值,可以直接用<code>true</code>或<code>false</code>表示,也可以通过布尔运算计算出来</p>\n<h3 id=\"null和undefined\"><a href=\"#null和undefined\" class=\"headerlink\" title=\"null和undefined\"></a>null和undefined</h3><p><code>null</code>表示一个”空”的值,同Java中的<code>null</code>,Swift中的nil,Python中的None用法类似.<br><code>undefined</code>表示”未定义”.<br>JavaScript设计的时候希望用<code>null</code>表示一个空的值,用<code>undefined</code>表示值未定义,但是大多数情况下我们都应该用<code>null</code>.<code>undefined</code>仅仅在判断函数参数是否传递的情况下有用</p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>数组是一组按顺序排列的集合,集合的每个值称为元素.JavaScript的数组可以包括任意数据类型.<br>创建方法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3.14</span>,<span class=\"string\">\"hello\"</span>,<span class=\"literal\">null</span>,<span class=\"literal\">true</span>]; <span class=\"comment\">//推荐使用</span></div></pre></td></tr></table></figure>\n<p>另一种创建方法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n<p>获取数组的长度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3.14</span>,<span class=\"string\">\"hello\"</span>,<span class=\"literal\">null</span>,<span class=\"literal\">true</span>];</div><div class=\"line\">arr.length;<span class=\"comment\">//6</span></div><div class=\"line\"><span class=\"comment\">//可以给数组的长度赋值,改变数组的大小</span></div><div class=\"line\">arr.length = <span class=\"number\">7</span>;<span class=\"comment\">//数组改变为[1,2,3.14,\"hello\",null,true,undefined]</span></div><div class=\"line\">arr.length = <span class=\"number\">4</span>;<span class=\"comment\">//数组改变为[1,2,3.14,\"hello\"]</span></div></pre></td></tr></table></figure>\n<p>数组可以通过索引来访问每个元素的值,也可以改变索引对应元素的值:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3.14</span>,<span class=\"string\">\"hello\"</span>,<span class=\"literal\">null</span>,<span class=\"literal\">true</span>];</div><div class=\"line\">arr[<span class=\"number\">0</span>]; <span class=\"comment\">//数组第一个元素,值为1</span></div><div class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"number\">10</span>;<span class=\"comment\">//修改数组第二个元素的值为10</span></div></pre></td></tr></table></figure>\n<p>注意:如果通过索引给数组赋值的时候,索引超过了数组长度,数组会被变大</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\">arr[<span class=\"number\">5</span>] = <span class=\"string\">'F'</span>;<span class=\"comment\">//arr会变为['A', 'B', 'C', undefined, undefined, 'F'];</span></div></pre></td></tr></table></figure>\n<p>获取对应元素的索引</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">20</span> ,<span class=\"string\">'30'</span>, <span class=\"string\">'xyz'</span>];</div><div class=\"line\">arr.indexOf(<span class=\"number\">10</span>);<span class=\"comment\">//元素10的索引是0</span></div><div class=\"line\">arr.indexOf(<span class=\"number\">20</span>);<span class=\"comment\">//元素20的索引是1</span></div><div class=\"line\">arr.indexOf(<span class=\"number\">30</span>);<span class=\"comment\">//元素30的索引是 -1 因为没有找到元素</span></div><div class=\"line\">arr.indexOf(<span class=\"string\">'30'</span>);<span class=\"comment\">//元素'30'的索引是2</span></div></pre></td></tr></table></figure>\n<p>注意：数字<code>30</code>和<code>&#39;30&#39;</code>是不同的元素</p>\n<p>获取数组中的部分元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr =[<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>,<span class=\"string\">'D'</span>,<span class=\"string\">'E'</span>,<span class=\"string\">'F'</span>,<span class=\"string\">'G'</span>];</div><div class=\"line\">arr.slice(<span class=\"number\">0</span>,<span class=\"number\">3</span>);<span class=\"comment\">//从索引0开始,到索引3结束,但不包括索引3:['A','B','C']</span></div><div class=\"line\">arr.slice(<span class=\"number\">3</span>);<span class=\"comment\">//从索引3开始到结束:['D','E','F','G']</span></div></pre></td></tr></table></figure>\n<p>注意:<code>slice()</code>的起止参数包括开始索引,不包括结束索引<br>如果不给<code>slice()</code>传递任何参数,它会从头到尾截取所有元素,这个方法可以复制一个<code>array</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>,<span class=\"string\">'D'</span>,<span class=\"string\">'E'</span>,<span class=\"string\">'F'</span>,<span class=\"string\">'G'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> aCopy = arr.slice();</div><div class=\"line\">aCopy; <span class=\"comment\">//['A','B','C','D','E','F','G'];</span></div><div class=\"line\">aCopy === arr; <span class=\"comment\">//false</span></div><div class=\"line\"><span class=\"keyword\">if</span>(aCopy.toString() === arr.toString()) &#123;</div><div class=\"line\">    alert(<span class=\"string\">'一样'</span>);<span class=\"comment\">//数组相同</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    alert(<span class=\"string\">'不一样'</span>);<span class=\"comment\">//数组不同</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意:<code>JavaScript</code>比较两个数组是否相同不能直接使用<code>===</code> 要比较两个数组是否相同,需要先把数组转换成字符串,然后再比较</p>\n<p>在数组末尾添加或删除若干元素,<code>push()</code>和<code>pop()</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span> , <span class=\"number\">2</span>];</div><div class=\"line\">arr.push(<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>); <span class=\"comment\">//返回新的长度为4的数组</span></div><div class=\"line\">arr; <span class=\"comment\">//[1,2,'A','B']</span></div><div class=\"line\">arr.pop();<span class=\"comment\">//pop()返回'B'</span></div><div class=\"line\">arr; <span class=\"comment\">// [1,2,'A']</span></div><div class=\"line\">arr.pop();arr.pop();arr.pop(); <span class=\"comment\">//连续pop 3次</span></div><div class=\"line\">arr; <span class=\"comment\">//[]</span></div><div class=\"line\">arr.pop(); <span class=\"comment\">//空数组继续pop不会报错,而是返回undefined</span></div><div class=\"line\">arr;<span class=\"comment\">//[]</span></div></pre></td></tr></table></figure>\n<p>在数组头部添加或删除若干元素,<code>unshift()</code>和<code>shift()</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr =[<span class=\"number\">1</span>,<span class=\"number\">2</span>];</div><div class=\"line\">arr.unshift(<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>);<span class=\"comment\">//返回新的长度为4的数组</span></div><div class=\"line\">arr;<span class=\"comment\">//['A','B',1,2]</span></div><div class=\"line\">arr.shift();<span class=\"comment\">//'A'</span></div><div class=\"line\">arr;<span class=\"comment\">//['B',1,2]</span></div><div class=\"line\">arr.shift();arr.shift();arr.shift();<span class=\"comment\">//连续shift 3次</span></div><div class=\"line\">arr;<span class=\"comment\">//[]</span></div><div class=\"line\">arr.shift();<span class=\"comment\">//空数组继续shift不会报错,而是返回undefined</span></div><div class=\"line\">arr;<span class=\"comment\">//[]</span></div></pre></td></tr></table></figure>\n<p>数组排序<br><code>sort()</code>可以对当前数组进行排序,它会直接修改当前的数组元素的位置,直接调用时,会按照默认顺序排序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>,<span class=\"string\">'A'</span>];</div><div class=\"line\">arr.sort();</div><div class=\"line\">arr;<span class=\"comment\">//['A','B','C']</span></div></pre></td></tr></table></figure>\n<p>注意 在函数中可以自定义排序条件</p>\n<p>数组反转</p>\n<p><code>reverse()</code>可以把数组的元素反转</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>];</div><div class=\"line\">arr.reverse();</div><div class=\"line\">arr;<span class=\"comment\">//['three','two','one']</span></div></pre></td></tr></table></figure>\n<p>数组修改的”万能方法”,可以从指定索引开始删除若干元素,然后再从该位置添加若干元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr =[<span class=\"string\">'Microsoft'</span>,<span class=\"string\">'Apple'</span>,<span class=\"string\">'Yahoo'</span>,<span class=\"string\">'AOL'</span>,<span class=\"string\">'Excite'</span>,<span class=\"string\">'Oracle'</span>]</div><div class=\"line\">arr.splice(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">'Google'</span>,<span class=\"string\">'Facebook'</span>);<span class=\"comment\">//从索引2开始删除3个元素,然后再添加两个元素,返回删除的元素['Yahoo','AOL','Excite']</span></div><div class=\"line\">arr.splice(<span class=\"number\">2</span>,<span class=\"number\">2</span>);<span class=\"comment\">//只删除不添加,返回['Google','Facebook']</span></div><div class=\"line\">arr;<span class=\"comment\">//['Microsoft','Apple','Oracle']</span></div><div class=\"line\">arr.splice(<span class=\"number\">2.0</span>,<span class=\"string\">'Google'</span>,<span class=\"string\">'Facebook'</span>);<span class=\"comment\">//只添加,不删除,返回[]</span></div><div class=\"line\">arr;<span class=\"comment\">//['Microsoft','Apple','Google','Facebook','Oracle']</span></div></pre></td></tr></table></figure>\n<p>把两个数组连接起来,返回一个新的数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> added = arr.concat([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]);</div><div class=\"line\">added; <span class=\"comment\">//['A','B','C',1,2,3]</span></div><div class=\"line\">ARR;<span class=\"comment\">//['A','B','C']</span></div></pre></td></tr></table></figure>\n<p>注意 <code>concat()</code>方法并没有修改当前数组,而是返回了一个新的数组</p>\n<p>而且<code>concat()</code>可以接收任意个元素和数组,并把所有数组自动拆开,添加到新的数组中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>];</div><div class=\"line\">arr.concat(<span class=\"number\">1</span>,<span class=\"number\">2</span>,[<span class=\"number\">3</span>,<span class=\"number\">4</span>]);<span class=\"comment\">//['A','B','C',1,2,3,4]</span></div></pre></td></tr></table></figure>\n<p>把数组的每个元素都用指定的字符串连接起来,然后返回字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</div><div class=\"line\">arr.join(<span class=\"string\">'-'</span>); <span class=\"comment\">//'A-B-C-1-2-3'</span></div></pre></td></tr></table></figure>\n<p>注意如果数组的元素不是字符串,会自动转换成字符串再连接</p>\n<p>多维数组,指的是数组中的某个元素又是一个数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">400</span>,<span class=\"number\">500</span>,<span class=\"number\">600</span>],<span class=\"string\">'-'</span>];</div></pre></td></tr></table></figure>\n<p>上述<code>Array</code>包含3个元素,其中头两个元素本身也是<code>Array</code></p>\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p>对象是一组由键-值组成的无序集合:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">'XiaoWang'</span>,</div><div class=\"line\">\t<span class=\"attr\">tags</span>: [<span class=\"string\">'js'</span>, <span class=\"string\">'web'</span>, <span class=\"string\">'mobile'</span>],</div><div class=\"line\">\t<span class=\"attr\">age</span>: <span class=\"number\">12</span>,</div><div class=\"line\">\t<span class=\"attr\">city</span>: <span class=\"string\">'shanghai'</span>,</div><div class=\"line\">\t<span class=\"attr\">hasCar</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">\t<span class=\"attr\">zipcode</span>: <span class=\"literal\">null</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>JavaScript用一个<code>{...}</code> 表示一个对象,键值对以<code>xxx: xxx</code>形式申明,用<code>,</code>隔开,最后一个键值对不需要加</p>\n<p>JavaScript对象的键都是字符串类型,值可以是任意数据类型,每个键都是对象的一个属性,获取属性的方法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">person.name; <span class=\"comment\">// 'XiaoWang'</span></div><div class=\"line\">person.zipcode; <span class=\"comment\">// null</span></div></pre></td></tr></table></figure>\n<p>注:<code>var person</code> 是JavaScript的一个变量,<code>person</code>是变量名,变量名是大小写英文,数字,<code>$</code>和<code>_</code>的组合,且不能用数字开头,也不能使用JavaScript中的关键字</p>\n<h4 id=\"strict模式\"><a href=\"#strict模式\" class=\"headerlink\" title=\"strict模式\"></a>strict模式</h4><p>蛋疼的布兰登在设计JavaScript的时候为了赶工期,并没有强制使用<code>var</code>声明变量,如果一个变量没有通过<code>var</code>声明就被使用,这个变量就会被自动声明为全局变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">i = <span class=\"number\">10</span>; <span class=\"comment\">//i就是一个全局变量</span></div></pre></td></tr></table></figure>\n<p>如果在不同的JavaScript文件中,你都使用了同样名字的变量,而且都没有用<code>var</code>声明,那么你就麻烦了.</p>\n<p>因此,为了给布兰登填坑,ECMA在后续的规范中推出了strict模式,在strict模式下运行JavaScript代码不允许使用没有<code>var</code>声明的变量,如果有那么就给你报错</p>\n<p>启动strict模式的方法很简单,就是在JavaScript代码的第一行写上:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div></pre></td></tr></table></figure>\n<p>注:如果你用的是老爷机,你的浏览器太老了,他会自以为是的把上面那就话当做一个字符串语句执行,如果这样的话还是换个最新版的浏览器吧</p>\n<h4 id=\"Advanced-Operaters-高级运算符\"><a href=\"#Advanced-Operaters-高级运算符\" class=\"headerlink\" title=\"Advanced Operaters (高级运算符)\"></a>Advanced Operaters (高级运算符)</h4><p>取余运算 <code>x = y % 2</code><br>累加运算 <code>a = 5</code><br>        <code>c = a++</code>/Users/YaoWanXin/Desktop/app.html resulets : c = 5 and a = 6<br>        <code>c = ++a</code> resulets : c = 6 and a = 6<br>累减运算 <code>a = 5</code><br>        <code>c = a--</code> resulets : c = 5 and a = 4<br>        <code>c = --a</code> resulets : c = 4 and a = 4</p>"},{"title":"OC使用静态库中的类别","date":"2017-04-05T12:02:30.000Z","_content":"\n## OC中使用静态库中的类别的问题 ##\n\nOC的源文件经过 `clang` 编译首先生成中间代码,接着通过优化生成目标代码(目标代码中包括符号表,标示了此代码中的全局符号和静态符号,还标示了导入符号等),连接器会根据符号表分析各个目标代码之间的调用关系,然后将使用到的代码进行连接和重定位,最后生成可执行文件.\n\n在编译Objective-C源文件到目标文件时,编译器并不知道方法的对应实现,只能在运行时才知道,所以编译器只会为类生成连接符号,不会对类中的方法生成连接符号,由于Category方法并不对应一个新类,所以不会生成连接符号,连接器也不会将Category方法合并到原始的类中,最终导致连接器忽略了Category方法,不会将其连接到可执行文件中.\n\n\n> 在OC使用静态库中的类别,需要设置下面5种方法中的一种\n\n\n## Other Linker Flags 设置 ##\n\n* 1.通过在Other Linder Flags 添加 `-all\\_load` 它会告诉编译器对”所有文档中的所有对象文件,不管里面的符号有没有被用到,全部都载入”,这样会产生比较大的二进制文件\n\n* 2.通过在Other Linder Flags 添加 `-force\\_load 和指定路径` e.g: `-force\\_load $(SRCROOT)/RHAddressBook/libRHAddressBook.a` 这种方法会只载入指定的归档\n\n* 3.通过在Other Linder Flags 添加 `-ObjC` ,这个标识告诉编译器”如果在文档中发现了OC代码,就把文档载入” \n\n* 4.在Xcode里build setting中的 Perform Single-Object PreLink，如果启用这个选项，所有的对象文件都会被合并成一个单文件（这不是真正的链接，所以叫做预链接），这个对象文件（有时被称做主对象文件(master object file)）被添加到文档中。现在如果主对象文件中的任何符号被认为是“在使用”，整个主对象文件都会被认为在使用，这样它里面的OC部分就会被载入了。因为里面的类都被正常符号化了，所以能使从这样的静态库中使用所有的Category\n\n* 5.最后一种解决方法是在只有Category的源文件里添加Fake symbol。如果你想在运行时使用Category，一定要确保你以某种方法在编译时引用了fake symbol，这会使得对象文件以及它里面的OC代码被载入。例如，它可以是一个有空函数体的函数，也可以是一个被访问的全局变量（例如一个全局的int变量，只要它被读或者写了一次就足够了）。和上面其他的解决方法不一样，这种解决方法可以控制哪些category可以在运行时被编译后的代码使用（可以通过使用这个符号，使它们被链接并变得可用；也可以不使用这个符号，这样链接器就会忽略它）\n","source":"_posts/OC使用静态库中的类别.md","raw":"---\ntitle: OC使用静态库中的类别\ndate: 2017-04-05 20:02:30\ntags: iOS\n---\n\n## OC中使用静态库中的类别的问题 ##\n\nOC的源文件经过 `clang` 编译首先生成中间代码,接着通过优化生成目标代码(目标代码中包括符号表,标示了此代码中的全局符号和静态符号,还标示了导入符号等),连接器会根据符号表分析各个目标代码之间的调用关系,然后将使用到的代码进行连接和重定位,最后生成可执行文件.\n\n在编译Objective-C源文件到目标文件时,编译器并不知道方法的对应实现,只能在运行时才知道,所以编译器只会为类生成连接符号,不会对类中的方法生成连接符号,由于Category方法并不对应一个新类,所以不会生成连接符号,连接器也不会将Category方法合并到原始的类中,最终导致连接器忽略了Category方法,不会将其连接到可执行文件中.\n\n\n> 在OC使用静态库中的类别,需要设置下面5种方法中的一种\n\n\n## Other Linker Flags 设置 ##\n\n* 1.通过在Other Linder Flags 添加 `-all\\_load` 它会告诉编译器对”所有文档中的所有对象文件,不管里面的符号有没有被用到,全部都载入”,这样会产生比较大的二进制文件\n\n* 2.通过在Other Linder Flags 添加 `-force\\_load 和指定路径` e.g: `-force\\_load $(SRCROOT)/RHAddressBook/libRHAddressBook.a` 这种方法会只载入指定的归档\n\n* 3.通过在Other Linder Flags 添加 `-ObjC` ,这个标识告诉编译器”如果在文档中发现了OC代码,就把文档载入” \n\n* 4.在Xcode里build setting中的 Perform Single-Object PreLink，如果启用这个选项，所有的对象文件都会被合并成一个单文件（这不是真正的链接，所以叫做预链接），这个对象文件（有时被称做主对象文件(master object file)）被添加到文档中。现在如果主对象文件中的任何符号被认为是“在使用”，整个主对象文件都会被认为在使用，这样它里面的OC部分就会被载入了。因为里面的类都被正常符号化了，所以能使从这样的静态库中使用所有的Category\n\n* 5.最后一种解决方法是在只有Category的源文件里添加Fake symbol。如果你想在运行时使用Category，一定要确保你以某种方法在编译时引用了fake symbol，这会使得对象文件以及它里面的OC代码被载入。例如，它可以是一个有空函数体的函数，也可以是一个被访问的全局变量（例如一个全局的int变量，只要它被读或者写了一次就足够了）。和上面其他的解决方法不一样，这种解决方法可以控制哪些category可以在运行时被编译后的代码使用（可以通过使用这个符号，使它们被链接并变得可用；也可以不使用这个符号，这样链接器就会忽略它）\n","slug":"OC使用静态库中的类别","published":1,"updated":"2017-04-06T03:48:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnfk7vg10004zb7ukse0bxmc","content":"<h2 id=\"OC中使用静态库中的类别的问题\"><a href=\"#OC中使用静态库中的类别的问题\" class=\"headerlink\" title=\"OC中使用静态库中的类别的问题\"></a>OC中使用静态库中的类别的问题</h2><p>OC的源文件经过 <code>clang</code> 编译首先生成中间代码,接着通过优化生成目标代码(目标代码中包括符号表,标示了此代码中的全局符号和静态符号,还标示了导入符号等),连接器会根据符号表分析各个目标代码之间的调用关系,然后将使用到的代码进行连接和重定位,最后生成可执行文件.</p>\n<p>在编译Objective-C源文件到目标文件时,编译器并不知道方法的对应实现,只能在运行时才知道,所以编译器只会为类生成连接符号,不会对类中的方法生成连接符号,由于Category方法并不对应一个新类,所以不会生成连接符号,连接器也不会将Category方法合并到原始的类中,最终导致连接器忽略了Category方法,不会将其连接到可执行文件中.</p>\n<blockquote>\n<p>在OC使用静态库中的类别,需要设置下面5种方法中的一种</p>\n</blockquote>\n<h2 id=\"Other-Linker-Flags-设置\"><a href=\"#Other-Linker-Flags-设置\" class=\"headerlink\" title=\"Other Linker Flags 设置\"></a>Other Linker Flags 设置</h2><ul>\n<li><p>1.通过在Other Linder Flags 添加 <code>-all\\_load</code> 它会告诉编译器对”所有文档中的所有对象文件,不管里面的符号有没有被用到,全部都载入”,这样会产生比较大的二进制文件</p>\n</li>\n<li><p>2.通过在Other Linder Flags 添加 <code>-force\\_load 和指定路径</code> e.g: <code>-force\\_load $(SRCROOT)/RHAddressBook/libRHAddressBook.a</code> 这种方法会只载入指定的归档</p>\n</li>\n<li><p>3.通过在Other Linder Flags 添加 <code>-ObjC</code> ,这个标识告诉编译器”如果在文档中发现了OC代码,就把文档载入” </p>\n</li>\n<li><p>4.在Xcode里build setting中的 Perform Single-Object PreLink，如果启用这个选项，所有的对象文件都会被合并成一个单文件（这不是真正的链接，所以叫做预链接），这个对象文件（有时被称做主对象文件(master object file)）被添加到文档中。现在如果主对象文件中的任何符号被认为是“在使用”，整个主对象文件都会被认为在使用，这样它里面的OC部分就会被载入了。因为里面的类都被正常符号化了，所以能使从这样的静态库中使用所有的Category</p>\n</li>\n<li><p>5.最后一种解决方法是在只有Category的源文件里添加Fake symbol。如果你想在运行时使用Category，一定要确保你以某种方法在编译时引用了fake symbol，这会使得对象文件以及它里面的OC代码被载入。例如，它可以是一个有空函数体的函数，也可以是一个被访问的全局变量（例如一个全局的int变量，只要它被读或者写了一次就足够了）。和上面其他的解决方法不一样，这种解决方法可以控制哪些category可以在运行时被编译后的代码使用（可以通过使用这个符号，使它们被链接并变得可用；也可以不使用这个符号，这样链接器就会忽略它）</p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"OC中使用静态库中的类别的问题\"><a href=\"#OC中使用静态库中的类别的问题\" class=\"headerlink\" title=\"OC中使用静态库中的类别的问题\"></a>OC中使用静态库中的类别的问题</h2><p>OC的源文件经过 <code>clang</code> 编译首先生成中间代码,接着通过优化生成目标代码(目标代码中包括符号表,标示了此代码中的全局符号和静态符号,还标示了导入符号等),连接器会根据符号表分析各个目标代码之间的调用关系,然后将使用到的代码进行连接和重定位,最后生成可执行文件.</p>\n<p>在编译Objective-C源文件到目标文件时,编译器并不知道方法的对应实现,只能在运行时才知道,所以编译器只会为类生成连接符号,不会对类中的方法生成连接符号,由于Category方法并不对应一个新类,所以不会生成连接符号,连接器也不会将Category方法合并到原始的类中,最终导致连接器忽略了Category方法,不会将其连接到可执行文件中.</p>\n<blockquote>\n<p>在OC使用静态库中的类别,需要设置下面5种方法中的一种</p>\n</blockquote>\n<h2 id=\"Other-Linker-Flags-设置\"><a href=\"#Other-Linker-Flags-设置\" class=\"headerlink\" title=\"Other Linker Flags 设置\"></a>Other Linker Flags 设置</h2><ul>\n<li><p>1.通过在Other Linder Flags 添加 <code>-all\\_load</code> 它会告诉编译器对”所有文档中的所有对象文件,不管里面的符号有没有被用到,全部都载入”,这样会产生比较大的二进制文件</p>\n</li>\n<li><p>2.通过在Other Linder Flags 添加 <code>-force\\_load 和指定路径</code> e.g: <code>-force\\_load $(SRCROOT)/RHAddressBook/libRHAddressBook.a</code> 这种方法会只载入指定的归档</p>\n</li>\n<li><p>3.通过在Other Linder Flags 添加 <code>-ObjC</code> ,这个标识告诉编译器”如果在文档中发现了OC代码,就把文档载入” </p>\n</li>\n<li><p>4.在Xcode里build setting中的 Perform Single-Object PreLink，如果启用这个选项，所有的对象文件都会被合并成一个单文件（这不是真正的链接，所以叫做预链接），这个对象文件（有时被称做主对象文件(master object file)）被添加到文档中。现在如果主对象文件中的任何符号被认为是“在使用”，整个主对象文件都会被认为在使用，这样它里面的OC部分就会被载入了。因为里面的类都被正常符号化了，所以能使从这样的静态库中使用所有的Category</p>\n</li>\n<li><p>5.最后一种解决方法是在只有Category的源文件里添加Fake symbol。如果你想在运行时使用Category，一定要确保你以某种方法在编译时引用了fake symbol，这会使得对象文件以及它里面的OC代码被载入。例如，它可以是一个有空函数体的函数，也可以是一个被访问的全局变量（例如一个全局的int变量，只要它被读或者写了一次就足够了）。和上面其他的解决方法不一样，这种解决方法可以控制哪些category可以在运行时被编译后的代码使用（可以通过使用这个符号，使它们被链接并变得可用；也可以不使用这个符号，这样链接器就会忽略它）</p>\n</li>\n</ul>\n"},{"title":"iOS的CF和OC中间的类型转换","date":"2017-01-11T03:10:12.000Z","_content":"\n# iOS的CF和OC中间的类型转换 #\n\n## Toll-Free bridged ##\n\n`Toll-Free bridged`  是Core Foundation和Foundation之间交换使用数据类型的技术.即同一数据类型既可作为Core Foundation函数的参数,也可以作为接收者向其发送Objective-C消息.\n\n说的简单点,就是OC中的有些类型,通过`Toll-Free bridged` 既可以当做Core Foundation的类型使用(CFxxxx),又可以当做Foundation的类型使用(NSxxxx).\n\n\n<!----- more ----->\n\n\n## Toll-Free bridged原理 ##\n\n每一个能够bridge的ObjC类，都是一个类簇（class cluster）。类簇是一个公开的抽象类，但其核心功能的是在不同的私有子类中实现的，公开类只暴露一致的接口和实现一些辅助的创建方法。而与该ObjC类相对应的Core Foundation类的内存结构，正好与类簇的其中一个私有子类相同。\n\n举个例子，NSString是一个类簇，一个公开的抽象类，但每次创建一个NSString的实例时，实际上我们会获得其中一个私有子类的实例。而NSString的其中一个私有子类实现既为NSCFString，其内存的结构与CFString是相同的，CFString的isa指针就指向NSCFString类，即CFString对象就是一个NSCFString类的实例。\n所以，当NSString的实现刚好是NSCFString的时候，他们两者之间的转换是相当容易而直接的，他们就是同一个类的实例。\n\n当NSString的实现不是NSCFString的时候（比如我们自己subclass了NSString），我们调用CF函数，就需要先检查对象的具体实现。如果发现其不是NSCFString，我们不会调用CF函数的实现来获得结果，而是通过给对象发送与函数功能相对应的ObjC消息（调用相对应的NSString的接口）来获得其结果。\n\n例如CFStringGetLength函数，当收到一个作为参数传递进来的对象时，会先确认该对象到底是不是NSCFString实现。如果是的话，就会直接调用CFStringGetLength函数的实现来获得字符串的长度；如果不是的话，会给对象发送length消息（调用NSString的length接口），来得到字符串的长度。\n\n## Toll-Free bridged的内存管理 ##\n\n在ARC中编译器不知道如何处理这个同时拥有ObjC和CFTypeRef指向的对象,所以你必须为编译器提供额外的信息：将类型显示转换为互换类型；同时可能需明确对象的声明周期。 因此我们需要使用 `__bridge`, `__bridge_retained`, `__bridge_transfer` 修饰符告诉编译器该如何去做。\n\n### __bridge ###\n\n```objectivec\n//objc to cf\n NSString *str = @\"hello\";\n CFStringRef cfStr = (__bridge CFStringRef)str;\n CFRelease(cfStr);//这里不需要release\n```\n编译器会继续负责nsStr的内存管理的事情，不会在bridge的时候retain对象，所以也不需要开发者在CF 一端释放。需要注意的是，当nsStr被释放的时候（比如出了作用域），意味着cfStr指向的对象被释放了，这时如果继续使用cfStr将会引起程序崩溃。\n\n```objectivec\n//cf to objc\n CFStringRef cfStr = CFStringCreateWithCString(kCFAllpacatorDefaule,\"hello\",kCFStringEncodingUTF8);\n NSString *str = (__bridge NSString *)(cfStr);\n CFRelease(cfStr);//这里需要release\n```\n\n bridge的时候编译器不会做任何内存管理的事情，bridge之后，编译器会负责ObjC一端的内存管理的事情。同时，开发者需要负责管理CF 一端的内存管理的事情，需要在bridge之后，负责release对象。\n\n### __bridge_retained ###\n接着上面的例子，Foundation类型对应的Core Foundation类型时，为了防止str被释放，引起我们使用cfStr的时候程序崩溃，可以使用__bridge_retained修饰符。这意味着，在bridge的时候，编译器会retain对象，而由开发者在CF一端负责release。这样，就算str在objc一端被释放，只要开发者不手动去释放cfStr，其指向的对象就不会被真的销毁。但同时，开发者也必须保证和负责对象的释放。\n\n```objectivec\n//objc to cf\n NSString *str = @\"hello\";\n CFStringRef cfStr = (__bridge_retained CFStringRef)str;\n CFRelease(cfStr);//这里不需要release\n```\n\n### __bridge_transfer ###\n当Core Foundation类型转化为Foundation类型时，如果使用__bridge修饰符在cf转objc的时候非常的麻烦，我们既需要一个CFTypeRef的变量，还需要在bridge之后负责释放。这时我们可以使用__bridge_transfer，意味着在bridge的时候，编译器转移了对象的所有权，开发者不再需要负责对象的释放。\n\n```objectivec\n//cf to objc\n CFStringRef cfStr = CFStringCreateWithCString(kCFAllpacatorDefaule,\"hello\",kCFStringEncodingUTF8);\n NSString *str = (__bridge NSString *)(cfStr);\n CFRelease(cfStr);//这里需要release\n```\n\n## 总结 ##\n\n  * `__bridge` :编译器在bridge的时候不要做任何事情\n  * `__bridge_retained` :（ObjC转CF的时候使用）编译器在bridge的时候retain对象，开发者需要在CF一端负责释放对象\n  * `__bridge_transfer` :（CF转ObjC的时候使用）编译器转移CF对象的所有权，开发者不再需要在CF一端负责释放对象\n","source":"_posts/bridged.md","raw":"---\ntitle: iOS的CF和OC中间的类型转换\ndate: 2017-01-11 11:10:12\ntags: iOS\n---\n\n# iOS的CF和OC中间的类型转换 #\n\n## Toll-Free bridged ##\n\n`Toll-Free bridged`  是Core Foundation和Foundation之间交换使用数据类型的技术.即同一数据类型既可作为Core Foundation函数的参数,也可以作为接收者向其发送Objective-C消息.\n\n说的简单点,就是OC中的有些类型,通过`Toll-Free bridged` 既可以当做Core Foundation的类型使用(CFxxxx),又可以当做Foundation的类型使用(NSxxxx).\n\n\n<!----- more ----->\n\n\n## Toll-Free bridged原理 ##\n\n每一个能够bridge的ObjC类，都是一个类簇（class cluster）。类簇是一个公开的抽象类，但其核心功能的是在不同的私有子类中实现的，公开类只暴露一致的接口和实现一些辅助的创建方法。而与该ObjC类相对应的Core Foundation类的内存结构，正好与类簇的其中一个私有子类相同。\n\n举个例子，NSString是一个类簇，一个公开的抽象类，但每次创建一个NSString的实例时，实际上我们会获得其中一个私有子类的实例。而NSString的其中一个私有子类实现既为NSCFString，其内存的结构与CFString是相同的，CFString的isa指针就指向NSCFString类，即CFString对象就是一个NSCFString类的实例。\n所以，当NSString的实现刚好是NSCFString的时候，他们两者之间的转换是相当容易而直接的，他们就是同一个类的实例。\n\n当NSString的实现不是NSCFString的时候（比如我们自己subclass了NSString），我们调用CF函数，就需要先检查对象的具体实现。如果发现其不是NSCFString，我们不会调用CF函数的实现来获得结果，而是通过给对象发送与函数功能相对应的ObjC消息（调用相对应的NSString的接口）来获得其结果。\n\n例如CFStringGetLength函数，当收到一个作为参数传递进来的对象时，会先确认该对象到底是不是NSCFString实现。如果是的话，就会直接调用CFStringGetLength函数的实现来获得字符串的长度；如果不是的话，会给对象发送length消息（调用NSString的length接口），来得到字符串的长度。\n\n## Toll-Free bridged的内存管理 ##\n\n在ARC中编译器不知道如何处理这个同时拥有ObjC和CFTypeRef指向的对象,所以你必须为编译器提供额外的信息：将类型显示转换为互换类型；同时可能需明确对象的声明周期。 因此我们需要使用 `__bridge`, `__bridge_retained`, `__bridge_transfer` 修饰符告诉编译器该如何去做。\n\n### __bridge ###\n\n```objectivec\n//objc to cf\n NSString *str = @\"hello\";\n CFStringRef cfStr = (__bridge CFStringRef)str;\n CFRelease(cfStr);//这里不需要release\n```\n编译器会继续负责nsStr的内存管理的事情，不会在bridge的时候retain对象，所以也不需要开发者在CF 一端释放。需要注意的是，当nsStr被释放的时候（比如出了作用域），意味着cfStr指向的对象被释放了，这时如果继续使用cfStr将会引起程序崩溃。\n\n```objectivec\n//cf to objc\n CFStringRef cfStr = CFStringCreateWithCString(kCFAllpacatorDefaule,\"hello\",kCFStringEncodingUTF8);\n NSString *str = (__bridge NSString *)(cfStr);\n CFRelease(cfStr);//这里需要release\n```\n\n bridge的时候编译器不会做任何内存管理的事情，bridge之后，编译器会负责ObjC一端的内存管理的事情。同时，开发者需要负责管理CF 一端的内存管理的事情，需要在bridge之后，负责release对象。\n\n### __bridge_retained ###\n接着上面的例子，Foundation类型对应的Core Foundation类型时，为了防止str被释放，引起我们使用cfStr的时候程序崩溃，可以使用__bridge_retained修饰符。这意味着，在bridge的时候，编译器会retain对象，而由开发者在CF一端负责release。这样，就算str在objc一端被释放，只要开发者不手动去释放cfStr，其指向的对象就不会被真的销毁。但同时，开发者也必须保证和负责对象的释放。\n\n```objectivec\n//objc to cf\n NSString *str = @\"hello\";\n CFStringRef cfStr = (__bridge_retained CFStringRef)str;\n CFRelease(cfStr);//这里不需要release\n```\n\n### __bridge_transfer ###\n当Core Foundation类型转化为Foundation类型时，如果使用__bridge修饰符在cf转objc的时候非常的麻烦，我们既需要一个CFTypeRef的变量，还需要在bridge之后负责释放。这时我们可以使用__bridge_transfer，意味着在bridge的时候，编译器转移了对象的所有权，开发者不再需要负责对象的释放。\n\n```objectivec\n//cf to objc\n CFStringRef cfStr = CFStringCreateWithCString(kCFAllpacatorDefaule,\"hello\",kCFStringEncodingUTF8);\n NSString *str = (__bridge NSString *)(cfStr);\n CFRelease(cfStr);//这里需要release\n```\n\n## 总结 ##\n\n  * `__bridge` :编译器在bridge的时候不要做任何事情\n  * `__bridge_retained` :（ObjC转CF的时候使用）编译器在bridge的时候retain对象，开发者需要在CF一端负责释放对象\n  * `__bridge_transfer` :（CF转ObjC的时候使用）编译器转移CF对象的所有权，开发者不再需要在CF一端负责释放对象\n","slug":"bridged","published":1,"updated":"2018-05-15T07:35:34.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnfk7vg70006zb7uw0hmrf91","content":"<h1 id=\"iOS的CF和OC中间的类型转换\"><a href=\"#iOS的CF和OC中间的类型转换\" class=\"headerlink\" title=\"iOS的CF和OC中间的类型转换\"></a>iOS的CF和OC中间的类型转换</h1><h2 id=\"Toll-Free-bridged\"><a href=\"#Toll-Free-bridged\" class=\"headerlink\" title=\"Toll-Free bridged\"></a>Toll-Free bridged</h2><p><code>Toll-Free bridged</code>  是Core Foundation和Foundation之间交换使用数据类型的技术.即同一数据类型既可作为Core Foundation函数的参数,也可以作为接收者向其发送Objective-C消息.</p>\n<p>说的简单点,就是OC中的有些类型,通过<code>Toll-Free bridged</code> 既可以当做Core Foundation的类型使用(CFxxxx),又可以当做Foundation的类型使用(NSxxxx).</p>\n<a id=\"more\"></a>\n<h2 id=\"Toll-Free-bridged原理\"><a href=\"#Toll-Free-bridged原理\" class=\"headerlink\" title=\"Toll-Free bridged原理\"></a>Toll-Free bridged原理</h2><p>每一个能够bridge的ObjC类，都是一个类簇（class cluster）。类簇是一个公开的抽象类，但其核心功能的是在不同的私有子类中实现的，公开类只暴露一致的接口和实现一些辅助的创建方法。而与该ObjC类相对应的Core Foundation类的内存结构，正好与类簇的其中一个私有子类相同。</p>\n<p>举个例子，NSString是一个类簇，一个公开的抽象类，但每次创建一个NSString的实例时，实际上我们会获得其中一个私有子类的实例。而NSString的其中一个私有子类实现既为NSCFString，其内存的结构与CFString是相同的，CFString的isa指针就指向NSCFString类，即CFString对象就是一个NSCFString类的实例。<br>所以，当NSString的实现刚好是NSCFString的时候，他们两者之间的转换是相当容易而直接的，他们就是同一个类的实例。</p>\n<p>当NSString的实现不是NSCFString的时候（比如我们自己subclass了NSString），我们调用CF函数，就需要先检查对象的具体实现。如果发现其不是NSCFString，我们不会调用CF函数的实现来获得结果，而是通过给对象发送与函数功能相对应的ObjC消息（调用相对应的NSString的接口）来获得其结果。</p>\n<p>例如CFStringGetLength函数，当收到一个作为参数传递进来的对象时，会先确认该对象到底是不是NSCFString实现。如果是的话，就会直接调用CFStringGetLength函数的实现来获得字符串的长度；如果不是的话，会给对象发送length消息（调用NSString的length接口），来得到字符串的长度。</p>\n<h2 id=\"Toll-Free-bridged的内存管理\"><a href=\"#Toll-Free-bridged的内存管理\" class=\"headerlink\" title=\"Toll-Free bridged的内存管理\"></a>Toll-Free bridged的内存管理</h2><p>在ARC中编译器不知道如何处理这个同时拥有ObjC和CFTypeRef指向的对象,所以你必须为编译器提供额外的信息：将类型显示转换为互换类型；同时可能需明确对象的声明周期。 因此我们需要使用 <code>__bridge</code>, <code>__bridge_retained</code>, <code>__bridge_transfer</code> 修饰符告诉编译器该如何去做。</p>\n<h3 id=\"bridge\"><a href=\"#bridge\" class=\"headerlink\" title=\"__bridge\"></a>__bridge</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//objc to cf</span></div><div class=\"line\"> <span class=\"built_in\">NSString</span> *str = <span class=\"string\">@\"hello\"</span>;</div><div class=\"line\"> <span class=\"built_in\">CFStringRef</span> cfStr = (__bridge <span class=\"built_in\">CFStringRef</span>)str;</div><div class=\"line\"> <span class=\"built_in\">CFRelease</span>(cfStr);<span class=\"comment\">//这里不需要release</span></div></pre></td></tr></table></figure>\n<p>编译器会继续负责nsStr的内存管理的事情，不会在bridge的时候retain对象，所以也不需要开发者在CF 一端释放。需要注意的是，当nsStr被释放的时候（比如出了作用域），意味着cfStr指向的对象被释放了，这时如果继续使用cfStr将会引起程序崩溃。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//cf to objc</span></div><div class=\"line\"> <span class=\"built_in\">CFStringRef</span> cfStr = <span class=\"built_in\">CFStringCreateWithCString</span>(kCFAllpacatorDefaule,<span class=\"string\">\"hello\"</span>,kCFStringEncodingUTF8);</div><div class=\"line\"> <span class=\"built_in\">NSString</span> *str = (__bridge <span class=\"built_in\">NSString</span> *)(cfStr);</div><div class=\"line\"> <span class=\"built_in\">CFRelease</span>(cfStr);<span class=\"comment\">//这里需要release</span></div></pre></td></tr></table></figure>\n<p> bridge的时候编译器不会做任何内存管理的事情，bridge之后，编译器会负责ObjC一端的内存管理的事情。同时，开发者需要负责管理CF 一端的内存管理的事情，需要在bridge之后，负责release对象。</p>\n<h3 id=\"bridge-retained\"><a href=\"#bridge-retained\" class=\"headerlink\" title=\"__bridge_retained\"></a>__bridge_retained</h3><p>接着上面的例子，Foundation类型对应的Core Foundation类型时，为了防止str被释放，引起我们使用cfStr的时候程序崩溃，可以使用__bridge_retained修饰符。这意味着，在bridge的时候，编译器会retain对象，而由开发者在CF一端负责release。这样，就算str在objc一端被释放，只要开发者不手动去释放cfStr，其指向的对象就不会被真的销毁。但同时，开发者也必须保证和负责对象的释放。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//objc to cf</span></div><div class=\"line\"> <span class=\"built_in\">NSString</span> *str = <span class=\"string\">@\"hello\"</span>;</div><div class=\"line\"> <span class=\"built_in\">CFStringRef</span> cfStr = (__bridge_retained <span class=\"built_in\">CFStringRef</span>)str;</div><div class=\"line\"> <span class=\"built_in\">CFRelease</span>(cfStr);<span class=\"comment\">//这里不需要release</span></div></pre></td></tr></table></figure>\n<h3 id=\"bridge-transfer\"><a href=\"#bridge-transfer\" class=\"headerlink\" title=\"__bridge_transfer\"></a>__bridge_transfer</h3><p>当Core Foundation类型转化为Foundation类型时，如果使用<strong>bridge修饰符在cf转objc的时候非常的麻烦，我们既需要一个CFTypeRef的变量，还需要在bridge之后负责释放。这时我们可以使用</strong>bridge_transfer，意味着在bridge的时候，编译器转移了对象的所有权，开发者不再需要负责对象的释放。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//cf to objc</span></div><div class=\"line\"> <span class=\"built_in\">CFStringRef</span> cfStr = <span class=\"built_in\">CFStringCreateWithCString</span>(kCFAllpacatorDefaule,<span class=\"string\">\"hello\"</span>,kCFStringEncodingUTF8);</div><div class=\"line\"> <span class=\"built_in\">NSString</span> *str = (__bridge <span class=\"built_in\">NSString</span> *)(cfStr);</div><div class=\"line\"> <span class=\"built_in\">CFRelease</span>(cfStr);<span class=\"comment\">//这里需要release</span></div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><code>__bridge</code> :编译器在bridge的时候不要做任何事情</li>\n<li><code>__bridge_retained</code> :（ObjC转CF的时候使用）编译器在bridge的时候retain对象，开发者需要在CF一端负责释放对象</li>\n<li><code>__bridge_transfer</code> :（CF转ObjC的时候使用）编译器转移CF对象的所有权，开发者不再需要在CF一端负责释放对象</li>\n</ul>\n","excerpt":"<h1 id=\"iOS的CF和OC中间的类型转换\"><a href=\"#iOS的CF和OC中间的类型转换\" class=\"headerlink\" title=\"iOS的CF和OC中间的类型转换\"></a>iOS的CF和OC中间的类型转换</h1><h2 id=\"Toll-Free-bridged\"><a href=\"#Toll-Free-bridged\" class=\"headerlink\" title=\"Toll-Free bridged\"></a>Toll-Free bridged</h2><p><code>Toll-Free bridged</code>  是Core Foundation和Foundation之间交换使用数据类型的技术.即同一数据类型既可作为Core Foundation函数的参数,也可以作为接收者向其发送Objective-C消息.</p>\n<p>说的简单点,就是OC中的有些类型,通过<code>Toll-Free bridged</code> 既可以当做Core Foundation的类型使用(CFxxxx),又可以当做Foundation的类型使用(NSxxxx).</p>","more":"<h2 id=\"Toll-Free-bridged原理\"><a href=\"#Toll-Free-bridged原理\" class=\"headerlink\" title=\"Toll-Free bridged原理\"></a>Toll-Free bridged原理</h2><p>每一个能够bridge的ObjC类，都是一个类簇（class cluster）。类簇是一个公开的抽象类，但其核心功能的是在不同的私有子类中实现的，公开类只暴露一致的接口和实现一些辅助的创建方法。而与该ObjC类相对应的Core Foundation类的内存结构，正好与类簇的其中一个私有子类相同。</p>\n<p>举个例子，NSString是一个类簇，一个公开的抽象类，但每次创建一个NSString的实例时，实际上我们会获得其中一个私有子类的实例。而NSString的其中一个私有子类实现既为NSCFString，其内存的结构与CFString是相同的，CFString的isa指针就指向NSCFString类，即CFString对象就是一个NSCFString类的实例。<br>所以，当NSString的实现刚好是NSCFString的时候，他们两者之间的转换是相当容易而直接的，他们就是同一个类的实例。</p>\n<p>当NSString的实现不是NSCFString的时候（比如我们自己subclass了NSString），我们调用CF函数，就需要先检查对象的具体实现。如果发现其不是NSCFString，我们不会调用CF函数的实现来获得结果，而是通过给对象发送与函数功能相对应的ObjC消息（调用相对应的NSString的接口）来获得其结果。</p>\n<p>例如CFStringGetLength函数，当收到一个作为参数传递进来的对象时，会先确认该对象到底是不是NSCFString实现。如果是的话，就会直接调用CFStringGetLength函数的实现来获得字符串的长度；如果不是的话，会给对象发送length消息（调用NSString的length接口），来得到字符串的长度。</p>\n<h2 id=\"Toll-Free-bridged的内存管理\"><a href=\"#Toll-Free-bridged的内存管理\" class=\"headerlink\" title=\"Toll-Free bridged的内存管理\"></a>Toll-Free bridged的内存管理</h2><p>在ARC中编译器不知道如何处理这个同时拥有ObjC和CFTypeRef指向的对象,所以你必须为编译器提供额外的信息：将类型显示转换为互换类型；同时可能需明确对象的声明周期。 因此我们需要使用 <code>__bridge</code>, <code>__bridge_retained</code>, <code>__bridge_transfer</code> 修饰符告诉编译器该如何去做。</p>\n<h3 id=\"bridge\"><a href=\"#bridge\" class=\"headerlink\" title=\"__bridge\"></a>__bridge</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//objc to cf</span></div><div class=\"line\"> <span class=\"built_in\">NSString</span> *str = <span class=\"string\">@\"hello\"</span>;</div><div class=\"line\"> <span class=\"built_in\">CFStringRef</span> cfStr = (__bridge <span class=\"built_in\">CFStringRef</span>)str;</div><div class=\"line\"> <span class=\"built_in\">CFRelease</span>(cfStr);<span class=\"comment\">//这里不需要release</span></div></pre></td></tr></table></figure>\n<p>编译器会继续负责nsStr的内存管理的事情，不会在bridge的时候retain对象，所以也不需要开发者在CF 一端释放。需要注意的是，当nsStr被释放的时候（比如出了作用域），意味着cfStr指向的对象被释放了，这时如果继续使用cfStr将会引起程序崩溃。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//cf to objc</span></div><div class=\"line\"> <span class=\"built_in\">CFStringRef</span> cfStr = <span class=\"built_in\">CFStringCreateWithCString</span>(kCFAllpacatorDefaule,<span class=\"string\">\"hello\"</span>,kCFStringEncodingUTF8);</div><div class=\"line\"> <span class=\"built_in\">NSString</span> *str = (__bridge <span class=\"built_in\">NSString</span> *)(cfStr);</div><div class=\"line\"> <span class=\"built_in\">CFRelease</span>(cfStr);<span class=\"comment\">//这里需要release</span></div></pre></td></tr></table></figure>\n<p> bridge的时候编译器不会做任何内存管理的事情，bridge之后，编译器会负责ObjC一端的内存管理的事情。同时，开发者需要负责管理CF 一端的内存管理的事情，需要在bridge之后，负责release对象。</p>\n<h3 id=\"bridge-retained\"><a href=\"#bridge-retained\" class=\"headerlink\" title=\"__bridge_retained\"></a>__bridge_retained</h3><p>接着上面的例子，Foundation类型对应的Core Foundation类型时，为了防止str被释放，引起我们使用cfStr的时候程序崩溃，可以使用__bridge_retained修饰符。这意味着，在bridge的时候，编译器会retain对象，而由开发者在CF一端负责release。这样，就算str在objc一端被释放，只要开发者不手动去释放cfStr，其指向的对象就不会被真的销毁。但同时，开发者也必须保证和负责对象的释放。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//objc to cf</span></div><div class=\"line\"> <span class=\"built_in\">NSString</span> *str = <span class=\"string\">@\"hello\"</span>;</div><div class=\"line\"> <span class=\"built_in\">CFStringRef</span> cfStr = (__bridge_retained <span class=\"built_in\">CFStringRef</span>)str;</div><div class=\"line\"> <span class=\"built_in\">CFRelease</span>(cfStr);<span class=\"comment\">//这里不需要release</span></div></pre></td></tr></table></figure>\n<h3 id=\"bridge-transfer\"><a href=\"#bridge-transfer\" class=\"headerlink\" title=\"__bridge_transfer\"></a>__bridge_transfer</h3><p>当Core Foundation类型转化为Foundation类型时，如果使用<strong>bridge修饰符在cf转objc的时候非常的麻烦，我们既需要一个CFTypeRef的变量，还需要在bridge之后负责释放。这时我们可以使用</strong>bridge_transfer，意味着在bridge的时候，编译器转移了对象的所有权，开发者不再需要负责对象的释放。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//cf to objc</span></div><div class=\"line\"> <span class=\"built_in\">CFStringRef</span> cfStr = <span class=\"built_in\">CFStringCreateWithCString</span>(kCFAllpacatorDefaule,<span class=\"string\">\"hello\"</span>,kCFStringEncodingUTF8);</div><div class=\"line\"> <span class=\"built_in\">NSString</span> *str = (__bridge <span class=\"built_in\">NSString</span> *)(cfStr);</div><div class=\"line\"> <span class=\"built_in\">CFRelease</span>(cfStr);<span class=\"comment\">//这里需要release</span></div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><code>__bridge</code> :编译器在bridge的时候不要做任何事情</li>\n<li><code>__bridge_retained</code> :（ObjC转CF的时候使用）编译器在bridge的时候retain对象，开发者需要在CF一端负责释放对象</li>\n<li><code>__bridge_transfer</code> :（CF转ObjC的时候使用）编译器转移CF对象的所有权，开发者不再需要在CF一端负责释放对象</li>\n</ul>"},{"_content":"# AFNetworking 相关 #\n\n## 网络通讯 ##\n建立一个`TCP`协议的连接通常需要三次\"握手\",断开一个`TCP`协议的连接需要四次\"挥手\"\n\n### 三次\"握手\" ###\n* 1.\"Client\"端(客户端)发送连接请求报文.\n* 2.\"Server\"端(服务端)接受连接后回复ACK(指令正确)报文,并为这次连接分配资源\n* 3.\"Client\"端(客户端)收到ACK报文后像\"Server\"端发送ACK(指令正确报文),并分配资源\n\n举个栗子:\n    A(客户端)和B(服务端)进行交易\n    A:\"我要的东西带来了么?\" (客户端向服务端请求)\n    B:\"天王盖地府,先对暗号\" (服务端给客户端一个回应,表示知道客户端要请求了,并且准备好了请求资源)\n    A:\"小鸡炖蘑菇\" (客户端给服务端一个回应,表示自己知道已经连接上服务端,并且知道服务端准备好了,且自己也准备好了)\n    接头完成,进行可以进行交易(连接成功)\n","source":"_posts/Untitled.md","raw":"# AFNetworking 相关 #\n\n## 网络通讯 ##\n建立一个`TCP`协议的连接通常需要三次\"握手\",断开一个`TCP`协议的连接需要四次\"挥手\"\n\n### 三次\"握手\" ###\n* 1.\"Client\"端(客户端)发送连接请求报文.\n* 2.\"Server\"端(服务端)接受连接后回复ACK(指令正确)报文,并为这次连接分配资源\n* 3.\"Client\"端(客户端)收到ACK报文后像\"Server\"端发送ACK(指令正确报文),并分配资源\n\n举个栗子:\n    A(客户端)和B(服务端)进行交易\n    A:\"我要的东西带来了么?\" (客户端向服务端请求)\n    B:\"天王盖地府,先对暗号\" (服务端给客户端一个回应,表示知道客户端要请求了,并且准备好了请求资源)\n    A:\"小鸡炖蘑菇\" (客户端给服务端一个回应,表示自己知道已经连接上服务端,并且知道服务端准备好了,且自己也准备好了)\n    接头完成,进行可以进行交易(连接成功)\n","slug":"Untitled","published":1,"date":"2017-03-28T09:49:52.000Z","updated":"2017-04-10T13:43:30.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnfk7vgb0007zb7uv9qv9b6p","content":"<h1 id=\"AFNetworking-相关\"><a href=\"#AFNetworking-相关\" class=\"headerlink\" title=\"AFNetworking 相关\"></a>AFNetworking 相关</h1><h2 id=\"网络通讯\"><a href=\"#网络通讯\" class=\"headerlink\" title=\"网络通讯\"></a>网络通讯</h2><p>建立一个<code>TCP</code>协议的连接通常需要三次”握手”,断开一个<code>TCP</code>协议的连接需要四次”挥手”</p>\n<h3 id=\"三次”握手”\"><a href=\"#三次”握手”\" class=\"headerlink\" title=\"三次”握手”\"></a>三次”握手”</h3><ul>\n<li>1.”Client”端(客户端)发送连接请求报文.</li>\n<li>2.”Server”端(服务端)接受连接后回复ACK(指令正确)报文,并为这次连接分配资源</li>\n<li>3.”Client”端(客户端)收到ACK报文后像”Server”端发送ACK(指令正确报文),并分配资源</li>\n</ul>\n<p>举个栗子:<br>    A(客户端)和B(服务端)进行交易<br>    A:”我要的东西带来了么?” (客户端向服务端请求)<br>    B:”天王盖地府,先对暗号” (服务端给客户端一个回应,表示知道客户端要请求了,并且准备好了请求资源)<br>    A:”小鸡炖蘑菇” (客户端给服务端一个回应,表示自己知道已经连接上服务端,并且知道服务端准备好了,且自己也准备好了)<br>    接头完成,进行可以进行交易(连接成功)</p>\n","excerpt":"","more":"<h1 id=\"AFNetworking-相关\"><a href=\"#AFNetworking-相关\" class=\"headerlink\" title=\"AFNetworking 相关\"></a>AFNetworking 相关</h1><h2 id=\"网络通讯\"><a href=\"#网络通讯\" class=\"headerlink\" title=\"网络通讯\"></a>网络通讯</h2><p>建立一个<code>TCP</code>协议的连接通常需要三次”握手”,断开一个<code>TCP</code>协议的连接需要四次”挥手”</p>\n<h3 id=\"三次”握手”\"><a href=\"#三次”握手”\" class=\"headerlink\" title=\"三次”握手”\"></a>三次”握手”</h3><ul>\n<li>1.”Client”端(客户端)发送连接请求报文.</li>\n<li>2.”Server”端(服务端)接受连接后回复ACK(指令正确)报文,并为这次连接分配资源</li>\n<li>3.”Client”端(客户端)收到ACK报文后像”Server”端发送ACK(指令正确报文),并分配资源</li>\n</ul>\n<p>举个栗子:<br>    A(客户端)和B(服务端)进行交易<br>    A:”我要的东西带来了么?” (客户端向服务端请求)<br>    B:”天王盖地府,先对暗号” (服务端给客户端一个回应,表示知道客户端要请求了,并且准备好了请求资源)<br>    A:”小鸡炖蘑菇” (客户端给服务端一个回应,表示自己知道已经连接上服务端,并且知道服务端准备好了,且自己也准备好了)<br>    接头完成,进行可以进行交易(连接成功)</p>\n"},{"title":"appium测试时候的那些事","date":"2017-01-11T03:10:12.000Z","_content":"\n# 遇到的问题 #\n\n## 1.org.openqa.selenium.WebDriverException: Method has not yet been implemented ##\n\n<!----- more ----->\n\n在使用appium跑java脚本的时候,如果出现异常,提示如上面显示的,说明你的appium安装出现了问题,具体原因是我的appium当时卸载的时候没有完全卸载干净,导致appium无法连接到WebDriverException\n\n解决方法: 卸载appium ,最好再使用清理工具如:cleanMyMac 清理一下残留文件,然后从新安装新的appium ,问题就可以解决,如果还不行,可以新建一个电脑账户,在新的账户中重新搭建appium也可以","source":"_posts/appium测试时候的那些事.md","raw":"---\ntitle: appium测试时候的那些事\ndate: 2017-01-11 11:10:12\ntags: appium\n---\n\n# 遇到的问题 #\n\n## 1.org.openqa.selenium.WebDriverException: Method has not yet been implemented ##\n\n<!----- more ----->\n\n在使用appium跑java脚本的时候,如果出现异常,提示如上面显示的,说明你的appium安装出现了问题,具体原因是我的appium当时卸载的时候没有完全卸载干净,导致appium无法连接到WebDriverException\n\n解决方法: 卸载appium ,最好再使用清理工具如:cleanMyMac 清理一下残留文件,然后从新安装新的appium ,问题就可以解决,如果还不行,可以新建一个电脑账户,在新的账户中重新搭建appium也可以","slug":"appium测试时候的那些事","published":1,"updated":"2017-02-16T03:20:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnfk7vgc0008zb7uqzdta94q","content":"<h1 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h1><h2 id=\"1-org-openqa-selenium-WebDriverException-Method-has-not-yet-been-implemented\"><a href=\"#1-org-openqa-selenium-WebDriverException-Method-has-not-yet-been-implemented\" class=\"headerlink\" title=\"1.org.openqa.selenium.WebDriverException: Method has not yet been implemented\"></a>1.org.openqa.selenium.WebDriverException: Method has not yet been implemented</h2><a id=\"more\"></a>\n<p>在使用appium跑java脚本的时候,如果出现异常,提示如上面显示的,说明你的appium安装出现了问题,具体原因是我的appium当时卸载的时候没有完全卸载干净,导致appium无法连接到WebDriverException</p>\n<p>解决方法: 卸载appium ,最好再使用清理工具如:cleanMyMac 清理一下残留文件,然后从新安装新的appium ,问题就可以解决,如果还不行,可以新建一个电脑账户,在新的账户中重新搭建appium也可以</p>\n","excerpt":"<h1 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h1><h2 id=\"1-org-openqa-selenium-WebDriverException-Method-has-not-yet-been-implemented\"><a href=\"#1-org-openqa-selenium-WebDriverException-Method-has-not-yet-been-implemented\" class=\"headerlink\" title=\"1.org.openqa.selenium.WebDriverException: Method has not yet been implemented\"></a>1.org.openqa.selenium.WebDriverException: Method has not yet been implemented</h2>","more":"<p>在使用appium跑java脚本的时候,如果出现异常,提示如上面显示的,说明你的appium安装出现了问题,具体原因是我的appium当时卸载的时候没有完全卸载干净,导致appium无法连接到WebDriverException</p>\n<p>解决方法: 卸载appium ,最好再使用清理工具如:cleanMyMac 清理一下残留文件,然后从新安装新的appium ,问题就可以解决,如果还不行,可以新建一个电脑账户,在新的账户中重新搭建appium也可以</p>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-01-11T02:34:00.000Z","updated":"2017-01-17T08:45:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnfk7vge000bzb7unoa65jel","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"读《iOS与OS X多线程和内存管理》——前言","date":"2017-01-11T03:10:12.000Z","_content":"\n# 前言 #\n\n  都说不会写部落格的程序猿不是好作家，本作家本来想着当一个小小的初级工程师，每天码码界面，终其一生就算了。\n谁知天有不测风云，人有祸福旦夕，那天在工程中多看了一眼别人的代码，顿时觉得自己的知识储备实在是太匮乏了。\n\n那么究竟是什么样的代码，居然有如此神奇的功效，闲话少叙，上代码：\n\n<!----- more ----->\n\n代码一：\n\n```mm\n@interface MyView ()\n\n@property (nonatomic, weak) UILabel *label;\n\n@end\n\n@implementation MyView\n{\nUILabel *label = [[UILabel alloc] init];\nlabel.font = [UIFont systemFontOfSize:14];\nlabel.textColor = [UIColor whiteColor];\nlabel.textAlignment = NSTextAlignmentCenter;\nlabel.text = @\"你好\";\n[self addSubview:label];\n_label = label;\n}\n@end\n```\n\n就是这么一段代码，如果要让楼主写 则是下面这样的\n\n代码二：\n\n```objectivec\n@interface MyView ()\n\n@property (nonatomic, strong) UILabel *label;\n\n@end\n\n@implementation MyView\n{\nself.label = [[UILabel alloc] init];\nself.label.font = [UIFont systemFontOfSize:14];\nself.label.textColor = [UIColor whiteColor];\nself.label.textAlignment = NSTextAlignmentCenter;\nself.label.text = @\"你好\";\n[self addSubview:self.label];\n}\n@end\n```\n\n当然你也可以直接用 ```_label``` 赋值，这里问题的重点不是set方法和成员变量的区别，而是我的属性\n用的是 ```strong``` 修饰而他的是使用 ```weak```修饰。\n\n本着不耻下问，虚心求教的态度我问了一下我同事，得到了这样的解答：\n\n代码一的属性使用的 ```weak``` 修饰，因为在 ```addSubview：``` 的时候 ```self``` 会强引用 ```label``` 对象 ```weak``` 修饰的成员变量 ```_label``` 弱引用着 ```label```对象\n\n代码二的属性使用 ```strong``` 修饰， 在 ```addSubview：``` 的时候 ```self``` 会强引用 ```label```对象 ```strong``` 修饰的成员变量 ```_label``` 也强引用着 ```label``` 对象\n\n第一种代码的好处是在 ```self```移除 ```label```的时候 ```label```对象就释放了。因为 ```label```只有一个 ```self```强引用着\n\n第二种代码在 ```self```移除```label```的时候```label```对象不会释放，因为还有个 ```_label```的变量强引用这 ```label```对象，\n只有在 ```self``` 释放的时候 ```label``` 对象才会释放。\n\n\n本人读书少，仔细一想确实是这么回事，用```weak```修饰，```label```对象只被 ```self```强引用，从view上移除后就可以释放，\n不用等到self释放的时候才释放，创建和释放都很合理(哪里创建哪里释放)。\n\n但是细思极恐，难道我多年来的开发经验是错误的么，用了n年的strong原来是个低效的使用方法。这时候我突然想到了一个面试题，\n那就是你真的了解属性修饰符的用法么？\n\n好吧我承认！我不了解，这就是我看这本书的原因。\n\n注：\n(1).上面的解释不一定是正确的.\n(2).小弟初来乍到要是有啥说的不对的地方希望各位大大不吝赐教。\n(3).要是你们有什么意见和建议，也可以随便吐槽。\n","source":"_posts/读《iOS与OS X多线程和内存管理》——前言.md","raw":"---\ntitle: 读《iOS与OS X多线程和内存管理》——前言\ndate: 2017-01-11 11:10:12\ntags: iOS\n---\n\n# 前言 #\n\n  都说不会写部落格的程序猿不是好作家，本作家本来想着当一个小小的初级工程师，每天码码界面，终其一生就算了。\n谁知天有不测风云，人有祸福旦夕，那天在工程中多看了一眼别人的代码，顿时觉得自己的知识储备实在是太匮乏了。\n\n那么究竟是什么样的代码，居然有如此神奇的功效，闲话少叙，上代码：\n\n<!----- more ----->\n\n代码一：\n\n```mm\n@interface MyView ()\n\n@property (nonatomic, weak) UILabel *label;\n\n@end\n\n@implementation MyView\n{\nUILabel *label = [[UILabel alloc] init];\nlabel.font = [UIFont systemFontOfSize:14];\nlabel.textColor = [UIColor whiteColor];\nlabel.textAlignment = NSTextAlignmentCenter;\nlabel.text = @\"你好\";\n[self addSubview:label];\n_label = label;\n}\n@end\n```\n\n就是这么一段代码，如果要让楼主写 则是下面这样的\n\n代码二：\n\n```objectivec\n@interface MyView ()\n\n@property (nonatomic, strong) UILabel *label;\n\n@end\n\n@implementation MyView\n{\nself.label = [[UILabel alloc] init];\nself.label.font = [UIFont systemFontOfSize:14];\nself.label.textColor = [UIColor whiteColor];\nself.label.textAlignment = NSTextAlignmentCenter;\nself.label.text = @\"你好\";\n[self addSubview:self.label];\n}\n@end\n```\n\n当然你也可以直接用 ```_label``` 赋值，这里问题的重点不是set方法和成员变量的区别，而是我的属性\n用的是 ```strong``` 修饰而他的是使用 ```weak```修饰。\n\n本着不耻下问，虚心求教的态度我问了一下我同事，得到了这样的解答：\n\n代码一的属性使用的 ```weak``` 修饰，因为在 ```addSubview：``` 的时候 ```self``` 会强引用 ```label``` 对象 ```weak``` 修饰的成员变量 ```_label``` 弱引用着 ```label```对象\n\n代码二的属性使用 ```strong``` 修饰， 在 ```addSubview：``` 的时候 ```self``` 会强引用 ```label```对象 ```strong``` 修饰的成员变量 ```_label``` 也强引用着 ```label``` 对象\n\n第一种代码的好处是在 ```self```移除 ```label```的时候 ```label```对象就释放了。因为 ```label```只有一个 ```self```强引用着\n\n第二种代码在 ```self```移除```label```的时候```label```对象不会释放，因为还有个 ```_label```的变量强引用这 ```label```对象，\n只有在 ```self``` 释放的时候 ```label``` 对象才会释放。\n\n\n本人读书少，仔细一想确实是这么回事，用```weak```修饰，```label```对象只被 ```self```强引用，从view上移除后就可以释放，\n不用等到self释放的时候才释放，创建和释放都很合理(哪里创建哪里释放)。\n\n但是细思极恐，难道我多年来的开发经验是错误的么，用了n年的strong原来是个低效的使用方法。这时候我突然想到了一个面试题，\n那就是你真的了解属性修饰符的用法么？\n\n好吧我承认！我不了解，这就是我看这本书的原因。\n\n注：\n(1).上面的解释不一定是正确的.\n(2).小弟初来乍到要是有啥说的不对的地方希望各位大大不吝赐教。\n(3).要是你们有什么意见和建议，也可以随便吐槽。\n","slug":"读《iOS与OS X多线程和内存管理》——前言","published":1,"updated":"2018-05-14T08:51:33.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnfk7vgh000czb7ul3c091ss","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>  都说不会写部落格的程序猿不是好作家，本作家本来想着当一个小小的初级工程师，每天码码界面，终其一生就算了。<br>谁知天有不测风云，人有祸福旦夕，那天在工程中多看了一眼别人的代码，顿时觉得自己的知识储备实在是太匮乏了。</p>\n<p>那么究竟是什么样的代码，居然有如此神奇的功效，闲话少叙，上代码：</p>\n<a id=\"more\"></a>\n<p>代码一：</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyView</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">weak</span>) <span class=\"built_in\">UILabel</span> *label;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyView</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"built_in\">UILabel</span> *label = [[<span class=\"built_in\">UILabel</span> alloc] init];</div><div class=\"line\">label.font = [<span class=\"built_in\">UIFont</span> systemFontOfSize:<span class=\"number\">14</span>];</div><div class=\"line\">label.textColor = [<span class=\"built_in\">UIColor</span> whiteColor];</div><div class=\"line\">label.textAlignment = <span class=\"built_in\">NSTextAlignmentCenter</span>;</div><div class=\"line\">label.text = <span class=\"string\">@\"你好\"</span>;</div><div class=\"line\">[<span class=\"keyword\">self</span> addSubview:label];</div><div class=\"line\">_label = label;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>就是这么一段代码，如果要让楼主写 则是下面这样的</p>\n<p>代码二：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyView</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UILabel</span> *label;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyView</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">self</span>.label = [[<span class=\"built_in\">UILabel</span> alloc] init];</div><div class=\"line\"><span class=\"keyword\">self</span>.label.font = [<span class=\"built_in\">UIFont</span> systemFontOfSize:<span class=\"number\">14</span>];</div><div class=\"line\"><span class=\"keyword\">self</span>.label.textColor = [<span class=\"built_in\">UIColor</span> whiteColor];</div><div class=\"line\"><span class=\"keyword\">self</span>.label.textAlignment = <span class=\"built_in\">NSTextAlignmentCenter</span>;</div><div class=\"line\"><span class=\"keyword\">self</span>.label.text = <span class=\"string\">@\"你好\"</span>;</div><div class=\"line\">[<span class=\"keyword\">self</span> addSubview:<span class=\"keyword\">self</span>.label];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>当然你也可以直接用 <code>_label</code> 赋值，这里问题的重点不是set方法和成员变量的区别，而是我的属性<br>用的是 <code>strong</code> 修饰而他的是使用 <code>weak</code>修饰。</p>\n<p>本着不耻下问，虚心求教的态度我问了一下我同事，得到了这样的解答：</p>\n<p>代码一的属性使用的 <code>weak</code> 修饰，因为在 <code>addSubview：</code> 的时候 <code>self</code> 会强引用 <code>label</code> 对象 <code>weak</code> 修饰的成员变量 <code>_label</code> 弱引用着 <code>label</code>对象</p>\n<p>代码二的属性使用 <code>strong</code> 修饰， 在 <code>addSubview：</code> 的时候 <code>self</code> 会强引用 <code>label</code>对象 <code>strong</code> 修饰的成员变量 <code>_label</code> 也强引用着 <code>label</code> 对象</p>\n<p>第一种代码的好处是在 <code>self</code>移除 <code>label</code>的时候 <code>label</code>对象就释放了。因为 <code>label</code>只有一个 <code>self</code>强引用着</p>\n<p>第二种代码在 <code>self</code>移除<code>label</code>的时候<code>label</code>对象不会释放，因为还有个 <code>_label</code>的变量强引用这 <code>label</code>对象，<br>只有在 <code>self</code> 释放的时候 <code>label</code> 对象才会释放。</p>\n<p>本人读书少，仔细一想确实是这么回事，用<code>weak</code>修饰，<code>label</code>对象只被 <code>self</code>强引用，从view上移除后就可以释放，<br>不用等到self释放的时候才释放，创建和释放都很合理(哪里创建哪里释放)。</p>\n<p>但是细思极恐，难道我多年来的开发经验是错误的么，用了n年的strong原来是个低效的使用方法。这时候我突然想到了一个面试题，<br>那就是你真的了解属性修饰符的用法么？</p>\n<p>好吧我承认！我不了解，这就是我看这本书的原因。</p>\n<p>注：<br>(1).上面的解释不一定是正确的.<br>(2).小弟初来乍到要是有啥说的不对的地方希望各位大大不吝赐教。<br>(3).要是你们有什么意见和建议，也可以随便吐槽。</p>\n","excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>  都说不会写部落格的程序猿不是好作家，本作家本来想着当一个小小的初级工程师，每天码码界面，终其一生就算了。<br>谁知天有不测风云，人有祸福旦夕，那天在工程中多看了一眼别人的代码，顿时觉得自己的知识储备实在是太匮乏了。</p>\n<p>那么究竟是什么样的代码，居然有如此神奇的功效，闲话少叙，上代码：</p>","more":"<p>代码一：</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyView</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">weak</span>) <span class=\"built_in\">UILabel</span> *label;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyView</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"built_in\">UILabel</span> *label = [[<span class=\"built_in\">UILabel</span> alloc] init];</div><div class=\"line\">label.font = [<span class=\"built_in\">UIFont</span> systemFontOfSize:<span class=\"number\">14</span>];</div><div class=\"line\">label.textColor = [<span class=\"built_in\">UIColor</span> whiteColor];</div><div class=\"line\">label.textAlignment = <span class=\"built_in\">NSTextAlignmentCenter</span>;</div><div class=\"line\">label.text = <span class=\"string\">@\"你好\"</span>;</div><div class=\"line\">[<span class=\"keyword\">self</span> addSubview:label];</div><div class=\"line\">_label = label;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>就是这么一段代码，如果要让楼主写 则是下面这样的</p>\n<p>代码二：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyView</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UILabel</span> *label;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyView</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">self</span>.label = [[<span class=\"built_in\">UILabel</span> alloc] init];</div><div class=\"line\"><span class=\"keyword\">self</span>.label.font = [<span class=\"built_in\">UIFont</span> systemFontOfSize:<span class=\"number\">14</span>];</div><div class=\"line\"><span class=\"keyword\">self</span>.label.textColor = [<span class=\"built_in\">UIColor</span> whiteColor];</div><div class=\"line\"><span class=\"keyword\">self</span>.label.textAlignment = <span class=\"built_in\">NSTextAlignmentCenter</span>;</div><div class=\"line\"><span class=\"keyword\">self</span>.label.text = <span class=\"string\">@\"你好\"</span>;</div><div class=\"line\">[<span class=\"keyword\">self</span> addSubview:<span class=\"keyword\">self</span>.label];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>当然你也可以直接用 <code>_label</code> 赋值，这里问题的重点不是set方法和成员变量的区别，而是我的属性<br>用的是 <code>strong</code> 修饰而他的是使用 <code>weak</code>修饰。</p>\n<p>本着不耻下问，虚心求教的态度我问了一下我同事，得到了这样的解答：</p>\n<p>代码一的属性使用的 <code>weak</code> 修饰，因为在 <code>addSubview：</code> 的时候 <code>self</code> 会强引用 <code>label</code> 对象 <code>weak</code> 修饰的成员变量 <code>_label</code> 弱引用着 <code>label</code>对象</p>\n<p>代码二的属性使用 <code>strong</code> 修饰， 在 <code>addSubview：</code> 的时候 <code>self</code> 会强引用 <code>label</code>对象 <code>strong</code> 修饰的成员变量 <code>_label</code> 也强引用着 <code>label</code> 对象</p>\n<p>第一种代码的好处是在 <code>self</code>移除 <code>label</code>的时候 <code>label</code>对象就释放了。因为 <code>label</code>只有一个 <code>self</code>强引用着</p>\n<p>第二种代码在 <code>self</code>移除<code>label</code>的时候<code>label</code>对象不会释放，因为还有个 <code>_label</code>的变量强引用这 <code>label</code>对象，<br>只有在 <code>self</code> 释放的时候 <code>label</code> 对象才会释放。</p>\n<p>本人读书少，仔细一想确实是这么回事，用<code>weak</code>修饰，<code>label</code>对象只被 <code>self</code>强引用，从view上移除后就可以释放，<br>不用等到self释放的时候才释放，创建和释放都很合理(哪里创建哪里释放)。</p>\n<p>但是细思极恐，难道我多年来的开发经验是错误的么，用了n年的strong原来是个低效的使用方法。这时候我突然想到了一个面试题，<br>那就是你真的了解属性修饰符的用法么？</p>\n<p>好吧我承认！我不了解，这就是我看这本书的原因。</p>\n<p>注：<br>(1).上面的解释不一定是正确的.<br>(2).小弟初来乍到要是有啥说的不对的地方希望各位大大不吝赐教。<br>(3).要是你们有什么意见和建议，也可以随便吐槽。</p>"},{"title":"Xcode8报错","date":"2017-03-31T03:02:30.000Z","_content":"\nXcode8 报错resource fork, Finder information, or similar detritus not allowed\n\n## 原因 ##\n\n这是因为Xcode8引进的新的安全机制, Code signing不允许app的bundle里面的文件有未知的文件系统扩展属性\n\n## 解决方法 ##\n在终端中输入 `xattr -lr <path_to_app_bundle>` 可以查看存在未知扩展属性的文件\n\n在终端中输入 `xattr -cr <path_to_app_bundle>` 可以移除所有未知的扩展属性\n\n然后清理Xcode 重新build 工程\n","source":"_posts/Xcode8 报错resource fork, Finder information, or similar detritus not allowed.md","raw":"---\ntitle: Xcode8报错\ndate: 2017-03-31 11:02:30\ntags: iOS\n---\n\nXcode8 报错resource fork, Finder information, or similar detritus not allowed\n\n## 原因 ##\n\n这是因为Xcode8引进的新的安全机制, Code signing不允许app的bundle里面的文件有未知的文件系统扩展属性\n\n## 解决方法 ##\n在终端中输入 `xattr -lr <path_to_app_bundle>` 可以查看存在未知扩展属性的文件\n\n在终端中输入 `xattr -cr <path_to_app_bundle>` 可以移除所有未知的扩展属性\n\n然后清理Xcode 重新build 工程\n","slug":"Xcode8 报错resource fork, Finder information, or similar detritus not allowed","published":1,"updated":"2017-04-05T12:16:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnfk7vgk000ezb7u9xt7x8ow","content":"<p>Xcode8 报错resource fork, Finder information, or similar detritus not allowed</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>这是因为Xcode8引进的新的安全机制, Code signing不允许app的bundle里面的文件有未知的文件系统扩展属性</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>在终端中输入 <code>xattr -lr &lt;path_to_app_bundle&gt;</code> 可以查看存在未知扩展属性的文件</p>\n<p>在终端中输入 <code>xattr -cr &lt;path_to_app_bundle&gt;</code> 可以移除所有未知的扩展属性</p>\n<p>然后清理Xcode 重新build 工程</p>\n","excerpt":"","more":"<p>Xcode8 报错resource fork, Finder information, or similar detritus not allowed</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>这是因为Xcode8引进的新的安全机制, Code signing不允许app的bundle里面的文件有未知的文件系统扩展属性</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>在终端中输入 <code>xattr -lr &lt;path_to_app_bundle&gt;</code> 可以查看存在未知扩展属性的文件</p>\n<p>在终端中输入 <code>xattr -cr &lt;path_to_app_bundle&gt;</code> 可以移除所有未知的扩展属性</p>\n<p>然后清理Xcode 重新build 工程</p>\n"},{"title":"my first blog","date":"2017-01-11T03:02:30.000Z","_content":"\n这就是传说中的第一个blog\n\n\n<!------ 查看全文 ------>\n\n\n#超级偶像\n\n<embed src=\"http://www.xiami.com/widget/52304397_1773753998/singlePlayer.swf\" type=\"application/x-shockwave-flash\" width=\"257\" height=\"33\" wmode=\"transparent\"></embed>\n","source":"_posts/my-first-blog.md","raw":"---\ntitle: my first blog\ndate: 2017-01-11 11:02:30\ntags: hello\n---\n\n这就是传说中的第一个blog\n\n\n<!------ 查看全文 ------>\n\n\n#超级偶像\n\n<embed src=\"http://www.xiami.com/widget/52304397_1773753998/singlePlayer.swf\" type=\"application/x-shockwave-flash\" width=\"257\" height=\"33\" wmode=\"transparent\"></embed>\n","slug":"my-first-blog","published":1,"updated":"2017-01-11T09:47:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnfk7vgn000gzb7u77oqg5ha","content":"<p>这就是传说中的第一个blog</p>\n<!------ 查看全文 ------>\n<p>#超级偶像</p>\n<embed src=\"http://www.xiami.com/widget/52304397_1773753998/singlePlayer.swf\" type=\"application/x-shockwave-flash\" width=\"257\" height=\"33\" wmode=\"transparent\">\n","excerpt":"","more":"<p>这就是传说中的第一个blog</p>\n<!------ 查看全文 ------>\n<p>#超级偶像</p>\n<embed src=\"http://www.xiami.com/widget/52304397_1773753998/singlePlayer.swf\" type=\"application/x-shockwave-flash\" width=\"257\" height=\"33\" wmode=\"transparent\"></embed>\n"},{"title":"iOS中的枚举","date":"2016-05-11T03:02:30.000Z","_content":"\n## 普通的枚举 ##\n\n### 第一种实现方式 ###\n\n```objectivec\ntypedef enum {\n    EnumTypeTop,\n    EnumTypeBottom\n}EnumType\n```\n\n### 第二种实现方式 ###\n\n```objectivec\ntypedef NS_ENUM(NSInteger,EnumType) {\n    EnumTypeTop,\n    EnumTypeBottom\n};\n```\n\n枚举的作用就是增加程序的可读性,将原来使用数值代表的状态转换成自然语言中有相应含义的单词,所以这样写出来的代码更易读懂。编译器会为枚举分配一个独有的编号,从0开始,每个枚举递增1\n\n<!----- more ----->\n\n## 移位枚举 ##\n\n### 实现方式 ###\n\n```objectivec\ntypedef NS_OPTIONS(NSUInteger, EnumType) {\n   EnumTypeNone  = 0,     // 0000 0000   0\n   EnumTypeTop    = 1<<0, // 0000 0001   1\n   EnumTypeBottom = 1<<1, // 0000 0010   2\n   EnumTypeLeft   = 1<<2, // 0000 0100   4\n   EnumTypeRight  = 1<<3, // 0000 1000   8\n   EnumTypeCenter = 1<<4, // 0001 0000   16\n   EnumTypeHeight = 1<<5, // 0010 0000   32\n   EnumTypeWidth  = 1<<6  // 0100 0000   64\n}\n```\n\n上面就是一个移位枚举, 和普通的枚举的区别就是,每个状态的值不是递增的,而是用只有1个二进制位的值是1数字表示的,这么做的好处就是可以对状态值进行\"位或\"运算,从而实现同时使用多个枚举\n\n\n```objectivec\n- (void)testEnum {\n    [self needMutEnum:EnumTypeTop | EnumTypeBottom | EnumTypeLeft | EnumTypeRight | EnumTypeCenter];\n}\n\n- (void)needMutEnum:(EnumType) type {\n    if (type==0) {\n      NSLog(@\"EnumTypeNone\");\n      return;\n    }\n    if (type & EnumTypeTop) {\n        NSLog(@\"EnumTypeTop\");\n    }\n    if (type & EnumTypeBottom) {\n        NSLog(@\"EnumTypeBottom\");\n    }\n    if (type & EnumTypeLeft) {\n        NSLog(@\"EnumTypeLeft\");\n\n    }\n    if (type & EnumTypeRight) {\n        NSLog(@\"EnumTypeRight\");\n\n    }\n    if (type & EnumTypeCenter) {\n        NSLog(@\"EnumTypeCenter\");\n\n    }\n    if (type & EnumTypeHeight) {\n        NSLog(@\"EnumTypeHeight\");\n\n    }\n    if (type & EnumTypeWidth) {\n        NSLog(@\"EnumTypeWidth\");\n    }\n}\n```\n\n输出\n\n```\nEnumTypeTop\nEnumTypeBottom\nEnumTypeLeft\nEnumTypeRight\nEnumTypeCenter\n```\n\n这样就实现了同时使用多个枚举\n\n#### 原因 ####\n\"位或\"和\"位与\"运算\n\"位或\": 0 | 0 = 0 ; 0 | 1 = 1 ; 1 | 1 = 1;\n\"位与\": 0 & 0 = 0 ; 0 & 1 = 0 ; 1 & 1 = 1;\n\n对移位枚举进行\"位或\"运算\n\nEnumTypeTop | EnumTypeBottom | EnumTypeLeft | EnumTypeRight | EnumTypeCenter 转换成二进制就是\n\n0000 0001 | 0000 0010 | 0000 0100 | 0000 1000 | 0010 0000 = 0011 1111  其10进制的值时63\n\n所以\"needMutEnum\"这个方法传入的值 ```type``` 是十进制的63,\n\n当使用的时候又用 ```type``` 的值和枚举做\"位与运算\",63的二进制是 0011 1111  \n\nEnumTypeTop的二进制是 0000 0001 ,\"位与\"运算的结果就是 0000 0001 ,\n\n也就是说传入的 ```type``` 的值转换成二进制,哪个位上是 ```1``` ,对应的那个类型的枚举就被传入了,\n\n但是要注意的是,如果不需要None的状态,就不要把第一个枚举状态设置成 ```0``` ,直接从0000 0001 设置\n","source":"_posts/枚举的实现方式(移位枚举).md","raw":"---\ntitle: iOS中的枚举\ndate: 2016-05-11 11:02:30\ntags: iOS\n---\n\n## 普通的枚举 ##\n\n### 第一种实现方式 ###\n\n```objectivec\ntypedef enum {\n    EnumTypeTop,\n    EnumTypeBottom\n}EnumType\n```\n\n### 第二种实现方式 ###\n\n```objectivec\ntypedef NS_ENUM(NSInteger,EnumType) {\n    EnumTypeTop,\n    EnumTypeBottom\n};\n```\n\n枚举的作用就是增加程序的可读性,将原来使用数值代表的状态转换成自然语言中有相应含义的单词,所以这样写出来的代码更易读懂。编译器会为枚举分配一个独有的编号,从0开始,每个枚举递增1\n\n<!----- more ----->\n\n## 移位枚举 ##\n\n### 实现方式 ###\n\n```objectivec\ntypedef NS_OPTIONS(NSUInteger, EnumType) {\n   EnumTypeNone  = 0,     // 0000 0000   0\n   EnumTypeTop    = 1<<0, // 0000 0001   1\n   EnumTypeBottom = 1<<1, // 0000 0010   2\n   EnumTypeLeft   = 1<<2, // 0000 0100   4\n   EnumTypeRight  = 1<<3, // 0000 1000   8\n   EnumTypeCenter = 1<<4, // 0001 0000   16\n   EnumTypeHeight = 1<<5, // 0010 0000   32\n   EnumTypeWidth  = 1<<6  // 0100 0000   64\n}\n```\n\n上面就是一个移位枚举, 和普通的枚举的区别就是,每个状态的值不是递增的,而是用只有1个二进制位的值是1数字表示的,这么做的好处就是可以对状态值进行\"位或\"运算,从而实现同时使用多个枚举\n\n\n```objectivec\n- (void)testEnum {\n    [self needMutEnum:EnumTypeTop | EnumTypeBottom | EnumTypeLeft | EnumTypeRight | EnumTypeCenter];\n}\n\n- (void)needMutEnum:(EnumType) type {\n    if (type==0) {\n      NSLog(@\"EnumTypeNone\");\n      return;\n    }\n    if (type & EnumTypeTop) {\n        NSLog(@\"EnumTypeTop\");\n    }\n    if (type & EnumTypeBottom) {\n        NSLog(@\"EnumTypeBottom\");\n    }\n    if (type & EnumTypeLeft) {\n        NSLog(@\"EnumTypeLeft\");\n\n    }\n    if (type & EnumTypeRight) {\n        NSLog(@\"EnumTypeRight\");\n\n    }\n    if (type & EnumTypeCenter) {\n        NSLog(@\"EnumTypeCenter\");\n\n    }\n    if (type & EnumTypeHeight) {\n        NSLog(@\"EnumTypeHeight\");\n\n    }\n    if (type & EnumTypeWidth) {\n        NSLog(@\"EnumTypeWidth\");\n    }\n}\n```\n\n输出\n\n```\nEnumTypeTop\nEnumTypeBottom\nEnumTypeLeft\nEnumTypeRight\nEnumTypeCenter\n```\n\n这样就实现了同时使用多个枚举\n\n#### 原因 ####\n\"位或\"和\"位与\"运算\n\"位或\": 0 | 0 = 0 ; 0 | 1 = 1 ; 1 | 1 = 1;\n\"位与\": 0 & 0 = 0 ; 0 & 1 = 0 ; 1 & 1 = 1;\n\n对移位枚举进行\"位或\"运算\n\nEnumTypeTop | EnumTypeBottom | EnumTypeLeft | EnumTypeRight | EnumTypeCenter 转换成二进制就是\n\n0000 0001 | 0000 0010 | 0000 0100 | 0000 1000 | 0010 0000 = 0011 1111  其10进制的值时63\n\n所以\"needMutEnum\"这个方法传入的值 ```type``` 是十进制的63,\n\n当使用的时候又用 ```type``` 的值和枚举做\"位与运算\",63的二进制是 0011 1111  \n\nEnumTypeTop的二进制是 0000 0001 ,\"位与\"运算的结果就是 0000 0001 ,\n\n也就是说传入的 ```type``` 的值转换成二进制,哪个位上是 ```1``` ,对应的那个类型的枚举就被传入了,\n\n但是要注意的是,如果不需要None的状态,就不要把第一个枚举状态设置成 ```0``` ,直接从0000 0001 设置\n","slug":"枚举的实现方式(移位枚举)","published":1,"updated":"2017-03-30T09:26:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnfk7vgp000jzb7uwyqwyo1n","content":"<h2 id=\"普通的枚举\"><a href=\"#普通的枚举\" class=\"headerlink\" title=\"普通的枚举\"></a>普通的枚举</h2><h3 id=\"第一种实现方式\"><a href=\"#第一种实现方式\" class=\"headerlink\" title=\"第一种实现方式\"></a>第一种实现方式</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> &#123;</div><div class=\"line\">    EnumTypeTop,</div><div class=\"line\">    EnumTypeBottom</div><div class=\"line\">&#125;EnumType</div></pre></td></tr></table></figure>\n<h3 id=\"第二种实现方式\"><a href=\"#第二种实现方式\" class=\"headerlink\" title=\"第二种实现方式\"></a>第二种实现方式</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_ENUM</span>(<span class=\"built_in\">NSInteger</span>,EnumType) &#123;</div><div class=\"line\">    EnumTypeTop,</div><div class=\"line\">    EnumTypeBottom</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>枚举的作用就是增加程序的可读性,将原来使用数值代表的状态转换成自然语言中有相应含义的单词,所以这样写出来的代码更易读懂。编译器会为枚举分配一个独有的编号,从0开始,每个枚举递增1</p>\n<a id=\"more\"></a>\n<h2 id=\"移位枚举\"><a href=\"#移位枚举\" class=\"headerlink\" title=\"移位枚举\"></a>移位枚举</h2><h3 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_OPTIONS</span>(<span class=\"built_in\">NSUInteger</span>, EnumType) &#123;</div><div class=\"line\">   EnumTypeNone  = <span class=\"number\">0</span>,     <span class=\"comment\">// 0000 0000   0</span></div><div class=\"line\">   EnumTypeTop    = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">0</span>, <span class=\"comment\">// 0000 0001   1</span></div><div class=\"line\">   EnumTypeBottom = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">1</span>, <span class=\"comment\">// 0000 0010   2</span></div><div class=\"line\">   EnumTypeLeft   = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">2</span>, <span class=\"comment\">// 0000 0100   4</span></div><div class=\"line\">   EnumTypeRight  = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">3</span>, <span class=\"comment\">// 0000 1000   8</span></div><div class=\"line\">   EnumTypeCenter = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">4</span>, <span class=\"comment\">// 0001 0000   16</span></div><div class=\"line\">   EnumTypeHeight = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">5</span>, <span class=\"comment\">// 0010 0000   32</span></div><div class=\"line\">   EnumTypeWidth  = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">6</span>  <span class=\"comment\">// 0100 0000   64</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面就是一个移位枚举, 和普通的枚举的区别就是,每个状态的值不是递增的,而是用只有1个二进制位的值是1数字表示的,这么做的好处就是可以对状态值进行”位或”运算,从而实现同时使用多个枚举</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)testEnum &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> needMutEnum:EnumTypeTop | EnumTypeBottom | EnumTypeLeft | EnumTypeRight | EnumTypeCenter];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)needMutEnum:(EnumType) type &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type==<span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeNone\"</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeTop) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeTop\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeBottom) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeBottom\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeLeft) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeLeft\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeRight) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeRight\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeCenter) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeCenter\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeHeight) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeHeight\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeWidth) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeWidth\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">EnumTypeTop</div><div class=\"line\">EnumTypeBottom</div><div class=\"line\">EnumTypeLeft</div><div class=\"line\">EnumTypeRight</div><div class=\"line\">EnumTypeCenter</div></pre></td></tr></table></figure>\n<p>这样就实现了同时使用多个枚举</p>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>“位或”和”位与”运算<br>“位或”: 0 | 0 = 0 ; 0 | 1 = 1 ; 1 | 1 = 1;<br>“位与”: 0 &amp; 0 = 0 ; 0 &amp; 1 = 0 ; 1 &amp; 1 = 1;</p>\n<p>对移位枚举进行”位或”运算</p>\n<p>EnumTypeTop | EnumTypeBottom | EnumTypeLeft | EnumTypeRight | EnumTypeCenter 转换成二进制就是</p>\n<p>0000 0001 | 0000 0010 | 0000 0100 | 0000 1000 | 0010 0000 = 0011 1111  其10进制的值时63</p>\n<p>所以”needMutEnum”这个方法传入的值 <code>type</code> 是十进制的63,</p>\n<p>当使用的时候又用 <code>type</code> 的值和枚举做”位与运算”,63的二进制是 0011 1111  </p>\n<p>EnumTypeTop的二进制是 0000 0001 ,”位与”运算的结果就是 0000 0001 ,</p>\n<p>也就是说传入的 <code>type</code> 的值转换成二进制,哪个位上是 <code>1</code> ,对应的那个类型的枚举就被传入了,</p>\n<p>但是要注意的是,如果不需要None的状态,就不要把第一个枚举状态设置成 <code>0</code> ,直接从0000 0001 设置</p>\n","excerpt":"<h2 id=\"普通的枚举\"><a href=\"#普通的枚举\" class=\"headerlink\" title=\"普通的枚举\"></a>普通的枚举</h2><h3 id=\"第一种实现方式\"><a href=\"#第一种实现方式\" class=\"headerlink\" title=\"第一种实现方式\"></a>第一种实现方式</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> &#123;</div><div class=\"line\">    EnumTypeTop,</div><div class=\"line\">    EnumTypeBottom</div><div class=\"line\">&#125;EnumType</div></pre></td></tr></table></figure>\n<h3 id=\"第二种实现方式\"><a href=\"#第二种实现方式\" class=\"headerlink\" title=\"第二种实现方式\"></a>第二种实现方式</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_ENUM</span>(<span class=\"built_in\">NSInteger</span>,EnumType) &#123;</div><div class=\"line\">    EnumTypeTop,</div><div class=\"line\">    EnumTypeBottom</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>枚举的作用就是增加程序的可读性,将原来使用数值代表的状态转换成自然语言中有相应含义的单词,所以这样写出来的代码更易读懂。编译器会为枚举分配一个独有的编号,从0开始,每个枚举递增1</p>","more":"<h2 id=\"移位枚举\"><a href=\"#移位枚举\" class=\"headerlink\" title=\"移位枚举\"></a>移位枚举</h2><h3 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_OPTIONS</span>(<span class=\"built_in\">NSUInteger</span>, EnumType) &#123;</div><div class=\"line\">   EnumTypeNone  = <span class=\"number\">0</span>,     <span class=\"comment\">// 0000 0000   0</span></div><div class=\"line\">   EnumTypeTop    = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">0</span>, <span class=\"comment\">// 0000 0001   1</span></div><div class=\"line\">   EnumTypeBottom = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">1</span>, <span class=\"comment\">// 0000 0010   2</span></div><div class=\"line\">   EnumTypeLeft   = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">2</span>, <span class=\"comment\">// 0000 0100   4</span></div><div class=\"line\">   EnumTypeRight  = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">3</span>, <span class=\"comment\">// 0000 1000   8</span></div><div class=\"line\">   EnumTypeCenter = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">4</span>, <span class=\"comment\">// 0001 0000   16</span></div><div class=\"line\">   EnumTypeHeight = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">5</span>, <span class=\"comment\">// 0010 0000   32</span></div><div class=\"line\">   EnumTypeWidth  = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">6</span>  <span class=\"comment\">// 0100 0000   64</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面就是一个移位枚举, 和普通的枚举的区别就是,每个状态的值不是递增的,而是用只有1个二进制位的值是1数字表示的,这么做的好处就是可以对状态值进行”位或”运算,从而实现同时使用多个枚举</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)testEnum &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> needMutEnum:EnumTypeTop | EnumTypeBottom | EnumTypeLeft | EnumTypeRight | EnumTypeCenter];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)needMutEnum:(EnumType) type &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type==<span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeNone\"</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeTop) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeTop\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeBottom) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeBottom\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeLeft) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeLeft\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeRight) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeRight\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeCenter) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeCenter\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeHeight) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeHeight\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeWidth) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeWidth\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">EnumTypeTop</div><div class=\"line\">EnumTypeBottom</div><div class=\"line\">EnumTypeLeft</div><div class=\"line\">EnumTypeRight</div><div class=\"line\">EnumTypeCenter</div></pre></td></tr></table></figure>\n<p>这样就实现了同时使用多个枚举</p>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>“位或”和”位与”运算<br>“位或”: 0 | 0 = 0 ; 0 | 1 = 1 ; 1 | 1 = 1;<br>“位与”: 0 &amp; 0 = 0 ; 0 &amp; 1 = 0 ; 1 &amp; 1 = 1;</p>\n<p>对移位枚举进行”位或”运算</p>\n<p>EnumTypeTop | EnumTypeBottom | EnumTypeLeft | EnumTypeRight | EnumTypeCenter 转换成二进制就是</p>\n<p>0000 0001 | 0000 0010 | 0000 0100 | 0000 1000 | 0010 0000 = 0011 1111  其10进制的值时63</p>\n<p>所以”needMutEnum”这个方法传入的值 <code>type</code> 是十进制的63,</p>\n<p>当使用的时候又用 <code>type</code> 的值和枚举做”位与运算”,63的二进制是 0011 1111  </p>\n<p>EnumTypeTop的二进制是 0000 0001 ,”位与”运算的结果就是 0000 0001 ,</p>\n<p>也就是说传入的 <code>type</code> 的值转换成二进制,哪个位上是 <code>1</code> ,对应的那个类型的枚举就被传入了,</p>\n<p>但是要注意的是,如果不需要None的状态,就不要把第一个枚举状态设置成 <code>0</code> ,直接从0000 0001 设置</p>"},{"title":"读《iOS与OS X多线程和内存管理》——引用计数","date":"2017-01-11T03:10:12.000Z","_content":"\n## 1. 什么是自动引用计数(ARC) ##\n\nARC简而言之就是编译器自动进行内存管理，那为什么不叫\"自动内存管理\"，而叫\"自动引用计数\"，当然是因为内存管理是的方法是通过引用计数实现的\n\n要说自动引用计数，首先要说什么是\"引用计数\"\n\n### 1.1引用计数 ###\n\n什么是引用计数，书中举了一个生活中开关房间灯的例子。\n\n简单的描述一下就是，第一个人来的时候要开灯(创建对象)，最后一个人走的时候要关灯(释放对象)，中间来人走人都不需要开关灯。\n那么办公室里的人数就是引用计数。\n\n### 1.2内存管理的思考方式 ###\n\n内存管理的思考方式总结出来就是下面四点  \n\n注：这里还没到ARC所以还是非ARC\n\n1.自己生成的对象，自己所持有 (指通过```alloc/new/copy/mutableCopy```等创建的对象)\neg:\n\n```mm\nid obj = [NSObject new];\n```\n\n2.非自己生成的对象，自己也能持有 (指持有通过类方法创建的对象)\neg:\n\n```mm\nid obj = [NSArray array];\n[obj retain];\n```\n\n3.不再需要自己持有的对象时释放  (释放对象)\neg:\n\n```mm\nid obj = [[NSObject alloc] init];\n[obj release];  \n```\n4.非自己持有的对象无法释放  (多次释放，或未持有释放）\neg:\n\n```mm\nid obj = [[NSObject alloc] init];\n[obj release];\n[obj release];\n```\n\n\n对象的操作与Objective-C方法的对应\n生成并持有对象------ alloc/new/copy/mutableCopy 等\n持有对象----------- retain\n释放对象----------- release\n废弃对象----------- dealloc\n\n\n## 2.alloc/retain/release/dealloc 实现 ##\n\n书中这个节研究的是alloc/retain/release/dealloc的实现。\n\n讲之前先说一个我不知道的常识，那就是Objective-C的框架，底层的是一个叫Cocoa框架其中包含一个Foundation框架\n\n首先Objective-C内存管理的方法是包含在Cocoa框架中的，这里所说的内存管理是的方法alloc/retain/release/dealloc 指的是 NSObject类的alloc类方法,retain实例方法,release实例方法和dealloc实例方法，但是NSObject类的 Foundation``` 框架没有公开过源码，所以这里使用开源软件GNUstep的框架，一个能和Cocoa框架互换的框架，来理解苹果Cocoa框架的实现。\n\n这里我把代码给大家写出来，供大家参考，但书的作者把有些地方的源码在不改变意思的范围进行了修改\n\n### 2.1 alloc 实现 ###\n\nGNUstep的```alloc```实现：\n\n\n```mm\n+(id)alloc\n{\n    return [self allocWithZone:NSDefaultMallocZone()];\n}\n\n+ (id)allocWithZone:(NSZone *)z\n{\n    return NSAllocateObject (self, 0, z);\n}\n\n/* ------- NSAllocateObject ------- */\nstruct obj_layout {\n    NSUInteger retained;\n};\n\ninline id NSAllocateObject (Class aClass, NSUInteger extraBytes, NSZone *zone)\n{\n    int size = 计算容纳对象所需内存大小；\n    id new = NSZoneMalloc(zone,size);\n    memset(new, 0, size);\n    new = (id)&((struct obj_layout *) new)[1];\n}\n\n/* ----- 简化版alloc ----- */\n+ alloc\n{\n    int size = sizeof(struct obj_layout) + 对象大小;\n    struct obj_layout *p = (struct obj_layout *)calloc(1,size);\n    return(id)(p+1);\n}\n```\n\n简化版的是去掉了 ```NSZone``` 之后的代码，```NSZone``` 是为了防止内存碎片化引入的结构，对内存管理没有影响，所以可以忽略。从简化版的代码中可以看出 ```GNUstep``` 申请的对象的内存比需要的大了 ```sizeof(struct obj_layout)```，这个多出来的空间就是用来存放引用计数的\n\n在非ARC即MRC中是可以通过 ```retainCount``` 查看对象的引用计数的。\n\nretainCount的实现:\n\n```mm\n- (NSUInteger)retainCount\n{\n    return NSExtraRefCount(self) + 1;\n}\n\ninline NSUInteger NSExtraRefCount(id anObject)\n{\n    return((struct obj_layout *) anObject)[-1].retained;\n}\n```\n\n### 2.2 retain 实现 ###\n\nGNUstep的 ```retain``` 实现：\n\n```mm\n- (id)retain\n{\n    NSIncrementExtraRefCount(self);\n    return self;\n}\n\ninline void NSIncrementExtraRefCount(id anObject)\n{\n    if(((struct obj_layout *)anObject)[-1].retained == UINT_MAX -1)\n        抛出异常\n    ((struct obj_layout *)anObject)[-1].retained++;\n}\n```\n\n### 2.3 release 实现 ###\nGNUstep的 ```release``` 实现：\n\n```mm\n- (void)release\n{\n    if(NSDecrementExtraRefCountWasZero(self))\n        [self dealloc];\n}\n\nBOOL NSDecrementExtraRefCountWasZero(id anObject)\n{\n    if(((struct obj_layout *)anObject)[-1].retained == 0){\n        return YES;\n    }else {\n        ((struct obj_layout *)anObject)[-1].retained--;\n        return NO;\n    }\n}\n```\n\n### 2.4dealloc 实现 ###\nGNUstep的```dealloc```实现：\n\n```mm\n- (void)dealloc\n{\n    NSDeallocateObject(self);\n}\n\ninline void NSDeallocateObject(id anObject)\n{\n    struct obj_layout *o = &((struct obj_layout *) anObject)[-1];\n    free(o);\n}\n```\n\n可以看到 ```GNUstep``` 实现引用计数的方法是在变量在内存块头部保存的当前对象的引用计数，默认是0，当调用 ```retainCount``` 时会自动+1，这就说明了自己生成的对象，自己所持有。\n\n\n### 2.5 苹果实现 ###\n苹果由于官方未公开源代码，根据运行时调用的代码可以看出苹果实现引用计数和 ```GNUsetp``` 的主要区别就是 ```GNUsetp``` 将引用计数存放在内存块头，而苹果使用的是散列表（键为内存块地址的散列值）\n\n存放在头部管理引用计数的好处：\n- 代码量少\n- 能够统一管理引用计数用内存块和对象用内存块\n\n用散列表(引用计数表)管理引用计数的好处：\n- 对象用内存块的分配无需考虑内存块头部\n- 引用计数表各记录中存有内存块地址，可从各个记录追溯到各对象的内存块\n\n\n### autorelease ###\n所谓 ```autorelease``` 就是自动释放，原理就是若某自动变量超出其作用域，该自动变量将被自动废弃\n\nGNUstep的 ```autorelease``` 实现：\n\n\n```mm\n- (id)autorelease\n{\n    [NSAutoreleasePool addObject:self];\n}\n\n+ (void) addObject:(id)anObj\n{\n    NSAutoreleasePool *pool = 取得当前NSAutoreleasePool对象\n    if(pool != nil) {\n        [pool addObject:anObj];\n    }else {\n        NSLog(@\"NSAutoreleasePool对象非存在状态下调用autorelease\")；\n    }\n}\n```\n\n废弃 ```NSAutoreleasePool``` 方法 ``` drain``` 实现\n\n\n```mm\n- (void)drain\n{\n    [self dealloc];\n}\n\n- (void)dealloc\n{\n    [self emptyPool];\n    [array release];\n}\n\n- (void)emptyPool\n{\n    for(id obj in array) {\n        [obj release];\n    }\n}\n```\n\n查看 ```AutoreleasePool``` 中的内容\n\n```mm\n[NSAutoreleasePool showPools];//此方法只能在iOS中使用\n```\n在运行时系统中调用方法\n\n```mm\n/* 函数声明 */\nextern void _objc_autoreleasePoolPrint();\n\n/* 调试处调用 */\n_objc_autoreleasePoolPrint();\n```\n\n注：\n(1).上面的内容全部是本人读《Objective-C高级编程 iOS与OS X多线程和内存管理》一书觉得重点的部分，如果大家感兴趣可以支持一下正版。\n(2).如果各位看官觉得有什么事小弟说的不对的地方，欢迎指出。\n(3).这篇基本上都是说引用计数的实现的，还没有涉及到前言提出的问题的解答。\n(4).看到这里的都是真爱啊。\n","source":"_posts/读《iOS与OS X多线程和内存管理》——引用计数.md","raw":"---\ntitle: 读《iOS与OS X多线程和内存管理》——引用计数\ndate: 2017-01-11 11:10:12\ntags: iOS\n---\n\n## 1. 什么是自动引用计数(ARC) ##\n\nARC简而言之就是编译器自动进行内存管理，那为什么不叫\"自动内存管理\"，而叫\"自动引用计数\"，当然是因为内存管理是的方法是通过引用计数实现的\n\n要说自动引用计数，首先要说什么是\"引用计数\"\n\n### 1.1引用计数 ###\n\n什么是引用计数，书中举了一个生活中开关房间灯的例子。\n\n简单的描述一下就是，第一个人来的时候要开灯(创建对象)，最后一个人走的时候要关灯(释放对象)，中间来人走人都不需要开关灯。\n那么办公室里的人数就是引用计数。\n\n### 1.2内存管理的思考方式 ###\n\n内存管理的思考方式总结出来就是下面四点  \n\n注：这里还没到ARC所以还是非ARC\n\n1.自己生成的对象，自己所持有 (指通过```alloc/new/copy/mutableCopy```等创建的对象)\neg:\n\n```mm\nid obj = [NSObject new];\n```\n\n2.非自己生成的对象，自己也能持有 (指持有通过类方法创建的对象)\neg:\n\n```mm\nid obj = [NSArray array];\n[obj retain];\n```\n\n3.不再需要自己持有的对象时释放  (释放对象)\neg:\n\n```mm\nid obj = [[NSObject alloc] init];\n[obj release];  \n```\n4.非自己持有的对象无法释放  (多次释放，或未持有释放）\neg:\n\n```mm\nid obj = [[NSObject alloc] init];\n[obj release];\n[obj release];\n```\n\n\n对象的操作与Objective-C方法的对应\n生成并持有对象------ alloc/new/copy/mutableCopy 等\n持有对象----------- retain\n释放对象----------- release\n废弃对象----------- dealloc\n\n\n## 2.alloc/retain/release/dealloc 实现 ##\n\n书中这个节研究的是alloc/retain/release/dealloc的实现。\n\n讲之前先说一个我不知道的常识，那就是Objective-C的框架，底层的是一个叫Cocoa框架其中包含一个Foundation框架\n\n首先Objective-C内存管理的方法是包含在Cocoa框架中的，这里所说的内存管理是的方法alloc/retain/release/dealloc 指的是 NSObject类的alloc类方法,retain实例方法,release实例方法和dealloc实例方法，但是NSObject类的 Foundation``` 框架没有公开过源码，所以这里使用开源软件GNUstep的框架，一个能和Cocoa框架互换的框架，来理解苹果Cocoa框架的实现。\n\n这里我把代码给大家写出来，供大家参考，但书的作者把有些地方的源码在不改变意思的范围进行了修改\n\n### 2.1 alloc 实现 ###\n\nGNUstep的```alloc```实现：\n\n\n```mm\n+(id)alloc\n{\n    return [self allocWithZone:NSDefaultMallocZone()];\n}\n\n+ (id)allocWithZone:(NSZone *)z\n{\n    return NSAllocateObject (self, 0, z);\n}\n\n/* ------- NSAllocateObject ------- */\nstruct obj_layout {\n    NSUInteger retained;\n};\n\ninline id NSAllocateObject (Class aClass, NSUInteger extraBytes, NSZone *zone)\n{\n    int size = 计算容纳对象所需内存大小；\n    id new = NSZoneMalloc(zone,size);\n    memset(new, 0, size);\n    new = (id)&((struct obj_layout *) new)[1];\n}\n\n/* ----- 简化版alloc ----- */\n+ alloc\n{\n    int size = sizeof(struct obj_layout) + 对象大小;\n    struct obj_layout *p = (struct obj_layout *)calloc(1,size);\n    return(id)(p+1);\n}\n```\n\n简化版的是去掉了 ```NSZone``` 之后的代码，```NSZone``` 是为了防止内存碎片化引入的结构，对内存管理没有影响，所以可以忽略。从简化版的代码中可以看出 ```GNUstep``` 申请的对象的内存比需要的大了 ```sizeof(struct obj_layout)```，这个多出来的空间就是用来存放引用计数的\n\n在非ARC即MRC中是可以通过 ```retainCount``` 查看对象的引用计数的。\n\nretainCount的实现:\n\n```mm\n- (NSUInteger)retainCount\n{\n    return NSExtraRefCount(self) + 1;\n}\n\ninline NSUInteger NSExtraRefCount(id anObject)\n{\n    return((struct obj_layout *) anObject)[-1].retained;\n}\n```\n\n### 2.2 retain 实现 ###\n\nGNUstep的 ```retain``` 实现：\n\n```mm\n- (id)retain\n{\n    NSIncrementExtraRefCount(self);\n    return self;\n}\n\ninline void NSIncrementExtraRefCount(id anObject)\n{\n    if(((struct obj_layout *)anObject)[-1].retained == UINT_MAX -1)\n        抛出异常\n    ((struct obj_layout *)anObject)[-1].retained++;\n}\n```\n\n### 2.3 release 实现 ###\nGNUstep的 ```release``` 实现：\n\n```mm\n- (void)release\n{\n    if(NSDecrementExtraRefCountWasZero(self))\n        [self dealloc];\n}\n\nBOOL NSDecrementExtraRefCountWasZero(id anObject)\n{\n    if(((struct obj_layout *)anObject)[-1].retained == 0){\n        return YES;\n    }else {\n        ((struct obj_layout *)anObject)[-1].retained--;\n        return NO;\n    }\n}\n```\n\n### 2.4dealloc 实现 ###\nGNUstep的```dealloc```实现：\n\n```mm\n- (void)dealloc\n{\n    NSDeallocateObject(self);\n}\n\ninline void NSDeallocateObject(id anObject)\n{\n    struct obj_layout *o = &((struct obj_layout *) anObject)[-1];\n    free(o);\n}\n```\n\n可以看到 ```GNUstep``` 实现引用计数的方法是在变量在内存块头部保存的当前对象的引用计数，默认是0，当调用 ```retainCount``` 时会自动+1，这就说明了自己生成的对象，自己所持有。\n\n\n### 2.5 苹果实现 ###\n苹果由于官方未公开源代码，根据运行时调用的代码可以看出苹果实现引用计数和 ```GNUsetp``` 的主要区别就是 ```GNUsetp``` 将引用计数存放在内存块头，而苹果使用的是散列表（键为内存块地址的散列值）\n\n存放在头部管理引用计数的好处：\n- 代码量少\n- 能够统一管理引用计数用内存块和对象用内存块\n\n用散列表(引用计数表)管理引用计数的好处：\n- 对象用内存块的分配无需考虑内存块头部\n- 引用计数表各记录中存有内存块地址，可从各个记录追溯到各对象的内存块\n\n\n### autorelease ###\n所谓 ```autorelease``` 就是自动释放，原理就是若某自动变量超出其作用域，该自动变量将被自动废弃\n\nGNUstep的 ```autorelease``` 实现：\n\n\n```mm\n- (id)autorelease\n{\n    [NSAutoreleasePool addObject:self];\n}\n\n+ (void) addObject:(id)anObj\n{\n    NSAutoreleasePool *pool = 取得当前NSAutoreleasePool对象\n    if(pool != nil) {\n        [pool addObject:anObj];\n    }else {\n        NSLog(@\"NSAutoreleasePool对象非存在状态下调用autorelease\")；\n    }\n}\n```\n\n废弃 ```NSAutoreleasePool``` 方法 ``` drain``` 实现\n\n\n```mm\n- (void)drain\n{\n    [self dealloc];\n}\n\n- (void)dealloc\n{\n    [self emptyPool];\n    [array release];\n}\n\n- (void)emptyPool\n{\n    for(id obj in array) {\n        [obj release];\n    }\n}\n```\n\n查看 ```AutoreleasePool``` 中的内容\n\n```mm\n[NSAutoreleasePool showPools];//此方法只能在iOS中使用\n```\n在运行时系统中调用方法\n\n```mm\n/* 函数声明 */\nextern void _objc_autoreleasePoolPrint();\n\n/* 调试处调用 */\n_objc_autoreleasePoolPrint();\n```\n\n注：\n(1).上面的内容全部是本人读《Objective-C高级编程 iOS与OS X多线程和内存管理》一书觉得重点的部分，如果大家感兴趣可以支持一下正版。\n(2).如果各位看官觉得有什么事小弟说的不对的地方，欢迎指出。\n(3).这篇基本上都是说引用计数的实现的，还没有涉及到前言提出的问题的解答。\n(4).看到这里的都是真爱啊。\n","slug":"读《iOS与OS X多线程和内存管理》——引用计数","published":1,"updated":"2018-06-06T12:11:39.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnfk7vgr000lzb7upcsqedt1","content":"<h2 id=\"1-什么是自动引用计数-ARC\"><a href=\"#1-什么是自动引用计数-ARC\" class=\"headerlink\" title=\"1. 什么是自动引用计数(ARC)\"></a>1. 什么是自动引用计数(ARC)</h2><p>ARC简而言之就是编译器自动进行内存管理，那为什么不叫”自动内存管理”，而叫”自动引用计数”，当然是因为内存管理是的方法是通过引用计数实现的</p>\n<p>要说自动引用计数，首先要说什么是”引用计数”</p>\n<h3 id=\"1-1引用计数\"><a href=\"#1-1引用计数\" class=\"headerlink\" title=\"1.1引用计数\"></a>1.1引用计数</h3><p>什么是引用计数，书中举了一个生活中开关房间灯的例子。</p>\n<p>简单的描述一下就是，第一个人来的时候要开灯(创建对象)，最后一个人走的时候要关灯(释放对象)，中间来人走人都不需要开关灯。<br>那么办公室里的人数就是引用计数。</p>\n<h3 id=\"1-2内存管理的思考方式\"><a href=\"#1-2内存管理的思考方式\" class=\"headerlink\" title=\"1.2内存管理的思考方式\"></a>1.2内存管理的思考方式</h3><p>内存管理的思考方式总结出来就是下面四点  </p>\n<p>注：这里还没到ARC所以还是非ARC</p>\n<p>1.自己生成的对象，自己所持有 (指通过<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">eg:</div><div class=\"line\"></div><div class=\"line\">```mm</div><div class=\"line\">id obj = [NSObject new];</div></pre></td></tr></table></figure></p>\n<p>2.非自己生成的对象，自己也能持有 (指持有通过类方法创建的对象)<br>eg:</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">id</span> obj = [<span class=\"built_in\">NSArray</span> array];</div><div class=\"line\">[obj <span class=\"keyword\">retain</span>];</div></pre></td></tr></table></figure>\n<p>3.不再需要自己持有的对象时释放  (释放对象)<br>eg:</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">id</span> obj = [[<span class=\"built_in\">NSObject</span> alloc] init];</div><div class=\"line\">[obj release];</div></pre></td></tr></table></figure>\n<p>4.非自己持有的对象无法释放  (多次释放，或未持有释放）<br>eg:</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">id</span> obj = [[<span class=\"built_in\">NSObject</span> alloc] init];</div><div class=\"line\">[obj release];</div><div class=\"line\">[obj release];</div></pre></td></tr></table></figure>\n<p>对象的操作与Objective-C方法的对应<br>生成并持有对象—— alloc/new/copy/mutableCopy 等<br>持有对象———– retain<br>释放对象———– release<br>废弃对象———– dealloc</p>\n<h2 id=\"2-alloc-retain-release-dealloc-实现\"><a href=\"#2-alloc-retain-release-dealloc-实现\" class=\"headerlink\" title=\"2.alloc/retain/release/dealloc 实现\"></a>2.alloc/retain/release/dealloc 实现</h2><p>书中这个节研究的是alloc/retain/release/dealloc的实现。</p>\n<p>讲之前先说一个我不知道的常识，那就是Objective-C的框架，底层的是一个叫Cocoa框架其中包含一个Foundation框架</p>\n<p>首先Objective-C内存管理的方法是包含在Cocoa框架中的，这里所说的内存管理是的方法alloc/retain/release/dealloc 指的是 NSObject类的alloc类方法,retain实例方法,release实例方法和dealloc实例方法，但是NSObject类的 Foundation<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">这里我把代码给大家写出来，供大家参考，但书的作者把有些地方的源码在不改变意思的范围进行了修改</div><div class=\"line\"></div><div class=\"line\">### 2.1 alloc 实现 ###</div><div class=\"line\"></div><div class=\"line\">GNUstep的```alloc```实现：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">```mm</div><div class=\"line\">+(id)alloc</div><div class=\"line\">&#123;</div><div class=\"line\">    return [self allocWithZone:NSDefaultMallocZone()];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+ (id)allocWithZone:(NSZone *)z</div><div class=\"line\">&#123;</div><div class=\"line\">    return NSAllocateObject (self, 0, z);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/* ------- NSAllocateObject ------- */</div><div class=\"line\">struct obj_layout &#123;</div><div class=\"line\">    NSUInteger retained;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">inline id NSAllocateObject (Class aClass, NSUInteger extraBytes, NSZone *zone)</div><div class=\"line\">&#123;</div><div class=\"line\">    int size = 计算容纳对象所需内存大小；</div><div class=\"line\">    id new = NSZoneMalloc(zone,size);</div><div class=\"line\">    memset(new, 0, size);</div><div class=\"line\">    new = (id)&amp;((struct obj_layout *) new)[1];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/* ----- 简化版alloc ----- */</div><div class=\"line\">+ alloc</div><div class=\"line\">&#123;</div><div class=\"line\">    int size = sizeof(struct obj_layout) + 对象大小;</div><div class=\"line\">    struct obj_layout *p = (struct obj_layout *)calloc(1,size);</div><div class=\"line\">    return(id)(p+1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>简化版的是去掉了 <figure class=\"highlight plain\"><figcaption><span>之后的代码，```NSZone``` 是为了防止内存碎片化引入的结构，对内存管理没有影响，所以可以忽略。从简化版的代码中可以看出 ```GNUstep``` 申请的对象的内存比需要的大了 ```sizeof(struct obj_layout)```，这个多出来的空间就是用来存放引用计数的</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">在非ARC即MRC中是可以通过 ```retainCount``` 查看对象的引用计数的。</div><div class=\"line\"></div><div class=\"line\">retainCount的实现:</div><div class=\"line\"></div><div class=\"line\">```mm</div><div class=\"line\">- (NSUInteger)retainCount</div><div class=\"line\">&#123;</div><div class=\"line\">    return NSExtraRefCount(self) + 1;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inline NSUInteger NSExtraRefCount(id anObject)</div><div class=\"line\">&#123;</div><div class=\"line\">    return((struct obj_layout *) anObject)[-1].retained;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-2-retain-实现\"><a href=\"#2-2-retain-实现\" class=\"headerlink\" title=\"2.2 retain 实现\"></a>2.2 retain 实现</h3><p>GNUstep的 <figure class=\"highlight plain\"><figcaption><span>实现：</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">```mm</div><div class=\"line\">- (id)retain</div><div class=\"line\">&#123;</div><div class=\"line\">    NSIncrementExtraRefCount(self);</div><div class=\"line\">    return self;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inline void NSIncrementExtraRefCount(id anObject)</div><div class=\"line\">&#123;</div><div class=\"line\">    if(((struct obj_layout *)anObject)[-1].retained == UINT_MAX -1)</div><div class=\"line\">        抛出异常</div><div class=\"line\">    ((struct obj_layout *)anObject)[-1].retained++;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-release-实现\"><a href=\"#2-3-release-实现\" class=\"headerlink\" title=\"2.3 release 实现\"></a>2.3 release 实现</h3><p>GNUstep的 <figure class=\"highlight plain\"><figcaption><span>实现：</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">```mm</div><div class=\"line\">- (void)release</div><div class=\"line\">&#123;</div><div class=\"line\">    if(NSDecrementExtraRefCountWasZero(self))</div><div class=\"line\">        [self dealloc];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">BOOL NSDecrementExtraRefCountWasZero(id anObject)</div><div class=\"line\">&#123;</div><div class=\"line\">    if(((struct obj_layout *)anObject)[-1].retained == 0)&#123;</div><div class=\"line\">        return YES;</div><div class=\"line\">    &#125;else &#123;</div><div class=\"line\">        ((struct obj_layout *)anObject)[-1].retained--;</div><div class=\"line\">        return NO;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-4dealloc-实现\"><a href=\"#2-4dealloc-实现\" class=\"headerlink\" title=\"2.4dealloc 实现\"></a>2.4dealloc 实现</h3><p>GNUstep的<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">```mm</div><div class=\"line\">- (void)dealloc</div><div class=\"line\">&#123;</div><div class=\"line\">    NSDeallocateObject(self);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inline void NSDeallocateObject(id anObject)</div><div class=\"line\">&#123;</div><div class=\"line\">    struct obj_layout *o = &amp;((struct obj_layout *) anObject)[-1];</div><div class=\"line\">    free(o);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到 <figure class=\"highlight plain\"><figcaption><span>实现引用计数的方法是在变量在内存块头部保存的当前对象的引用计数，默认是0，当调用 ```retainCount``` 时会自动+1，这就说明了自己生成的对象，自己所持有。</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">### 2.5 苹果实现 ###</div><div class=\"line\">苹果由于官方未公开源代码，根据运行时调用的代码可以看出苹果实现引用计数和 ```GNUsetp``` 的主要区别就是 ```GNUsetp``` 将引用计数存放在内存块头，而苹果使用的是散列表（键为内存块地址的散列值）</div><div class=\"line\"></div><div class=\"line\">存放在头部管理引用计数的好处：</div><div class=\"line\">- 代码量少</div><div class=\"line\">- 能够统一管理引用计数用内存块和对象用内存块</div><div class=\"line\"></div><div class=\"line\">用散列表(引用计数表)管理引用计数的好处：</div><div class=\"line\">- 对象用内存块的分配无需考虑内存块头部</div><div class=\"line\">- 引用计数表各记录中存有内存块地址，可从各个记录追溯到各对象的内存块</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">### autorelease ###</div><div class=\"line\">所谓 ```autorelease``` 就是自动释放，原理就是若某自动变量超出其作用域，该自动变量将被自动废弃</div><div class=\"line\"></div><div class=\"line\">GNUstep的 ```autorelease``` 实现：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">```mm</div><div class=\"line\">- (id)autorelease</div><div class=\"line\">&#123;</div><div class=\"line\">    [NSAutoreleasePool addObject:self];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+ (void) addObject:(id)anObj</div><div class=\"line\">&#123;</div><div class=\"line\">    NSAutoreleasePool *pool = 取得当前NSAutoreleasePool对象</div><div class=\"line\">    if(pool != nil) &#123;</div><div class=\"line\">        [pool addObject:anObj];</div><div class=\"line\">    &#125;else &#123;</div><div class=\"line\">        NSLog(@&quot;NSAutoreleasePool对象非存在状态下调用autorelease&quot;)；</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>废弃 <figure class=\"highlight plain\"><figcaption><span>方法 ``` drain``` 实现</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">```mm</div><div class=\"line\">- (void)drain</div><div class=\"line\">&#123;</div><div class=\"line\">    [self dealloc];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)dealloc</div><div class=\"line\">&#123;</div><div class=\"line\">    [self emptyPool];</div><div class=\"line\">    [array release];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)emptyPool</div><div class=\"line\">&#123;</div><div class=\"line\">    for(id obj in array) &#123;</div><div class=\"line\">        [obj release];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>查看 <figure class=\"highlight plain\"><figcaption><span>中的内容</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">```mm</div><div class=\"line\">[NSAutoreleasePool showPools];//此方法只能在iOS中使用</div></pre></td></tr></table></figure></p>\n<p>在运行时系统中调用方法</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* 函数声明 */</span></div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> _objc_autoreleasePoolPrint();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 调试处调用 */</span></div><div class=\"line\">_objc_autoreleasePoolPrint();</div></pre></td></tr></table></figure>\n<p>注：<br>(1).上面的内容全部是本人读《Objective-C高级编程 iOS与OS X多线程和内存管理》一书觉得重点的部分，如果大家感兴趣可以支持一下正版。<br>(2).如果各位看官觉得有什么事小弟说的不对的地方，欢迎指出。<br>(3).这篇基本上都是说引用计数的实现的，还没有涉及到前言提出的问题的解答。<br>(4).看到这里的都是真爱啊。</p>\n","excerpt":"","more":"<h2 id=\"1-什么是自动引用计数-ARC\"><a href=\"#1-什么是自动引用计数-ARC\" class=\"headerlink\" title=\"1. 什么是自动引用计数(ARC)\"></a>1. 什么是自动引用计数(ARC)</h2><p>ARC简而言之就是编译器自动进行内存管理，那为什么不叫”自动内存管理”，而叫”自动引用计数”，当然是因为内存管理是的方法是通过引用计数实现的</p>\n<p>要说自动引用计数，首先要说什么是”引用计数”</p>\n<h3 id=\"1-1引用计数\"><a href=\"#1-1引用计数\" class=\"headerlink\" title=\"1.1引用计数\"></a>1.1引用计数</h3><p>什么是引用计数，书中举了一个生活中开关房间灯的例子。</p>\n<p>简单的描述一下就是，第一个人来的时候要开灯(创建对象)，最后一个人走的时候要关灯(释放对象)，中间来人走人都不需要开关灯。<br>那么办公室里的人数就是引用计数。</p>\n<h3 id=\"1-2内存管理的思考方式\"><a href=\"#1-2内存管理的思考方式\" class=\"headerlink\" title=\"1.2内存管理的思考方式\"></a>1.2内存管理的思考方式</h3><p>内存管理的思考方式总结出来就是下面四点  </p>\n<p>注：这里还没到ARC所以还是非ARC</p>\n<p>1.自己生成的对象，自己所持有 (指通过<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">eg:</div><div class=\"line\"></div><div class=\"line\">```mm</div><div class=\"line\">id obj = [NSObject new];</div></pre></td></tr></table></figure></p>\n<p>2.非自己生成的对象，自己也能持有 (指持有通过类方法创建的对象)<br>eg:</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">id</span> obj = [<span class=\"built_in\">NSArray</span> array];</div><div class=\"line\">[obj <span class=\"keyword\">retain</span>];</div></pre></td></tr></table></figure>\n<p>3.不再需要自己持有的对象时释放  (释放对象)<br>eg:</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">id</span> obj = [[<span class=\"built_in\">NSObject</span> alloc] init];</div><div class=\"line\">[obj release];</div></pre></td></tr></table></figure>\n<p>4.非自己持有的对象无法释放  (多次释放，或未持有释放）<br>eg:</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">id</span> obj = [[<span class=\"built_in\">NSObject</span> alloc] init];</div><div class=\"line\">[obj release];</div><div class=\"line\">[obj release];</div></pre></td></tr></table></figure>\n<p>对象的操作与Objective-C方法的对应<br>生成并持有对象—— alloc/new/copy/mutableCopy 等<br>持有对象———– retain<br>释放对象———– release<br>废弃对象———– dealloc</p>\n<h2 id=\"2-alloc-retain-release-dealloc-实现\"><a href=\"#2-alloc-retain-release-dealloc-实现\" class=\"headerlink\" title=\"2.alloc/retain/release/dealloc 实现\"></a>2.alloc/retain/release/dealloc 实现</h2><p>书中这个节研究的是alloc/retain/release/dealloc的实现。</p>\n<p>讲之前先说一个我不知道的常识，那就是Objective-C的框架，底层的是一个叫Cocoa框架其中包含一个Foundation框架</p>\n<p>首先Objective-C内存管理的方法是包含在Cocoa框架中的，这里所说的内存管理是的方法alloc/retain/release/dealloc 指的是 NSObject类的alloc类方法,retain实例方法,release实例方法和dealloc实例方法，但是NSObject类的 Foundation<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">这里我把代码给大家写出来，供大家参考，但书的作者把有些地方的源码在不改变意思的范围进行了修改</div><div class=\"line\"></div><div class=\"line\">### 2.1 alloc 实现 ###</div><div class=\"line\"></div><div class=\"line\">GNUstep的```alloc```实现：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">```mm</div><div class=\"line\">+(id)alloc</div><div class=\"line\">&#123;</div><div class=\"line\">    return [self allocWithZone:NSDefaultMallocZone()];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+ (id)allocWithZone:(NSZone *)z</div><div class=\"line\">&#123;</div><div class=\"line\">    return NSAllocateObject (self, 0, z);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/* ------- NSAllocateObject ------- */</div><div class=\"line\">struct obj_layout &#123;</div><div class=\"line\">    NSUInteger retained;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">inline id NSAllocateObject (Class aClass, NSUInteger extraBytes, NSZone *zone)</div><div class=\"line\">&#123;</div><div class=\"line\">    int size = 计算容纳对象所需内存大小；</div><div class=\"line\">    id new = NSZoneMalloc(zone,size);</div><div class=\"line\">    memset(new, 0, size);</div><div class=\"line\">    new = (id)&amp;((struct obj_layout *) new)[1];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/* ----- 简化版alloc ----- */</div><div class=\"line\">+ alloc</div><div class=\"line\">&#123;</div><div class=\"line\">    int size = sizeof(struct obj_layout) + 对象大小;</div><div class=\"line\">    struct obj_layout *p = (struct obj_layout *)calloc(1,size);</div><div class=\"line\">    return(id)(p+1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>简化版的是去掉了 <figure class=\"highlight plain\"><figcaption><span>之后的代码，```NSZone``` 是为了防止内存碎片化引入的结构，对内存管理没有影响，所以可以忽略。从简化版的代码中可以看出 ```GNUstep``` 申请的对象的内存比需要的大了 ```sizeof(struct obj_layout)```，这个多出来的空间就是用来存放引用计数的</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">在非ARC即MRC中是可以通过 ```retainCount``` 查看对象的引用计数的。</div><div class=\"line\"></div><div class=\"line\">retainCount的实现:</div><div class=\"line\"></div><div class=\"line\">```mm</div><div class=\"line\">- (NSUInteger)retainCount</div><div class=\"line\">&#123;</div><div class=\"line\">    return NSExtraRefCount(self) + 1;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inline NSUInteger NSExtraRefCount(id anObject)</div><div class=\"line\">&#123;</div><div class=\"line\">    return((struct obj_layout *) anObject)[-1].retained;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-2-retain-实现\"><a href=\"#2-2-retain-实现\" class=\"headerlink\" title=\"2.2 retain 实现\"></a>2.2 retain 实现</h3><p>GNUstep的 <figure class=\"highlight plain\"><figcaption><span>实现：</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">```mm</div><div class=\"line\">- (id)retain</div><div class=\"line\">&#123;</div><div class=\"line\">    NSIncrementExtraRefCount(self);</div><div class=\"line\">    return self;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inline void NSIncrementExtraRefCount(id anObject)</div><div class=\"line\">&#123;</div><div class=\"line\">    if(((struct obj_layout *)anObject)[-1].retained == UINT_MAX -1)</div><div class=\"line\">        抛出异常</div><div class=\"line\">    ((struct obj_layout *)anObject)[-1].retained++;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-release-实现\"><a href=\"#2-3-release-实现\" class=\"headerlink\" title=\"2.3 release 实现\"></a>2.3 release 实现</h3><p>GNUstep的 <figure class=\"highlight plain\"><figcaption><span>实现：</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">```mm</div><div class=\"line\">- (void)release</div><div class=\"line\">&#123;</div><div class=\"line\">    if(NSDecrementExtraRefCountWasZero(self))</div><div class=\"line\">        [self dealloc];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">BOOL NSDecrementExtraRefCountWasZero(id anObject)</div><div class=\"line\">&#123;</div><div class=\"line\">    if(((struct obj_layout *)anObject)[-1].retained == 0)&#123;</div><div class=\"line\">        return YES;</div><div class=\"line\">    &#125;else &#123;</div><div class=\"line\">        ((struct obj_layout *)anObject)[-1].retained--;</div><div class=\"line\">        return NO;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-4dealloc-实现\"><a href=\"#2-4dealloc-实现\" class=\"headerlink\" title=\"2.4dealloc 实现\"></a>2.4dealloc 实现</h3><p>GNUstep的<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">```mm</div><div class=\"line\">- (void)dealloc</div><div class=\"line\">&#123;</div><div class=\"line\">    NSDeallocateObject(self);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inline void NSDeallocateObject(id anObject)</div><div class=\"line\">&#123;</div><div class=\"line\">    struct obj_layout *o = &amp;((struct obj_layout *) anObject)[-1];</div><div class=\"line\">    free(o);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到 <figure class=\"highlight plain\"><figcaption><span>实现引用计数的方法是在变量在内存块头部保存的当前对象的引用计数，默认是0，当调用 ```retainCount``` 时会自动+1，这就说明了自己生成的对象，自己所持有。</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">### 2.5 苹果实现 ###</div><div class=\"line\">苹果由于官方未公开源代码，根据运行时调用的代码可以看出苹果实现引用计数和 ```GNUsetp``` 的主要区别就是 ```GNUsetp``` 将引用计数存放在内存块头，而苹果使用的是散列表（键为内存块地址的散列值）</div><div class=\"line\"></div><div class=\"line\">存放在头部管理引用计数的好处：</div><div class=\"line\">- 代码量少</div><div class=\"line\">- 能够统一管理引用计数用内存块和对象用内存块</div><div class=\"line\"></div><div class=\"line\">用散列表(引用计数表)管理引用计数的好处：</div><div class=\"line\">- 对象用内存块的分配无需考虑内存块头部</div><div class=\"line\">- 引用计数表各记录中存有内存块地址，可从各个记录追溯到各对象的内存块</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">### autorelease ###</div><div class=\"line\">所谓 ```autorelease``` 就是自动释放，原理就是若某自动变量超出其作用域，该自动变量将被自动废弃</div><div class=\"line\"></div><div class=\"line\">GNUstep的 ```autorelease``` 实现：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">```mm</div><div class=\"line\">- (id)autorelease</div><div class=\"line\">&#123;</div><div class=\"line\">    [NSAutoreleasePool addObject:self];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+ (void) addObject:(id)anObj</div><div class=\"line\">&#123;</div><div class=\"line\">    NSAutoreleasePool *pool = 取得当前NSAutoreleasePool对象</div><div class=\"line\">    if(pool != nil) &#123;</div><div class=\"line\">        [pool addObject:anObj];</div><div class=\"line\">    &#125;else &#123;</div><div class=\"line\">        NSLog(@&quot;NSAutoreleasePool对象非存在状态下调用autorelease&quot;)；</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>废弃 <figure class=\"highlight plain\"><figcaption><span>方法 ``` drain``` 实现</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">```mm</div><div class=\"line\">- (void)drain</div><div class=\"line\">&#123;</div><div class=\"line\">    [self dealloc];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)dealloc</div><div class=\"line\">&#123;</div><div class=\"line\">    [self emptyPool];</div><div class=\"line\">    [array release];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)emptyPool</div><div class=\"line\">&#123;</div><div class=\"line\">    for(id obj in array) &#123;</div><div class=\"line\">        [obj release];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>查看 <figure class=\"highlight plain\"><figcaption><span>中的内容</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">```mm</div><div class=\"line\">[NSAutoreleasePool showPools];//此方法只能在iOS中使用</div></pre></td></tr></table></figure></p>\n<p>在运行时系统中调用方法</p>\n<figure class=\"highlight mm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* 函数声明 */</span></div><div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> _objc_autoreleasePoolPrint();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 调试处调用 */</span></div><div class=\"line\">_objc_autoreleasePoolPrint();</div></pre></td></tr></table></figure>\n<p>注：<br>(1).上面的内容全部是本人读《Objective-C高级编程 iOS与OS X多线程和内存管理》一书觉得重点的部分，如果大家感兴趣可以支持一下正版。<br>(2).如果各位看官觉得有什么事小弟说的不对的地方，欢迎指出。<br>(3).这篇基本上都是说引用计数的实现的，还没有涉及到前言提出的问题的解答。<br>(4).看到这里的都是真爱啊。</p>\n"},{"title":"centOS Linux系统命令--VPS那些事","date":"2016-12-11T03:02:30.000Z","_content":"\n## 升级系统 ##\n\n```\nyum update -y\n```\n\n## 安装wget ##\nwget是一个从网络上自动下载文件的自由工具，支持通过HTTP、HTTPS、FTP三个最常见的TCP/IP协议下载，并可以使用HTTP代理。wget名称的由来是“World Wide Web”与“get”的结合\n\n```\nyum -y install wget\n```\n\n## 查看当前内核版本 ##\n```\nuname -r\n```\n\n<!----- more ----->\n\n## 修改内核 ##\n```\nrpm -ivh http://gongju.wn789.com/neihei/kernel-firmware-2.6.32-504.3.3.el6.noarch.rpm\n```\n\n```\nrpm -ivh http://gongju.wn789.com/neihei/kernel-2.6.32-504.3.3.el6.x86_64.rpm --force\n```\n\n## 查看内核 ##\n```\nrpm -qa | grep kernel\n```\n\n## 安装锐速破解版 ##\n```\nwget -N --no-check-certificate https://github.com/91yun/serverspeeder/raw/master/serverspeeder.sh && bash serverspeeder.sh\n```\n\n## 锐速卸载 ##\n```\nchattr -i /serverspeeder/etc/apx* && /serverspeeder/bin/serverSpeeder.sh uninstall -f\n```\n\n## 查看锐速状态 ##\n```\nservice serverSpeeder status\n```\n\n## 锐速相关 ##\n```\n service serverSpeeder start | stop | restart\n```\n\n## 搭建shadowsocks ##\n\n1. 安装\n\n安装pip\n```\nyum install python-setuptools && easy_install pip\n```\n\n安装shadowsocks\n```\npip install shadowsocks\n```\n\n2. 配置\n\n创建一个文件在```/etc/shadowsocks.json```\n```\ncd /etc\n\nvi shadowsocks.json\n```\n\n在json文件中写入如下信息\n\n```\n{\n        \"server\":\"x.x.x.x\",            #服务器IP地址\n        \"server_port\":8388,                 #服务监听端口\n        \"local_port\":1080,                  #本地连接端口\n        \"password\":\"barfoo\",               #加密传输使用到的密码\n        \"timeout\":600,                      #连接超时时间\n        \"method\":\"aes-256-cfb\"            #加密算法\n}\n```\n\n3. 启动、停止\n\n```\nssserver -c /etc/shadowsocks.json -d start | stop\n```\n\n4. 配置定时任务\n\n在vps的内存比较小的时候，shadowsocks容易被系统给kill掉，这时，我们就要有个定时任务去查看shadowsocks的服务状态\n\n首先，创建一个查看服务脚本\n\n```\n#! /bin/sh\n\nproc_name=\"shadowsocks.json\"\n\nnumber=`ps -ef | grep $proc_name | grep -v grep | wc -l`\n\nif [ $number -eq 0 ];then\n        ssserver -c /etc/shadowsocks.json -d start\nelse\n        ssserver -c /etc/shadowsocks.json -d restart\nfi\n```\n\n给脚本添加运行权限\n\n```\nchmod 777 xxxx.sh\n```\n\n将脚本加入定时任务中\n\n```\ncrontab -e  //打开定时任务配置\n```\n\n加入上面的脚本\n\n```\n*/1 * * * * ./xxx.sh  //注意脚本路径\n\n```\n\n启动定时任务\n\n```\nservice crond start\n```\n\n\n\n## 安装使用Apache ##\n\n在Linux中Apache的名字叫 ```httpd```\n\n查看服务器版本\n```\napachectl -v    \n```\n\n安装Apache\n```\nyum install httpd\n```\n\n打开Apache\n```\n/etc/init.d/httpd start\n或者\nhttpd -k start | stop | restart\n```\n\nApache的配置文件路径\n```\n/etc/httpd/conf/httpd.conf\n```\n\n## 安装Mysql ##\n\n```\nyum list installed | grep mysql#查看是否已经安装\nyum install mysql-server#安装服务端\nyum install mysql-devel#这个应该是组件，不知道有什么用\nyum install mysql#安装客户端\n\nservice mysqld start#启动\nservice mysqld stop#停止\nservice mysqld restart#重启\nmysqladmin -u root password 123456#设置密码\nmysql -u root -p #登录\n```\n","source":"_posts/centOS系统命令.md","raw":"---\ntitle: centOS Linux系统命令--VPS那些事\ndate: 2016-12-11 11:02:30\ntags: Linux\n---\n\n## 升级系统 ##\n\n```\nyum update -y\n```\n\n## 安装wget ##\nwget是一个从网络上自动下载文件的自由工具，支持通过HTTP、HTTPS、FTP三个最常见的TCP/IP协议下载，并可以使用HTTP代理。wget名称的由来是“World Wide Web”与“get”的结合\n\n```\nyum -y install wget\n```\n\n## 查看当前内核版本 ##\n```\nuname -r\n```\n\n<!----- more ----->\n\n## 修改内核 ##\n```\nrpm -ivh http://gongju.wn789.com/neihei/kernel-firmware-2.6.32-504.3.3.el6.noarch.rpm\n```\n\n```\nrpm -ivh http://gongju.wn789.com/neihei/kernel-2.6.32-504.3.3.el6.x86_64.rpm --force\n```\n\n## 查看内核 ##\n```\nrpm -qa | grep kernel\n```\n\n## 安装锐速破解版 ##\n```\nwget -N --no-check-certificate https://github.com/91yun/serverspeeder/raw/master/serverspeeder.sh && bash serverspeeder.sh\n```\n\n## 锐速卸载 ##\n```\nchattr -i /serverspeeder/etc/apx* && /serverspeeder/bin/serverSpeeder.sh uninstall -f\n```\n\n## 查看锐速状态 ##\n```\nservice serverSpeeder status\n```\n\n## 锐速相关 ##\n```\n service serverSpeeder start | stop | restart\n```\n\n## 搭建shadowsocks ##\n\n1. 安装\n\n安装pip\n```\nyum install python-setuptools && easy_install pip\n```\n\n安装shadowsocks\n```\npip install shadowsocks\n```\n\n2. 配置\n\n创建一个文件在```/etc/shadowsocks.json```\n```\ncd /etc\n\nvi shadowsocks.json\n```\n\n在json文件中写入如下信息\n\n```\n{\n        \"server\":\"x.x.x.x\",            #服务器IP地址\n        \"server_port\":8388,                 #服务监听端口\n        \"local_port\":1080,                  #本地连接端口\n        \"password\":\"barfoo\",               #加密传输使用到的密码\n        \"timeout\":600,                      #连接超时时间\n        \"method\":\"aes-256-cfb\"            #加密算法\n}\n```\n\n3. 启动、停止\n\n```\nssserver -c /etc/shadowsocks.json -d start | stop\n```\n\n4. 配置定时任务\n\n在vps的内存比较小的时候，shadowsocks容易被系统给kill掉，这时，我们就要有个定时任务去查看shadowsocks的服务状态\n\n首先，创建一个查看服务脚本\n\n```\n#! /bin/sh\n\nproc_name=\"shadowsocks.json\"\n\nnumber=`ps -ef | grep $proc_name | grep -v grep | wc -l`\n\nif [ $number -eq 0 ];then\n        ssserver -c /etc/shadowsocks.json -d start\nelse\n        ssserver -c /etc/shadowsocks.json -d restart\nfi\n```\n\n给脚本添加运行权限\n\n```\nchmod 777 xxxx.sh\n```\n\n将脚本加入定时任务中\n\n```\ncrontab -e  //打开定时任务配置\n```\n\n加入上面的脚本\n\n```\n*/1 * * * * ./xxx.sh  //注意脚本路径\n\n```\n\n启动定时任务\n\n```\nservice crond start\n```\n\n\n\n## 安装使用Apache ##\n\n在Linux中Apache的名字叫 ```httpd```\n\n查看服务器版本\n```\napachectl -v    \n```\n\n安装Apache\n```\nyum install httpd\n```\n\n打开Apache\n```\n/etc/init.d/httpd start\n或者\nhttpd -k start | stop | restart\n```\n\nApache的配置文件路径\n```\n/etc/httpd/conf/httpd.conf\n```\n\n## 安装Mysql ##\n\n```\nyum list installed | grep mysql#查看是否已经安装\nyum install mysql-server#安装服务端\nyum install mysql-devel#这个应该是组件，不知道有什么用\nyum install mysql#安装客户端\n\nservice mysqld start#启动\nservice mysqld stop#停止\nservice mysqld restart#重启\nmysqladmin -u root password 123456#设置密码\nmysql -u root -p #登录\n```\n","slug":"centOS系统命令","published":1,"updated":"2018-08-29T07:57:16.961Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnfk7vgv000ozb7ui19ooop1","content":"<h2 id=\"升级系统\"><a href=\"#升级系统\" class=\"headerlink\" title=\"升级系统\"></a>升级系统</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum update -y</div></pre></td></tr></table></figure>\n<h2 id=\"安装wget\"><a href=\"#安装wget\" class=\"headerlink\" title=\"安装wget\"></a>安装wget</h2><p>wget是一个从网络上自动下载文件的自由工具，支持通过HTTP、HTTPS、FTP三个最常见的TCP/IP协议下载，并可以使用HTTP代理。wget名称的由来是“World Wide Web”与“get”的结合</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum -y install wget</div></pre></td></tr></table></figure>\n<h2 id=\"查看当前内核版本\"><a href=\"#查看当前内核版本\" class=\"headerlink\" title=\"查看当前内核版本\"></a>查看当前内核版本</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">uname -r</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"修改内核\"><a href=\"#修改内核\" class=\"headerlink\" title=\"修改内核\"></a>修改内核</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rpm -ivh http://gongju.wn789.com/neihei/kernel-firmware-2.6.32-504.3.3.el6.noarch.rpm</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rpm -ivh http://gongju.wn789.com/neihei/kernel-2.6.32-504.3.3.el6.x86_64.rpm --force</div></pre></td></tr></table></figure>\n<h2 id=\"查看内核\"><a href=\"#查看内核\" class=\"headerlink\" title=\"查看内核\"></a>查看内核</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rpm -qa | grep kernel</div></pre></td></tr></table></figure>\n<h2 id=\"安装锐速破解版\"><a href=\"#安装锐速破解版\" class=\"headerlink\" title=\"安装锐速破解版\"></a>安装锐速破解版</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget -N --no-check-certificate https://github.com/91yun/serverspeeder/raw/master/serverspeeder.sh &amp;&amp; bash serverspeeder.sh</div></pre></td></tr></table></figure>\n<h2 id=\"锐速卸载\"><a href=\"#锐速卸载\" class=\"headerlink\" title=\"锐速卸载\"></a>锐速卸载</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chattr -i /serverspeeder/etc/apx* &amp;&amp; /serverspeeder/bin/serverSpeeder.sh uninstall -f</div></pre></td></tr></table></figure>\n<h2 id=\"查看锐速状态\"><a href=\"#查看锐速状态\" class=\"headerlink\" title=\"查看锐速状态\"></a>查看锐速状态</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service serverSpeeder status</div></pre></td></tr></table></figure>\n<h2 id=\"锐速相关\"><a href=\"#锐速相关\" class=\"headerlink\" title=\"锐速相关\"></a>锐速相关</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service serverSpeeder start | stop | restart</div></pre></td></tr></table></figure>\n<h2 id=\"搭建shadowsocks\"><a href=\"#搭建shadowsocks\" class=\"headerlink\" title=\"搭建shadowsocks\"></a>搭建shadowsocks</h2><ol>\n<li>安装</li>\n</ol>\n<p>安装pip<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install python-setuptools &amp;&amp; easy_install pip</div></pre></td></tr></table></figure></p>\n<p>安装shadowsocks<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install shadowsocks</div></pre></td></tr></table></figure></p>\n<ol>\n<li>配置</li>\n</ol>\n<p>创建一个文件在<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">```</div><div class=\"line\">cd /etc</div><div class=\"line\"></div><div class=\"line\">vi shadowsocks.json</div></pre></td></tr></table></figure></p>\n<p>在json文件中写入如下信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">        &quot;server&quot;:&quot;x.x.x.x&quot;,            #服务器IP地址</div><div class=\"line\">        &quot;server_port&quot;:8388,                 #服务监听端口</div><div class=\"line\">        &quot;local_port&quot;:1080,                  #本地连接端口</div><div class=\"line\">        &quot;password&quot;:&quot;barfoo&quot;,               #加密传输使用到的密码</div><div class=\"line\">        &quot;timeout&quot;:600,                      #连接超时时间</div><div class=\"line\">        &quot;method&quot;:&quot;aes-256-cfb&quot;            #加密算法</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>启动、停止</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssserver -c /etc/shadowsocks.json -d start | stop</div></pre></td></tr></table></figure>\n<ol>\n<li>配置定时任务</li>\n</ol>\n<p>在vps的内存比较小的时候，shadowsocks容易被系统给kill掉，这时，我们就要有个定时任务去查看shadowsocks的服务状态</p>\n<p>首先，创建一个查看服务脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">#! /bin/sh</div><div class=\"line\"></div><div class=\"line\">proc_name=&quot;shadowsocks.json&quot;</div><div class=\"line\"></div><div class=\"line\">number=`ps -ef | grep $proc_name | grep -v grep | wc -l`</div><div class=\"line\"></div><div class=\"line\">if [ $number -eq 0 ];then</div><div class=\"line\">        ssserver -c /etc/shadowsocks.json -d start</div><div class=\"line\">else</div><div class=\"line\">        ssserver -c /etc/shadowsocks.json -d restart</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<p>给脚本添加运行权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod 777 xxxx.sh</div></pre></td></tr></table></figure>\n<p>将脚本加入定时任务中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">crontab -e  //打开定时任务配置</div></pre></td></tr></table></figure>\n<p>加入上面的脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">*/1 * * * * ./xxx.sh  //注意脚本路径</div></pre></td></tr></table></figure>\n<p>启动定时任务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service crond start</div></pre></td></tr></table></figure>\n<h2 id=\"安装使用Apache\"><a href=\"#安装使用Apache\" class=\"headerlink\" title=\"安装使用Apache\"></a>安装使用Apache</h2><p>在Linux中Apache的名字叫 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">查看服务器版本</div></pre></td></tr></table></figure></p>\n<p>apachectl -v<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">安装Apache</div></pre></td></tr></table></figure></p>\n<p>yum install httpd<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">打开Apache</div></pre></td></tr></table></figure></p>\n<p>/etc/init.d/httpd start<br>或者<br>httpd -k start | stop | restart<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Apache的配置文件路径</div></pre></td></tr></table></figure></p>\n<p>/etc/httpd/conf/httpd.conf<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">## 安装Mysql ##</div></pre></td></tr></table></figure></p>\n<p>yum list installed | grep mysql#查看是否已经安装<br>yum install mysql-server#安装服务端<br>yum install mysql-devel#这个应该是组件，不知道有什么用<br>yum install mysql#安装客户端</p>\n<p>service mysqld start#启动<br>service mysqld stop#停止<br>service mysqld restart#重启<br>mysqladmin -u root password 123456#设置密码<br>mysql -u root -p #登录<br>```</p>\n","excerpt":"<h2 id=\"升级系统\"><a href=\"#升级系统\" class=\"headerlink\" title=\"升级系统\"></a>升级系统</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum update -y</div></pre></td></tr></table></figure>\n<h2 id=\"安装wget\"><a href=\"#安装wget\" class=\"headerlink\" title=\"安装wget\"></a>安装wget</h2><p>wget是一个从网络上自动下载文件的自由工具，支持通过HTTP、HTTPS、FTP三个最常见的TCP/IP协议下载，并可以使用HTTP代理。wget名称的由来是“World Wide Web”与“get”的结合</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum -y install wget</div></pre></td></tr></table></figure>\n<h2 id=\"查看当前内核版本\"><a href=\"#查看当前内核版本\" class=\"headerlink\" title=\"查看当前内核版本\"></a>查看当前内核版本</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">uname -r</div></pre></td></tr></table></figure>","more":"<h2 id=\"修改内核\"><a href=\"#修改内核\" class=\"headerlink\" title=\"修改内核\"></a>修改内核</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rpm -ivh http://gongju.wn789.com/neihei/kernel-firmware-2.6.32-504.3.3.el6.noarch.rpm</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rpm -ivh http://gongju.wn789.com/neihei/kernel-2.6.32-504.3.3.el6.x86_64.rpm --force</div></pre></td></tr></table></figure>\n<h2 id=\"查看内核\"><a href=\"#查看内核\" class=\"headerlink\" title=\"查看内核\"></a>查看内核</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rpm -qa | grep kernel</div></pre></td></tr></table></figure>\n<h2 id=\"安装锐速破解版\"><a href=\"#安装锐速破解版\" class=\"headerlink\" title=\"安装锐速破解版\"></a>安装锐速破解版</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget -N --no-check-certificate https://github.com/91yun/serverspeeder/raw/master/serverspeeder.sh &amp;&amp; bash serverspeeder.sh</div></pre></td></tr></table></figure>\n<h2 id=\"锐速卸载\"><a href=\"#锐速卸载\" class=\"headerlink\" title=\"锐速卸载\"></a>锐速卸载</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chattr -i /serverspeeder/etc/apx* &amp;&amp; /serverspeeder/bin/serverSpeeder.sh uninstall -f</div></pre></td></tr></table></figure>\n<h2 id=\"查看锐速状态\"><a href=\"#查看锐速状态\" class=\"headerlink\" title=\"查看锐速状态\"></a>查看锐速状态</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service serverSpeeder status</div></pre></td></tr></table></figure>\n<h2 id=\"锐速相关\"><a href=\"#锐速相关\" class=\"headerlink\" title=\"锐速相关\"></a>锐速相关</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service serverSpeeder start | stop | restart</div></pre></td></tr></table></figure>\n<h2 id=\"搭建shadowsocks\"><a href=\"#搭建shadowsocks\" class=\"headerlink\" title=\"搭建shadowsocks\"></a>搭建shadowsocks</h2><ol>\n<li>安装</li>\n</ol>\n<p>安装pip<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install python-setuptools &amp;&amp; easy_install pip</div></pre></td></tr></table></figure></p>\n<p>安装shadowsocks<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install shadowsocks</div></pre></td></tr></table></figure></p>\n<ol>\n<li>配置</li>\n</ol>\n<p>创建一个文件在<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">```</div><div class=\"line\">cd /etc</div><div class=\"line\"></div><div class=\"line\">vi shadowsocks.json</div></pre></td></tr></table></figure></p>\n<p>在json文件中写入如下信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">        &quot;server&quot;:&quot;x.x.x.x&quot;,            #服务器IP地址</div><div class=\"line\">        &quot;server_port&quot;:8388,                 #服务监听端口</div><div class=\"line\">        &quot;local_port&quot;:1080,                  #本地连接端口</div><div class=\"line\">        &quot;password&quot;:&quot;barfoo&quot;,               #加密传输使用到的密码</div><div class=\"line\">        &quot;timeout&quot;:600,                      #连接超时时间</div><div class=\"line\">        &quot;method&quot;:&quot;aes-256-cfb&quot;            #加密算法</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>启动、停止</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssserver -c /etc/shadowsocks.json -d start | stop</div></pre></td></tr></table></figure>\n<ol>\n<li>配置定时任务</li>\n</ol>\n<p>在vps的内存比较小的时候，shadowsocks容易被系统给kill掉，这时，我们就要有个定时任务去查看shadowsocks的服务状态</p>\n<p>首先，创建一个查看服务脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">#! /bin/sh</div><div class=\"line\"></div><div class=\"line\">proc_name=&quot;shadowsocks.json&quot;</div><div class=\"line\"></div><div class=\"line\">number=`ps -ef | grep $proc_name | grep -v grep | wc -l`</div><div class=\"line\"></div><div class=\"line\">if [ $number -eq 0 ];then</div><div class=\"line\">        ssserver -c /etc/shadowsocks.json -d start</div><div class=\"line\">else</div><div class=\"line\">        ssserver -c /etc/shadowsocks.json -d restart</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<p>给脚本添加运行权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod 777 xxxx.sh</div></pre></td></tr></table></figure>\n<p>将脚本加入定时任务中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">crontab -e  //打开定时任务配置</div></pre></td></tr></table></figure>\n<p>加入上面的脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">*/1 * * * * ./xxx.sh  //注意脚本路径</div></pre></td></tr></table></figure>\n<p>启动定时任务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service crond start</div></pre></td></tr></table></figure>\n<h2 id=\"安装使用Apache\"><a href=\"#安装使用Apache\" class=\"headerlink\" title=\"安装使用Apache\"></a>安装使用Apache</h2><p>在Linux中Apache的名字叫 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">查看服务器版本</div></pre></td></tr></table></figure></p>\n<p>apachectl -v<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">安装Apache</div></pre></td></tr></table></figure></p>\n<p>yum install httpd<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">打开Apache</div></pre></td></tr></table></figure></p>\n<p>/etc/init.d/httpd start<br>或者<br>httpd -k start | stop | restart<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Apache的配置文件路径</div></pre></td></tr></table></figure></p>\n<p>/etc/httpd/conf/httpd.conf<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">## 安装Mysql ##</div></pre></td></tr></table></figure></p>\n<p>yum list installed | grep mysql#查看是否已经安装<br>yum install mysql-server#安装服务端<br>yum install mysql-devel#这个应该是组件，不知道有什么用<br>yum install mysql#安装客户端</p>\n<p>service mysqld start#启动<br>service mysqld stop#停止<br>service mysqld restart#重启<br>mysqladmin -u root password 123456#设置密码<br>mysql -u root -p #登录<br>```</p>"},{"title":"ssh连接报错","date":"2016-12-11T03:02:30.000Z","_content":"\n## 使用ssh连接远程服务器 ##\n\n在使用VPS的时候由于更换了数据中心，导致远程服务```ip```地址改变，使用```ssh```连接的时候报如下错误\n\n\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nIt is also possible that a host key has just been changed.\nThe fingerprint for the RSA key sent by the remote host is\n6e:45:f9:a8:af:38:3d:a1:a5:c7:76:1d:02:f8:77:00.\nPlease contact your system administrator.\nAdd correct host key in /home/hostname /.ssh/known_hosts to get rid of this message.\nOffending RSA key in /var/lib/sss/pubconf/known_hosts:4\nRSA host key for pong has changed and you have requested strict checking.\nHost key verification failed.\n\n\n## 解决办法 ##\n\n找到```~/.ssh/```路径下的```known_hosts```打开，删除对应的```ip```以及对应信息保存就好\n","source":"_posts/ssh连接报错.md","raw":"---\ntitle: ssh连接报错\ndate: 2016-12-11 11:02:30\ntags: VPS那些事\n---\n\n## 使用ssh连接远程服务器 ##\n\n在使用VPS的时候由于更换了数据中心，导致远程服务```ip```地址改变，使用```ssh```连接的时候报如下错误\n\n\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nIt is also possible that a host key has just been changed.\nThe fingerprint for the RSA key sent by the remote host is\n6e:45:f9:a8:af:38:3d:a1:a5:c7:76:1d:02:f8:77:00.\nPlease contact your system administrator.\nAdd correct host key in /home/hostname /.ssh/known_hosts to get rid of this message.\nOffending RSA key in /var/lib/sss/pubconf/known_hosts:4\nRSA host key for pong has changed and you have requested strict checking.\nHost key verification failed.\n\n\n## 解决办法 ##\n\n找到```~/.ssh/```路径下的```known_hosts```打开，删除对应的```ip```以及对应信息保存就好\n","slug":"ssh连接报错","published":1,"updated":"2017-07-11T02:55:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnfk7vgz000qzb7ui8ah5j66","content":"<h2 id=\"使用ssh连接远程服务器\"><a href=\"#使用ssh连接远程服务器\" class=\"headerlink\" title=\"使用ssh连接远程服务器\"></a>使用ssh连接远程服务器</h2><p>在使用VPS的时候由于更换了数据中心，导致远程服务<code>ip</code>地址改变，使用<code>ssh</code>连接的时候报如下错误</p>\n<p>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<br>@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @<br>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<br>IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!<br>Someone could be eavesdropping on you right now (man-in-the-middle attack)!<br>It is also possible that a host key has just been changed.<br>The fingerprint for the RSA key sent by the remote host is<br>6e:45:f9:a8:af:38:3d:a1:a5:c7:76:1d:02:f8:77:00.<br>Please contact your system administrator.<br>Add correct host key in /home/hostname /.ssh/known_hosts to get rid of this message.<br>Offending RSA key in /var/lib/sss/pubconf/known_hosts:4<br>RSA host key for pong has changed and you have requested strict checking.<br>Host key verification failed.</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>找到<code>~/.ssh/</code>路径下的<code>known_hosts</code>打开，删除对应的<code>ip</code>以及对应信息保存就好</p>\n","excerpt":"","more":"<h2 id=\"使用ssh连接远程服务器\"><a href=\"#使用ssh连接远程服务器\" class=\"headerlink\" title=\"使用ssh连接远程服务器\"></a>使用ssh连接远程服务器</h2><p>在使用VPS的时候由于更换了数据中心，导致远程服务<code>ip</code>地址改变，使用<code>ssh</code>连接的时候报如下错误</p>\n<p>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<br>@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @<br>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<br>IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!<br>Someone could be eavesdropping on you right now (man-in-the-middle attack)!<br>It is also possible that a host key has just been changed.<br>The fingerprint for the RSA key sent by the remote host is<br>6e:45:f9:a8:af:38:3d:a1:a5:c7:76:1d:02:f8:77:00.<br>Please contact your system administrator.<br>Add correct host key in /home/hostname /.ssh/known_hosts to get rid of this message.<br>Offending RSA key in /var/lib/sss/pubconf/known_hosts:4<br>RSA host key for pong has changed and you have requested strict checking.<br>Host key verification failed.</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>找到<code>~/.ssh/</code>路径下的<code>known_hosts</code>打开，删除对应的<code>ip</code>以及对应信息保存就好</p>\n"},{"title":"OC使用静态库中的类别","date":"2017-04-05T12:02:30.000Z","_content":"\n## OC中使用静态库中的类别的问题 ##\n\nOC的源文件经过 `clang` 编译首先生成中间代码,接着通过优化生成目标代码(目标代码中包括符号表,标示了此代码中的全局符号和静态符号,还标示了导入符号等),连接器会根据符号表分析各个目标代码之间的调用关系,然后将使用到的代码进行连接和重定位,最后生成可执行文件.\n\n在编译Objective-C源文件到目标文件时,编译器并不知道方法的对应实现,只能在运行时才知道,所以编译器只会为类生成连接符号,不会对类中的方法生成连接符号,由于Category方法并不对应一个新类,所以不会生成连接符号,连接器也不会将Category方法合并到原始的类中,最终导致连接器忽略了Category方法,不会将其连接到可执行文件中.\n\n\n> 在OC使用静态库中的类别,需要设置下面5种方法中的一种\n\n\n## Other Linker Flags 设置 ##\n\n* 1. 通过在Other Linder Flags 添加 `-all\\_load` 它会告诉编译器对”所有文档中的所有对象文件,不管里面的符号有没有被用到,全部都载入”,这样会产生比较大的二进制文件\n\n* 2.通过在Other Linder Flags 添加 `-force\\_load 和指定路径` e.g: `-force\\_load $(SRCROOT)/RHAddressBook/libRHAddressBook.a` 这种方法会只载入指定的归档\n\n* 3.通过在Other Linder Flags 添加 `-ObjC` ,这个标识告诉编译器”如果在文档中发现了OC代码,就把文档载入” \n\n* 4.在Xcode里build setting中的 Perform Single-Object PreLink，如果启用这个选项，所有的对象文件都会被合并成一个单文件（这不是真正的链接，所以叫做预链接），这个对象文件（有时被称做主对象文件(master object file)）被添加到文档中。现在如果主对象文件中的任何符号被认为是“在使用”，整个主对象文件都会被认为在使用，这样它里面的OC部分就会被载入了。因为里面的类都被正常符号化了，所以能使从这样的静态库中使用所有的Category\n\n* 5.最后一种解决方法是在只有Category的源文件里添加Fake symbol。如果你想在运行时使用Category，一定要确保你以某种方法在编译时引用了fake symbol，这会使得对象文件以及它里面的OC代码被载入。例如，它可以是一个有空函数体的函数，也可以是一个被访问的全局变量（例如一个全局的int变量，只要它被读或者写了一次就足够了）。和上面其他的解决方法不一样，这种解决方法可以控制哪些category可以在运行时被编译后的代码使用（可以通过使用这个符号，使它们被链接并变得可用；也可以不使用这个符号，这样链接器就会忽略它）","source":"_posts/OC使用静态库中的类别/OC使用静态库中的类别.md","raw":"---\ntitle: OC使用静态库中的类别\ndate: 2017-04-05 20:02:30\ntags: iOS\n---\n\n## OC中使用静态库中的类别的问题 ##\n\nOC的源文件经过 `clang` 编译首先生成中间代码,接着通过优化生成目标代码(目标代码中包括符号表,标示了此代码中的全局符号和静态符号,还标示了导入符号等),连接器会根据符号表分析各个目标代码之间的调用关系,然后将使用到的代码进行连接和重定位,最后生成可执行文件.\n\n在编译Objective-C源文件到目标文件时,编译器并不知道方法的对应实现,只能在运行时才知道,所以编译器只会为类生成连接符号,不会对类中的方法生成连接符号,由于Category方法并不对应一个新类,所以不会生成连接符号,连接器也不会将Category方法合并到原始的类中,最终导致连接器忽略了Category方法,不会将其连接到可执行文件中.\n\n\n> 在OC使用静态库中的类别,需要设置下面5种方法中的一种\n\n\n## Other Linker Flags 设置 ##\n\n* 1. 通过在Other Linder Flags 添加 `-all\\_load` 它会告诉编译器对”所有文档中的所有对象文件,不管里面的符号有没有被用到,全部都载入”,这样会产生比较大的二进制文件\n\n* 2.通过在Other Linder Flags 添加 `-force\\_load 和指定路径` e.g: `-force\\_load $(SRCROOT)/RHAddressBook/libRHAddressBook.a` 这种方法会只载入指定的归档\n\n* 3.通过在Other Linder Flags 添加 `-ObjC` ,这个标识告诉编译器”如果在文档中发现了OC代码,就把文档载入” \n\n* 4.在Xcode里build setting中的 Perform Single-Object PreLink，如果启用这个选项，所有的对象文件都会被合并成一个单文件（这不是真正的链接，所以叫做预链接），这个对象文件（有时被称做主对象文件(master object file)）被添加到文档中。现在如果主对象文件中的任何符号被认为是“在使用”，整个主对象文件都会被认为在使用，这样它里面的OC部分就会被载入了。因为里面的类都被正常符号化了，所以能使从这样的静态库中使用所有的Category\n\n* 5.最后一种解决方法是在只有Category的源文件里添加Fake symbol。如果你想在运行时使用Category，一定要确保你以某种方法在编译时引用了fake symbol，这会使得对象文件以及它里面的OC代码被载入。例如，它可以是一个有空函数体的函数，也可以是一个被访问的全局变量（例如一个全局的int变量，只要它被读或者写了一次就足够了）。和上面其他的解决方法不一样，这种解决方法可以控制哪些category可以在运行时被编译后的代码使用（可以通过使用这个符号，使它们被链接并变得可用；也可以不使用这个符号，这样链接器就会忽略它）","slug":"OC使用静态库中的类别/OC使用静态库中的类别","published":1,"updated":"2018-07-04T09:32:28.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnfk7vot000yzb7uymubkjyq","content":"<h2 id=\"OC中使用静态库中的类别的问题\"><a href=\"#OC中使用静态库中的类别的问题\" class=\"headerlink\" title=\"OC中使用静态库中的类别的问题\"></a>OC中使用静态库中的类别的问题</h2><p>OC的源文件经过 <code>clang</code> 编译首先生成中间代码,接着通过优化生成目标代码(目标代码中包括符号表,标示了此代码中的全局符号和静态符号,还标示了导入符号等),连接器会根据符号表分析各个目标代码之间的调用关系,然后将使用到的代码进行连接和重定位,最后生成可执行文件.</p>\n<p>在编译Objective-C源文件到目标文件时,编译器并不知道方法的对应实现,只能在运行时才知道,所以编译器只会为类生成连接符号,不会对类中的方法生成连接符号,由于Category方法并不对应一个新类,所以不会生成连接符号,连接器也不会将Category方法合并到原始的类中,最终导致连接器忽略了Category方法,不会将其连接到可执行文件中.</p>\n<blockquote>\n<p>在OC使用静态库中的类别,需要设置下面5种方法中的一种</p>\n</blockquote>\n<h2 id=\"Other-Linker-Flags-设置\"><a href=\"#Other-Linker-Flags-设置\" class=\"headerlink\" title=\"Other Linker Flags 设置\"></a>Other Linker Flags 设置</h2><ul>\n<li><ol>\n<li>通过在Other Linder Flags 添加 <code>-all\\_load</code> 它会告诉编译器对”所有文档中的所有对象文件,不管里面的符号有没有被用到,全部都载入”,这样会产生比较大的二进制文件</li>\n</ol>\n</li>\n<li><p>2.通过在Other Linder Flags 添加 <code>-force\\_load 和指定路径</code> e.g: <code>-force\\_load $(SRCROOT)/RHAddressBook/libRHAddressBook.a</code> 这种方法会只载入指定的归档</p>\n</li>\n<li><p>3.通过在Other Linder Flags 添加 <code>-ObjC</code> ,这个标识告诉编译器”如果在文档中发现了OC代码,就把文档载入” </p>\n</li>\n<li><p>4.在Xcode里build setting中的 Perform Single-Object PreLink，如果启用这个选项，所有的对象文件都会被合并成一个单文件（这不是真正的链接，所以叫做预链接），这个对象文件（有时被称做主对象文件(master object file)）被添加到文档中。现在如果主对象文件中的任何符号被认为是“在使用”，整个主对象文件都会被认为在使用，这样它里面的OC部分就会被载入了。因为里面的类都被正常符号化了，所以能使从这样的静态库中使用所有的Category</p>\n</li>\n<li><p>5.最后一种解决方法是在只有Category的源文件里添加Fake symbol。如果你想在运行时使用Category，一定要确保你以某种方法在编译时引用了fake symbol，这会使得对象文件以及它里面的OC代码被载入。例如，它可以是一个有空函数体的函数，也可以是一个被访问的全局变量（例如一个全局的int变量，只要它被读或者写了一次就足够了）。和上面其他的解决方法不一样，这种解决方法可以控制哪些category可以在运行时被编译后的代码使用（可以通过使用这个符号，使它们被链接并变得可用；也可以不使用这个符号，这样链接器就会忽略它）</p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"OC中使用静态库中的类别的问题\"><a href=\"#OC中使用静态库中的类别的问题\" class=\"headerlink\" title=\"OC中使用静态库中的类别的问题\"></a>OC中使用静态库中的类别的问题</h2><p>OC的源文件经过 <code>clang</code> 编译首先生成中间代码,接着通过优化生成目标代码(目标代码中包括符号表,标示了此代码中的全局符号和静态符号,还标示了导入符号等),连接器会根据符号表分析各个目标代码之间的调用关系,然后将使用到的代码进行连接和重定位,最后生成可执行文件.</p>\n<p>在编译Objective-C源文件到目标文件时,编译器并不知道方法的对应实现,只能在运行时才知道,所以编译器只会为类生成连接符号,不会对类中的方法生成连接符号,由于Category方法并不对应一个新类,所以不会生成连接符号,连接器也不会将Category方法合并到原始的类中,最终导致连接器忽略了Category方法,不会将其连接到可执行文件中.</p>\n<blockquote>\n<p>在OC使用静态库中的类别,需要设置下面5种方法中的一种</p>\n</blockquote>\n<h2 id=\"Other-Linker-Flags-设置\"><a href=\"#Other-Linker-Flags-设置\" class=\"headerlink\" title=\"Other Linker Flags 设置\"></a>Other Linker Flags 设置</h2><ul>\n<li><ol>\n<li>通过在Other Linder Flags 添加 <code>-all\\_load</code> 它会告诉编译器对”所有文档中的所有对象文件,不管里面的符号有没有被用到,全部都载入”,这样会产生比较大的二进制文件</li>\n</ol>\n</li>\n<li><p>2.通过在Other Linder Flags 添加 <code>-force\\_load 和指定路径</code> e.g: <code>-force\\_load $(SRCROOT)/RHAddressBook/libRHAddressBook.a</code> 这种方法会只载入指定的归档</p>\n</li>\n<li><p>3.通过在Other Linder Flags 添加 <code>-ObjC</code> ,这个标识告诉编译器”如果在文档中发现了OC代码,就把文档载入” </p>\n</li>\n<li><p>4.在Xcode里build setting中的 Perform Single-Object PreLink，如果启用这个选项，所有的对象文件都会被合并成一个单文件（这不是真正的链接，所以叫做预链接），这个对象文件（有时被称做主对象文件(master object file)）被添加到文档中。现在如果主对象文件中的任何符号被认为是“在使用”，整个主对象文件都会被认为在使用，这样它里面的OC部分就会被载入了。因为里面的类都被正常符号化了，所以能使从这样的静态库中使用所有的Category</p>\n</li>\n<li><p>5.最后一种解决方法是在只有Category的源文件里添加Fake symbol。如果你想在运行时使用Category，一定要确保你以某种方法在编译时引用了fake symbol，这会使得对象文件以及它里面的OC代码被载入。例如，它可以是一个有空函数体的函数，也可以是一个被访问的全局变量（例如一个全局的int变量，只要它被读或者写了一次就足够了）。和上面其他的解决方法不一样，这种解决方法可以控制哪些category可以在运行时被编译后的代码使用（可以通过使用这个符号，使它们被链接并变得可用；也可以不使用这个符号，这样链接器就会忽略它）</p>\n</li>\n</ul>\n"},{"_content":" # WeView 介绍 #\n \n ## WeView 使用的一个简单的demo ##\n \n ![WeView_demo.png](resources/9AF089FB76B2ADB18C4B3E9423098F77.jpg)\n \n > WeView 是一个用来给iOS界面自动布局的工具库\n \n * WeView 2是iOS Auto Layout 的替代品.\n * WeView 2旨在提供一个\"简单\",\"自然\",\"易描述\",\"易维护\"的方法通过UIKit去创建动态适应的界面\n * WeView 2使用直观的描述性方法来布局,如\"alignment\"(对齐),\"margins\"(边距),\"spacing\" (间距).\n * WeView 2构建在iOS现有的大小和布局机制.\n * WeView 2是轻量级的:不超过5k行代码而且没有别的依赖.\n * WeView 2兼容iOS5及以上版本.\n * WeView 2是免费开源的,遵循\" Apache License Version 2.0\"\n * WeView 2是易学的.\n \n# 为什么使用动态布局 #\n\n> 使用动态布局的原因有很多,不管你使用的是iOS Auto Layout还是WeView.动态布局会让界面做到如下几点:\n\n1. 适应不同的屏幕尺寸\n2. 适应方向的改变(eg:横屏和竖屏)\n3. 适应设计的改变(eg:字体大小的改变,添加或移除子view,改变图片大小等)\n4. 适应文本内容的改变\n5. 适应动态内容的改变(eg:下载完成的内容)\n\n# 为什么使用WeView 2 #\n\n> 摘要: iOS Auto Layout 是一种复杂笨拙效率低下的编码方式\n\n* 概念复杂:在使用iOS Auto Layout的时候,你需要考虑\"约束优先级\",\"约束是否完全\",\"约束是否冲突\"(eg:过约束布局),\"最近共同祖先\"等,这些问题也使代码重构变的复杂\n* 缺乏基准:iOS Auto Layout 是基于一个复杂的约束处理系统,任何view的最终位置和大小都会收受到约束系统中的所有约束的影响,这些约束不需要被他们的父view持有,如果不能理解相邻view的层级就不能进行约束\n* 编码复杂:用iOS Auto Layout布局一个按钮水平居中,底部距离父view20pt\n\n## iOS Auto Layout 代码 ##\n\n```\nUIButton *button = ...;\nUIView *superview = ...;\nNSLayoutConstraint *cn = [NSLayoutConstraint constraintWithItem:button\n                                                      attribute:NSLayoutAttributeCenterX\n                                                      relatedBy:NSLayoutRelationEqual\n                                                         toItem:superview\n                                                      attribute:NSLayoutAttributeCenterX\n                                                     multiplier:1.0\n                                                       constant:0.0];\n[superview addConstraint:cn];\ncn = [NSLayoutConstraint constraintWithItem:button\n                                  attribute:NSLayoutAttributeBottom\n                                  relatedBy:NSLayoutRelationEqual\n                                     toItem:superview\n                                  attribute:NSLayoutAttributeBottom\n                                 multiplier:1.0\n                                   constant:-20.0];\n[superview addConstraint:cn];\n```\n\n## 使用Visual Format Language的Auto Layout ##\n\n```\nUIButton *button = ...;\nUIView *superview = ...;\nNSDictionary *variableMap = NSDictionaryOfVariableBindings(label, superview);\nNSLayoutConstraint *cn = [NSLayoutConstraint constraintsWithVisualFormat:@\"V:[button]-12-[superview]\"\n                                                                 options:0\n                                                                 metrics:nil\n                                                                   views:variableMap];\n[superview addConstraint:cn];\ncn = [NSLayoutConstraint constraintsWithVisualFormat:@\"H:[superview]-(<=1)-[button]\"\n                                             options:NSLayoutFormatAlignAllCenterY\n                                             metrics:nil\n                                               views:variableMap];\n[superview addConstraint:cn];\n```\n\n## 使用WeView ##\n\n```\n#import \"WeView.h\"\n\nUIButton *button = ...; \nWeView *panelView = [[WeView alloc] init]; \n[[[[panelView addSubviewWithCustomLayout:button]\n   setHAlign:H_ALIGN_CENTER]\n  setVAlign:V_ALIGN_BOTTOM]\nsetMargin:20];\n```\n\niOS Auto Layout 在xib中比较有优势,而且xib已经在Xcode5中被显著提高,但是在代码编程中自动布局还是很复杂的\n\nWeView 只能被用作代码编程,但可以被设计的简洁明了,利于维护的代码\n\n\n# 指导 1: 概述 #\n\n略\n\n# 指导 2: 安装 #\n\n添加WeView文件夹到工程中就好.\n\nWeView 2只依赖Foundation ,UIKit 和 Quartz Core库而且需要iOS 5及以上版本\n\n## Headers ##\n\n头文件通常只需要导入 ```#import \"WeView.h\" ```\n\n## Classes ##\n\n* ```WeView``` 容器是核心类,他本身只有添加子view和他们布局的方法\n* ```WeView``` 的布局是由WeViewLayout实现的\n* ```UIView + WeView``` 类别为UIView添加了许多布局属性,用来控制view怎么作为子view布局在他的父view上,这些属性存放在一个关联的对象中,且这个对象只有一个\n\n# 指导 3:术语 #\n\n## View Hierarchy (图层) ##\n\n图层是布局作用的上下文,通常我们只需要关系我们布局view的子view和父view\n\n## Superview & Subviews (父view和子view) ##\n\n在布局上下文中,Superview是父view,而他的子view是Subviews(注意:Superview只有一个但是Subviews是可以有多个的),在使用WeView 2布局的时候,通常父view是一个```WeView```,子View可以是任何类型的UIView\n\nWeView 2工作的时候子View不需要引用任何类或实现任何界面\n\n## Widgets vs. Containers (控件和容器) ##\n\nwidgets(控件) :一个界面上可见的元素 eg:button或label等\n\ncontainers(容器) :通常是一些不可见的view,用来组织结构和布局其他view eg:在HTML中DIVs通常被用作容器,在UIKit中,空白view也通常被使用.WeView 2的核心就是```WeView```容器类,通过给容器添加子view作为内容\n\n## Measurement and Arrangement ##\n\nMeasurement :是view的size推测位置的过程\neg:measurement 类似于```[UIView sizeThatFies:]```方法\n\nArrangement :是view的size决定位置的过程\neg:arrangement 类似于```[UIView layoutSubviews]```方法\n\n## Desired Size ##\n\n有时候view想要一个他们想要的大小.eg:一个button想要大小是icon的大小,或label想要大小是文本的大小.这时候的大小就是view的Desired Size\n\n使用Weview 2的时候我们可以完全放心的忽视 intrinsic size(固有大小)\n\n\n## Frame and Bounds ##\n\nUIViews 使用了两套坐标系统.\nframe :UIView的frame是他在他父view的坐标系统中的大小和位置\nbounds :UIView的bounds是他在他自己的坐标系统中的大小和位置\n\n布局子view的时候是在他的父view的坐标系中操作的,所以操作的是子view的frame.\n\n改变一个view的frame会影响他的bounds,反之也是一样的\n\n\n\n\n\n\n ","source":"_posts/WeView 2 使用翻译/WeView 2 使用翻译.md","raw":" # WeView 介绍 #\n \n ## WeView 使用的一个简单的demo ##\n \n ![WeView_demo.png](resources/9AF089FB76B2ADB18C4B3E9423098F77.jpg)\n \n > WeView 是一个用来给iOS界面自动布局的工具库\n \n * WeView 2是iOS Auto Layout 的替代品.\n * WeView 2旨在提供一个\"简单\",\"自然\",\"易描述\",\"易维护\"的方法通过UIKit去创建动态适应的界面\n * WeView 2使用直观的描述性方法来布局,如\"alignment\"(对齐),\"margins\"(边距),\"spacing\" (间距).\n * WeView 2构建在iOS现有的大小和布局机制.\n * WeView 2是轻量级的:不超过5k行代码而且没有别的依赖.\n * WeView 2兼容iOS5及以上版本.\n * WeView 2是免费开源的,遵循\" Apache License Version 2.0\"\n * WeView 2是易学的.\n \n# 为什么使用动态布局 #\n\n> 使用动态布局的原因有很多,不管你使用的是iOS Auto Layout还是WeView.动态布局会让界面做到如下几点:\n\n1. 适应不同的屏幕尺寸\n2. 适应方向的改变(eg:横屏和竖屏)\n3. 适应设计的改变(eg:字体大小的改变,添加或移除子view,改变图片大小等)\n4. 适应文本内容的改变\n5. 适应动态内容的改变(eg:下载完成的内容)\n\n# 为什么使用WeView 2 #\n\n> 摘要: iOS Auto Layout 是一种复杂笨拙效率低下的编码方式\n\n* 概念复杂:在使用iOS Auto Layout的时候,你需要考虑\"约束优先级\",\"约束是否完全\",\"约束是否冲突\"(eg:过约束布局),\"最近共同祖先\"等,这些问题也使代码重构变的复杂\n* 缺乏基准:iOS Auto Layout 是基于一个复杂的约束处理系统,任何view的最终位置和大小都会收受到约束系统中的所有约束的影响,这些约束不需要被他们的父view持有,如果不能理解相邻view的层级就不能进行约束\n* 编码复杂:用iOS Auto Layout布局一个按钮水平居中,底部距离父view20pt\n\n## iOS Auto Layout 代码 ##\n\n```\nUIButton *button = ...;\nUIView *superview = ...;\nNSLayoutConstraint *cn = [NSLayoutConstraint constraintWithItem:button\n                                                      attribute:NSLayoutAttributeCenterX\n                                                      relatedBy:NSLayoutRelationEqual\n                                                         toItem:superview\n                                                      attribute:NSLayoutAttributeCenterX\n                                                     multiplier:1.0\n                                                       constant:0.0];\n[superview addConstraint:cn];\ncn = [NSLayoutConstraint constraintWithItem:button\n                                  attribute:NSLayoutAttributeBottom\n                                  relatedBy:NSLayoutRelationEqual\n                                     toItem:superview\n                                  attribute:NSLayoutAttributeBottom\n                                 multiplier:1.0\n                                   constant:-20.0];\n[superview addConstraint:cn];\n```\n\n## 使用Visual Format Language的Auto Layout ##\n\n```\nUIButton *button = ...;\nUIView *superview = ...;\nNSDictionary *variableMap = NSDictionaryOfVariableBindings(label, superview);\nNSLayoutConstraint *cn = [NSLayoutConstraint constraintsWithVisualFormat:@\"V:[button]-12-[superview]\"\n                                                                 options:0\n                                                                 metrics:nil\n                                                                   views:variableMap];\n[superview addConstraint:cn];\ncn = [NSLayoutConstraint constraintsWithVisualFormat:@\"H:[superview]-(<=1)-[button]\"\n                                             options:NSLayoutFormatAlignAllCenterY\n                                             metrics:nil\n                                               views:variableMap];\n[superview addConstraint:cn];\n```\n\n## 使用WeView ##\n\n```\n#import \"WeView.h\"\n\nUIButton *button = ...; \nWeView *panelView = [[WeView alloc] init]; \n[[[[panelView addSubviewWithCustomLayout:button]\n   setHAlign:H_ALIGN_CENTER]\n  setVAlign:V_ALIGN_BOTTOM]\nsetMargin:20];\n```\n\niOS Auto Layout 在xib中比较有优势,而且xib已经在Xcode5中被显著提高,但是在代码编程中自动布局还是很复杂的\n\nWeView 只能被用作代码编程,但可以被设计的简洁明了,利于维护的代码\n\n\n# 指导 1: 概述 #\n\n略\n\n# 指导 2: 安装 #\n\n添加WeView文件夹到工程中就好.\n\nWeView 2只依赖Foundation ,UIKit 和 Quartz Core库而且需要iOS 5及以上版本\n\n## Headers ##\n\n头文件通常只需要导入 ```#import \"WeView.h\" ```\n\n## Classes ##\n\n* ```WeView``` 容器是核心类,他本身只有添加子view和他们布局的方法\n* ```WeView``` 的布局是由WeViewLayout实现的\n* ```UIView + WeView``` 类别为UIView添加了许多布局属性,用来控制view怎么作为子view布局在他的父view上,这些属性存放在一个关联的对象中,且这个对象只有一个\n\n# 指导 3:术语 #\n\n## View Hierarchy (图层) ##\n\n图层是布局作用的上下文,通常我们只需要关系我们布局view的子view和父view\n\n## Superview & Subviews (父view和子view) ##\n\n在布局上下文中,Superview是父view,而他的子view是Subviews(注意:Superview只有一个但是Subviews是可以有多个的),在使用WeView 2布局的时候,通常父view是一个```WeView```,子View可以是任何类型的UIView\n\nWeView 2工作的时候子View不需要引用任何类或实现任何界面\n\n## Widgets vs. Containers (控件和容器) ##\n\nwidgets(控件) :一个界面上可见的元素 eg:button或label等\n\ncontainers(容器) :通常是一些不可见的view,用来组织结构和布局其他view eg:在HTML中DIVs通常被用作容器,在UIKit中,空白view也通常被使用.WeView 2的核心就是```WeView```容器类,通过给容器添加子view作为内容\n\n## Measurement and Arrangement ##\n\nMeasurement :是view的size推测位置的过程\neg:measurement 类似于```[UIView sizeThatFies:]```方法\n\nArrangement :是view的size决定位置的过程\neg:arrangement 类似于```[UIView layoutSubviews]```方法\n\n## Desired Size ##\n\n有时候view想要一个他们想要的大小.eg:一个button想要大小是icon的大小,或label想要大小是文本的大小.这时候的大小就是view的Desired Size\n\n使用Weview 2的时候我们可以完全放心的忽视 intrinsic size(固有大小)\n\n\n## Frame and Bounds ##\n\nUIViews 使用了两套坐标系统.\nframe :UIView的frame是他在他父view的坐标系统中的大小和位置\nbounds :UIView的bounds是他在他自己的坐标系统中的大小和位置\n\n布局子view的时候是在他的父view的坐标系中操作的,所以操作的是子view的frame.\n\n改变一个view的frame会影响他的bounds,反之也是一样的\n\n\n\n\n\n\n ","slug":"WeView 2 使用翻译/WeView 2 使用翻译","published":1,"date":"2018-07-04T09:32:19.676Z","updated":"2018-07-04T09:32:19.677Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnfk7vow000zzb7ucq8sjmqe","content":"<h1 id=\"WeView-介绍\"><a href=\"#WeView-介绍\" class=\"headerlink\" title=\"WeView 介绍\"></a>WeView 介绍</h1><h2 id=\"WeView-使用的一个简单的demo\"><a href=\"#WeView-使用的一个简单的demo\" class=\"headerlink\" title=\"WeView 使用的一个简单的demo\"></a>WeView 使用的一个简单的demo</h2><p> <img src=\"resources/9AF089FB76B2ADB18C4B3E9423098F77.jpg\" alt=\"WeView_demo.png\"></p>\n<blockquote>\n<p>WeView 是一个用来给iOS界面自动布局的工具库</p>\n</blockquote>\n<ul>\n<li>WeView 2是iOS Auto Layout 的替代品.</li>\n<li>WeView 2旨在提供一个”简单”,”自然”,”易描述”,”易维护”的方法通过UIKit去创建动态适应的界面</li>\n<li>WeView 2使用直观的描述性方法来布局,如”alignment”(对齐),”margins”(边距),”spacing” (间距).</li>\n<li>WeView 2构建在iOS现有的大小和布局机制.</li>\n<li>WeView 2是轻量级的:不超过5k行代码而且没有别的依赖.</li>\n<li>WeView 2兼容iOS5及以上版本.</li>\n<li>WeView 2是免费开源的,遵循” Apache License Version 2.0”</li>\n<li>WeView 2是易学的.</li>\n</ul>\n<h1 id=\"为什么使用动态布局\"><a href=\"#为什么使用动态布局\" class=\"headerlink\" title=\"为什么使用动态布局\"></a>为什么使用动态布局</h1><blockquote>\n<p>使用动态布局的原因有很多,不管你使用的是iOS Auto Layout还是WeView.动态布局会让界面做到如下几点:</p>\n</blockquote>\n<ol>\n<li>适应不同的屏幕尺寸</li>\n<li>适应方向的改变(eg:横屏和竖屏)</li>\n<li>适应设计的改变(eg:字体大小的改变,添加或移除子view,改变图片大小等)</li>\n<li>适应文本内容的改变</li>\n<li>适应动态内容的改变(eg:下载完成的内容)</li>\n</ol>\n<h1 id=\"为什么使用WeView-2\"><a href=\"#为什么使用WeView-2\" class=\"headerlink\" title=\"为什么使用WeView 2\"></a>为什么使用WeView 2</h1><blockquote>\n<p>摘要: iOS Auto Layout 是一种复杂笨拙效率低下的编码方式</p>\n</blockquote>\n<ul>\n<li>概念复杂:在使用iOS Auto Layout的时候,你需要考虑”约束优先级”,”约束是否完全”,”约束是否冲突”(eg:过约束布局),”最近共同祖先”等,这些问题也使代码重构变的复杂</li>\n<li>缺乏基准:iOS Auto Layout 是基于一个复杂的约束处理系统,任何view的最终位置和大小都会收受到约束系统中的所有约束的影响,这些约束不需要被他们的父view持有,如果不能理解相邻view的层级就不能进行约束</li>\n<li>编码复杂:用iOS Auto Layout布局一个按钮水平居中,底部距离父view20pt</li>\n</ul>\n<h2 id=\"iOS-Auto-Layout-代码\"><a href=\"#iOS-Auto-Layout-代码\" class=\"headerlink\" title=\"iOS Auto Layout 代码\"></a>iOS Auto Layout 代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">UIButton *button = ...;</div><div class=\"line\">UIView *superview = ...;</div><div class=\"line\">NSLayoutConstraint *cn = [NSLayoutConstraint constraintWithItem:button</div><div class=\"line\">                                                      attribute:NSLayoutAttributeCenterX</div><div class=\"line\">                                                      relatedBy:NSLayoutRelationEqual</div><div class=\"line\">                                                         toItem:superview</div><div class=\"line\">                                                      attribute:NSLayoutAttributeCenterX</div><div class=\"line\">                                                     multiplier:1.0</div><div class=\"line\">                                                       constant:0.0];</div><div class=\"line\">[superview addConstraint:cn];</div><div class=\"line\">cn = [NSLayoutConstraint constraintWithItem:button</div><div class=\"line\">                                  attribute:NSLayoutAttributeBottom</div><div class=\"line\">                                  relatedBy:NSLayoutRelationEqual</div><div class=\"line\">                                     toItem:superview</div><div class=\"line\">                                  attribute:NSLayoutAttributeBottom</div><div class=\"line\">                                 multiplier:1.0</div><div class=\"line\">                                   constant:-20.0];</div><div class=\"line\">[superview addConstraint:cn];</div></pre></td></tr></table></figure>\n<h2 id=\"使用Visual-Format-Language的Auto-Layout\"><a href=\"#使用Visual-Format-Language的Auto-Layout\" class=\"headerlink\" title=\"使用Visual Format Language的Auto Layout\"></a>使用Visual Format Language的Auto Layout</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">UIButton *button = ...;</div><div class=\"line\">UIView *superview = ...;</div><div class=\"line\">NSDictionary *variableMap = NSDictionaryOfVariableBindings(label, superview);</div><div class=\"line\">NSLayoutConstraint *cn = [NSLayoutConstraint constraintsWithVisualFormat:@&quot;V:[button]-12-[superview]&quot;</div><div class=\"line\">                                                                 options:0</div><div class=\"line\">                                                                 metrics:nil</div><div class=\"line\">                                                                   views:variableMap];</div><div class=\"line\">[superview addConstraint:cn];</div><div class=\"line\">cn = [NSLayoutConstraint constraintsWithVisualFormat:@&quot;H:[superview]-(&lt;=1)-[button]&quot;</div><div class=\"line\">                                             options:NSLayoutFormatAlignAllCenterY</div><div class=\"line\">                                             metrics:nil</div><div class=\"line\">                                               views:variableMap];</div><div class=\"line\">[superview addConstraint:cn];</div></pre></td></tr></table></figure>\n<h2 id=\"使用WeView\"><a href=\"#使用WeView\" class=\"headerlink\" title=\"使用WeView\"></a>使用WeView</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &quot;WeView.h&quot;</div><div class=\"line\"></div><div class=\"line\">UIButton *button = ...; </div><div class=\"line\">WeView *panelView = [[WeView alloc] init]; </div><div class=\"line\">[[[[panelView addSubviewWithCustomLayout:button]</div><div class=\"line\">   setHAlign:H_ALIGN_CENTER]</div><div class=\"line\">  setVAlign:V_ALIGN_BOTTOM]</div><div class=\"line\">setMargin:20];</div></pre></td></tr></table></figure>\n<p>iOS Auto Layout 在xib中比较有优势,而且xib已经在Xcode5中被显著提高,但是在代码编程中自动布局还是很复杂的</p>\n<p>WeView 只能被用作代码编程,但可以被设计的简洁明了,利于维护的代码</p>\n<h1 id=\"指导-1-概述\"><a href=\"#指导-1-概述\" class=\"headerlink\" title=\"指导 1: 概述\"></a>指导 1: 概述</h1><p>略</p>\n<h1 id=\"指导-2-安装\"><a href=\"#指导-2-安装\" class=\"headerlink\" title=\"指导 2: 安装\"></a>指导 2: 安装</h1><p>添加WeView文件夹到工程中就好.</p>\n<p>WeView 2只依赖Foundation ,UIKit 和 Quartz Core库而且需要iOS 5及以上版本</p>\n<h2 id=\"Headers\"><a href=\"#Headers\" class=\"headerlink\" title=\"Headers\"></a>Headers</h2><p>头文件通常只需要导入 <code>#import &quot;WeView.h&quot;</code></p>\n<h2 id=\"Classes\"><a href=\"#Classes\" class=\"headerlink\" title=\"Classes\"></a>Classes</h2><ul>\n<li><code>WeView</code> 容器是核心类,他本身只有添加子view和他们布局的方法</li>\n<li><code>WeView</code> 的布局是由WeViewLayout实现的</li>\n<li><code>UIView + WeView</code> 类别为UIView添加了许多布局属性,用来控制view怎么作为子view布局在他的父view上,这些属性存放在一个关联的对象中,且这个对象只有一个</li>\n</ul>\n<h1 id=\"指导-3-术语\"><a href=\"#指导-3-术语\" class=\"headerlink\" title=\"指导 3:术语\"></a>指导 3:术语</h1><h2 id=\"View-Hierarchy-图层\"><a href=\"#View-Hierarchy-图层\" class=\"headerlink\" title=\"View Hierarchy (图层)\"></a>View Hierarchy (图层)</h2><p>图层是布局作用的上下文,通常我们只需要关系我们布局view的子view和父view</p>\n<h2 id=\"Superview-amp-Subviews-父view和子view\"><a href=\"#Superview-amp-Subviews-父view和子view\" class=\"headerlink\" title=\"Superview &amp; Subviews (父view和子view)\"></a>Superview &amp; Subviews (父view和子view)</h2><p>在布局上下文中,Superview是父view,而他的子view是Subviews(注意:Superview只有一个但是Subviews是可以有多个的),在使用WeView 2布局的时候,通常父view是一个<code>WeView</code>,子View可以是任何类型的UIView</p>\n<p>WeView 2工作的时候子View不需要引用任何类或实现任何界面</p>\n<h2 id=\"Widgets-vs-Containers-控件和容器\"><a href=\"#Widgets-vs-Containers-控件和容器\" class=\"headerlink\" title=\"Widgets vs. Containers (控件和容器)\"></a>Widgets vs. Containers (控件和容器)</h2><p>widgets(控件) :一个界面上可见的元素 eg:button或label等</p>\n<p>containers(容器) :通常是一些不可见的view,用来组织结构和布局其他view eg:在HTML中DIVs通常被用作容器,在UIKit中,空白view也通常被使用.WeView 2的核心就是<code>WeView</code>容器类,通过给容器添加子view作为内容</p>\n<h2 id=\"Measurement-and-Arrangement\"><a href=\"#Measurement-and-Arrangement\" class=\"headerlink\" title=\"Measurement and Arrangement\"></a>Measurement and Arrangement</h2><p>Measurement :是view的size推测位置的过程<br>eg:measurement 类似于<code>[UIView sizeThatFies:]</code>方法</p>\n<p>Arrangement :是view的size决定位置的过程<br>eg:arrangement 类似于<code>[UIView layoutSubviews]</code>方法</p>\n<h2 id=\"Desired-Size\"><a href=\"#Desired-Size\" class=\"headerlink\" title=\"Desired Size\"></a>Desired Size</h2><p>有时候view想要一个他们想要的大小.eg:一个button想要大小是icon的大小,或label想要大小是文本的大小.这时候的大小就是view的Desired Size</p>\n<p>使用Weview 2的时候我们可以完全放心的忽视 intrinsic size(固有大小)</p>\n<h2 id=\"Frame-and-Bounds\"><a href=\"#Frame-and-Bounds\" class=\"headerlink\" title=\"Frame and Bounds\"></a>Frame and Bounds</h2><p>UIViews 使用了两套坐标系统.<br>frame :UIView的frame是他在他父view的坐标系统中的大小和位置<br>bounds :UIView的bounds是他在他自己的坐标系统中的大小和位置</p>\n<p>布局子view的时候是在他的父view的坐标系中操作的,所以操作的是子view的frame.</p>\n<p>改变一个view的frame会影响他的bounds,反之也是一样的</p>\n","excerpt":"","more":"<h1 id=\"WeView-介绍\"><a href=\"#WeView-介绍\" class=\"headerlink\" title=\"WeView 介绍\"></a>WeView 介绍</h1><h2 id=\"WeView-使用的一个简单的demo\"><a href=\"#WeView-使用的一个简单的demo\" class=\"headerlink\" title=\"WeView 使用的一个简单的demo\"></a>WeView 使用的一个简单的demo</h2><p> <img src=\"resources/9AF089FB76B2ADB18C4B3E9423098F77.jpg\" alt=\"WeView_demo.png\"></p>\n<blockquote>\n<p>WeView 是一个用来给iOS界面自动布局的工具库</p>\n</blockquote>\n<ul>\n<li>WeView 2是iOS Auto Layout 的替代品.</li>\n<li>WeView 2旨在提供一个”简单”,”自然”,”易描述”,”易维护”的方法通过UIKit去创建动态适应的界面</li>\n<li>WeView 2使用直观的描述性方法来布局,如”alignment”(对齐),”margins”(边距),”spacing” (间距).</li>\n<li>WeView 2构建在iOS现有的大小和布局机制.</li>\n<li>WeView 2是轻量级的:不超过5k行代码而且没有别的依赖.</li>\n<li>WeView 2兼容iOS5及以上版本.</li>\n<li>WeView 2是免费开源的,遵循” Apache License Version 2.0”</li>\n<li>WeView 2是易学的.</li>\n</ul>\n<h1 id=\"为什么使用动态布局\"><a href=\"#为什么使用动态布局\" class=\"headerlink\" title=\"为什么使用动态布局\"></a>为什么使用动态布局</h1><blockquote>\n<p>使用动态布局的原因有很多,不管你使用的是iOS Auto Layout还是WeView.动态布局会让界面做到如下几点:</p>\n</blockquote>\n<ol>\n<li>适应不同的屏幕尺寸</li>\n<li>适应方向的改变(eg:横屏和竖屏)</li>\n<li>适应设计的改变(eg:字体大小的改变,添加或移除子view,改变图片大小等)</li>\n<li>适应文本内容的改变</li>\n<li>适应动态内容的改变(eg:下载完成的内容)</li>\n</ol>\n<h1 id=\"为什么使用WeView-2\"><a href=\"#为什么使用WeView-2\" class=\"headerlink\" title=\"为什么使用WeView 2\"></a>为什么使用WeView 2</h1><blockquote>\n<p>摘要: iOS Auto Layout 是一种复杂笨拙效率低下的编码方式</p>\n</blockquote>\n<ul>\n<li>概念复杂:在使用iOS Auto Layout的时候,你需要考虑”约束优先级”,”约束是否完全”,”约束是否冲突”(eg:过约束布局),”最近共同祖先”等,这些问题也使代码重构变的复杂</li>\n<li>缺乏基准:iOS Auto Layout 是基于一个复杂的约束处理系统,任何view的最终位置和大小都会收受到约束系统中的所有约束的影响,这些约束不需要被他们的父view持有,如果不能理解相邻view的层级就不能进行约束</li>\n<li>编码复杂:用iOS Auto Layout布局一个按钮水平居中,底部距离父view20pt</li>\n</ul>\n<h2 id=\"iOS-Auto-Layout-代码\"><a href=\"#iOS-Auto-Layout-代码\" class=\"headerlink\" title=\"iOS Auto Layout 代码\"></a>iOS Auto Layout 代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">UIButton *button = ...;</div><div class=\"line\">UIView *superview = ...;</div><div class=\"line\">NSLayoutConstraint *cn = [NSLayoutConstraint constraintWithItem:button</div><div class=\"line\">                                                      attribute:NSLayoutAttributeCenterX</div><div class=\"line\">                                                      relatedBy:NSLayoutRelationEqual</div><div class=\"line\">                                                         toItem:superview</div><div class=\"line\">                                                      attribute:NSLayoutAttributeCenterX</div><div class=\"line\">                                                     multiplier:1.0</div><div class=\"line\">                                                       constant:0.0];</div><div class=\"line\">[superview addConstraint:cn];</div><div class=\"line\">cn = [NSLayoutConstraint constraintWithItem:button</div><div class=\"line\">                                  attribute:NSLayoutAttributeBottom</div><div class=\"line\">                                  relatedBy:NSLayoutRelationEqual</div><div class=\"line\">                                     toItem:superview</div><div class=\"line\">                                  attribute:NSLayoutAttributeBottom</div><div class=\"line\">                                 multiplier:1.0</div><div class=\"line\">                                   constant:-20.0];</div><div class=\"line\">[superview addConstraint:cn];</div></pre></td></tr></table></figure>\n<h2 id=\"使用Visual-Format-Language的Auto-Layout\"><a href=\"#使用Visual-Format-Language的Auto-Layout\" class=\"headerlink\" title=\"使用Visual Format Language的Auto Layout\"></a>使用Visual Format Language的Auto Layout</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">UIButton *button = ...;</div><div class=\"line\">UIView *superview = ...;</div><div class=\"line\">NSDictionary *variableMap = NSDictionaryOfVariableBindings(label, superview);</div><div class=\"line\">NSLayoutConstraint *cn = [NSLayoutConstraint constraintsWithVisualFormat:@&quot;V:[button]-12-[superview]&quot;</div><div class=\"line\">                                                                 options:0</div><div class=\"line\">                                                                 metrics:nil</div><div class=\"line\">                                                                   views:variableMap];</div><div class=\"line\">[superview addConstraint:cn];</div><div class=\"line\">cn = [NSLayoutConstraint constraintsWithVisualFormat:@&quot;H:[superview]-(&lt;=1)-[button]&quot;</div><div class=\"line\">                                             options:NSLayoutFormatAlignAllCenterY</div><div class=\"line\">                                             metrics:nil</div><div class=\"line\">                                               views:variableMap];</div><div class=\"line\">[superview addConstraint:cn];</div></pre></td></tr></table></figure>\n<h2 id=\"使用WeView\"><a href=\"#使用WeView\" class=\"headerlink\" title=\"使用WeView\"></a>使用WeView</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &quot;WeView.h&quot;</div><div class=\"line\"></div><div class=\"line\">UIButton *button = ...; </div><div class=\"line\">WeView *panelView = [[WeView alloc] init]; </div><div class=\"line\">[[[[panelView addSubviewWithCustomLayout:button]</div><div class=\"line\">   setHAlign:H_ALIGN_CENTER]</div><div class=\"line\">  setVAlign:V_ALIGN_BOTTOM]</div><div class=\"line\">setMargin:20];</div></pre></td></tr></table></figure>\n<p>iOS Auto Layout 在xib中比较有优势,而且xib已经在Xcode5中被显著提高,但是在代码编程中自动布局还是很复杂的</p>\n<p>WeView 只能被用作代码编程,但可以被设计的简洁明了,利于维护的代码</p>\n<h1 id=\"指导-1-概述\"><a href=\"#指导-1-概述\" class=\"headerlink\" title=\"指导 1: 概述\"></a>指导 1: 概述</h1><p>略</p>\n<h1 id=\"指导-2-安装\"><a href=\"#指导-2-安装\" class=\"headerlink\" title=\"指导 2: 安装\"></a>指导 2: 安装</h1><p>添加WeView文件夹到工程中就好.</p>\n<p>WeView 2只依赖Foundation ,UIKit 和 Quartz Core库而且需要iOS 5及以上版本</p>\n<h2 id=\"Headers\"><a href=\"#Headers\" class=\"headerlink\" title=\"Headers\"></a>Headers</h2><p>头文件通常只需要导入 <code>#import &quot;WeView.h&quot;</code></p>\n<h2 id=\"Classes\"><a href=\"#Classes\" class=\"headerlink\" title=\"Classes\"></a>Classes</h2><ul>\n<li><code>WeView</code> 容器是核心类,他本身只有添加子view和他们布局的方法</li>\n<li><code>WeView</code> 的布局是由WeViewLayout实现的</li>\n<li><code>UIView + WeView</code> 类别为UIView添加了许多布局属性,用来控制view怎么作为子view布局在他的父view上,这些属性存放在一个关联的对象中,且这个对象只有一个</li>\n</ul>\n<h1 id=\"指导-3-术语\"><a href=\"#指导-3-术语\" class=\"headerlink\" title=\"指导 3:术语\"></a>指导 3:术语</h1><h2 id=\"View-Hierarchy-图层\"><a href=\"#View-Hierarchy-图层\" class=\"headerlink\" title=\"View Hierarchy (图层)\"></a>View Hierarchy (图层)</h2><p>图层是布局作用的上下文,通常我们只需要关系我们布局view的子view和父view</p>\n<h2 id=\"Superview-amp-Subviews-父view和子view\"><a href=\"#Superview-amp-Subviews-父view和子view\" class=\"headerlink\" title=\"Superview &amp; Subviews (父view和子view)\"></a>Superview &amp; Subviews (父view和子view)</h2><p>在布局上下文中,Superview是父view,而他的子view是Subviews(注意:Superview只有一个但是Subviews是可以有多个的),在使用WeView 2布局的时候,通常父view是一个<code>WeView</code>,子View可以是任何类型的UIView</p>\n<p>WeView 2工作的时候子View不需要引用任何类或实现任何界面</p>\n<h2 id=\"Widgets-vs-Containers-控件和容器\"><a href=\"#Widgets-vs-Containers-控件和容器\" class=\"headerlink\" title=\"Widgets vs. Containers (控件和容器)\"></a>Widgets vs. Containers (控件和容器)</h2><p>widgets(控件) :一个界面上可见的元素 eg:button或label等</p>\n<p>containers(容器) :通常是一些不可见的view,用来组织结构和布局其他view eg:在HTML中DIVs通常被用作容器,在UIKit中,空白view也通常被使用.WeView 2的核心就是<code>WeView</code>容器类,通过给容器添加子view作为内容</p>\n<h2 id=\"Measurement-and-Arrangement\"><a href=\"#Measurement-and-Arrangement\" class=\"headerlink\" title=\"Measurement and Arrangement\"></a>Measurement and Arrangement</h2><p>Measurement :是view的size推测位置的过程<br>eg:measurement 类似于<code>[UIView sizeThatFies:]</code>方法</p>\n<p>Arrangement :是view的size决定位置的过程<br>eg:arrangement 类似于<code>[UIView layoutSubviews]</code>方法</p>\n<h2 id=\"Desired-Size\"><a href=\"#Desired-Size\" class=\"headerlink\" title=\"Desired Size\"></a>Desired Size</h2><p>有时候view想要一个他们想要的大小.eg:一个button想要大小是icon的大小,或label想要大小是文本的大小.这时候的大小就是view的Desired Size</p>\n<p>使用Weview 2的时候我们可以完全放心的忽视 intrinsic size(固有大小)</p>\n<h2 id=\"Frame-and-Bounds\"><a href=\"#Frame-and-Bounds\" class=\"headerlink\" title=\"Frame and Bounds\"></a>Frame and Bounds</h2><p>UIViews 使用了两套坐标系统.<br>frame :UIView的frame是他在他父view的坐标系统中的大小和位置<br>bounds :UIView的bounds是他在他自己的坐标系统中的大小和位置</p>\n<p>布局子view的时候是在他的父view的坐标系中操作的,所以操作的是子view的frame.</p>\n<p>改变一个view的frame会影响他的bounds,反之也是一样的</p>\n"},{"_content":"##普通的枚举\n\n###第一种实现方式\n\n```objectivec\ntypedef enum {\n    EnumTypeTop,\n    EnumTypeBottom\n}EnumType\n```\n\n###第二种实现方式\n\n```objectivec\ntypedef NS_ENUM(NSInteger,EnumType) {\n    EnumTypeTop,\n    EnumTypeBottom\n};\n```\n\n枚举的作用就是增加程序的可读性,将原来使用数值代表的状态转换成自然语言中有相应含义的单词,所以这样写出来的代码更易读懂。编译器会为枚举分配一个独有的编号,从0开始,每个枚举递增1\n\n##移位枚举\n\n###实现方式\n\n```objectivec\ntypedef NS_OPTIONS(NSUInteger, EnumType) {\n   EnumTypeNone  = 0,     // 0000 0000   0\n   EnumTypeTop    = 1<<0, // 0000 0001   1\n   EnumTypeBottom = 1<<1, // 0000 0010   2\n   EnumTypeLeft   = 1<<2, // 0000 0100   4\n   EnumTypeRight  = 1<<3, // 0000 1000   8\n   EnumTypeCenter = 1<<4, // 0001 0000   16\n   EnumTypeHeight = 1<<5, // 0010 0000   32\n   EnumTypeWidth  = 1<<6  // 0100 0000   64\n   \n}\n```\n\n上面就是一个移位枚举, 和普通的枚举的区别就是,每个状态的值不是递增的,而是用只有1个二进制位的值是1数字表示的,这么做的好处就是可以对状态值进行\"位或\"运算,从而实现同时使用多个枚举\n\n\n```objectivec\n\n- (void)testEnum {\n    [self needMutEnum:EnumTypeTop | EnumTypeBottom | EnumTypeLeft | EnumTypeRight | EnumTypeCenter];\n} \n\n- (void)needMutEnum:(EnumType) type {\n    if (type==0) {\n      NSLog(@\"EnumTypeNone\");\n      return;\n    }\n    if (type & EnumTypeTop) {\n        NSLog(@\"EnumTypeTop\");\n    }\n    if (type & EnumTypeBottom) {\n        NSLog(@\"EnumTypeBottom\");\n    }\n    if (type & EnumTypeLeft) {\n        NSLog(@\"EnumTypeLeft\");\n\n    }\n    if (type & EnumTypeRight) {\n        NSLog(@\"EnumTypeRight\");\n\n    }\n    if (type & EnumTypeCenter) {\n        NSLog(@\"EnumTypeCenter\");\n\n    }\n    if (type & EnumTypeHeight) {\n        NSLog(@\"EnumTypeHeight\");\n\n    }\n    if (type & EnumTypeWidth) {\n        NSLog(@\"EnumTypeWidth\");\n    }\n}\n```\n\n输出\n\n```\nEnumTypeTop\nEnumTypeBottom\nEnumTypeLeft\nEnumTypeRight\nEnumTypeCenter\n```\n\n这样就实现了同时使用多个枚举\n\n####原因\n\"位或\"和\"位与\"运算\n\"位或\": 0 | 0 = 0 ; 0 | 1 = 1 ; 1 | 1 = 1;\n\"位与\": 0 & 0 = 0 ; 0 & 1 = 0 ; 1 & 1 = 1;\n\n对移位枚举进行\"位或\"运算 \nEnumTypeTop | EnumTypeBottom | EnumTypeLeft | EnumTypeRight | EnumTypeCenter 转换成二进制就是\n\n0000 0001 | 0000 0010 | 0000 0100 | 0000 1000 | 0010 0000 = 0011 1111  其10进制的值时63\n\n所以\"needMutEnum\"这个方法传入的值```type```是十进制的63\n\n使用的时候又用```type```的值和枚举做\"位与运算\"\n\n63的二进制是 0011 1111  EnumTypeTop的二进制是 0000 0001\n\"位与\"运算的结果就是 0000 0001\n\n也就是说传入的```type```的值转换成二进制,那个位上是```1```,对应的那个类型的枚举就被传入了\n\n但是要注意的是,如果不需要None的状态,就不要把第一个枚举状态设置成```0```","source":"_posts/枚举的实现方式(移位枚举)/枚举的实现方式(移位枚举).md","raw":"##普通的枚举\n\n###第一种实现方式\n\n```objectivec\ntypedef enum {\n    EnumTypeTop,\n    EnumTypeBottom\n}EnumType\n```\n\n###第二种实现方式\n\n```objectivec\ntypedef NS_ENUM(NSInteger,EnumType) {\n    EnumTypeTop,\n    EnumTypeBottom\n};\n```\n\n枚举的作用就是增加程序的可读性,将原来使用数值代表的状态转换成自然语言中有相应含义的单词,所以这样写出来的代码更易读懂。编译器会为枚举分配一个独有的编号,从0开始,每个枚举递增1\n\n##移位枚举\n\n###实现方式\n\n```objectivec\ntypedef NS_OPTIONS(NSUInteger, EnumType) {\n   EnumTypeNone  = 0,     // 0000 0000   0\n   EnumTypeTop    = 1<<0, // 0000 0001   1\n   EnumTypeBottom = 1<<1, // 0000 0010   2\n   EnumTypeLeft   = 1<<2, // 0000 0100   4\n   EnumTypeRight  = 1<<3, // 0000 1000   8\n   EnumTypeCenter = 1<<4, // 0001 0000   16\n   EnumTypeHeight = 1<<5, // 0010 0000   32\n   EnumTypeWidth  = 1<<6  // 0100 0000   64\n   \n}\n```\n\n上面就是一个移位枚举, 和普通的枚举的区别就是,每个状态的值不是递增的,而是用只有1个二进制位的值是1数字表示的,这么做的好处就是可以对状态值进行\"位或\"运算,从而实现同时使用多个枚举\n\n\n```objectivec\n\n- (void)testEnum {\n    [self needMutEnum:EnumTypeTop | EnumTypeBottom | EnumTypeLeft | EnumTypeRight | EnumTypeCenter];\n} \n\n- (void)needMutEnum:(EnumType) type {\n    if (type==0) {\n      NSLog(@\"EnumTypeNone\");\n      return;\n    }\n    if (type & EnumTypeTop) {\n        NSLog(@\"EnumTypeTop\");\n    }\n    if (type & EnumTypeBottom) {\n        NSLog(@\"EnumTypeBottom\");\n    }\n    if (type & EnumTypeLeft) {\n        NSLog(@\"EnumTypeLeft\");\n\n    }\n    if (type & EnumTypeRight) {\n        NSLog(@\"EnumTypeRight\");\n\n    }\n    if (type & EnumTypeCenter) {\n        NSLog(@\"EnumTypeCenter\");\n\n    }\n    if (type & EnumTypeHeight) {\n        NSLog(@\"EnumTypeHeight\");\n\n    }\n    if (type & EnumTypeWidth) {\n        NSLog(@\"EnumTypeWidth\");\n    }\n}\n```\n\n输出\n\n```\nEnumTypeTop\nEnumTypeBottom\nEnumTypeLeft\nEnumTypeRight\nEnumTypeCenter\n```\n\n这样就实现了同时使用多个枚举\n\n####原因\n\"位或\"和\"位与\"运算\n\"位或\": 0 | 0 = 0 ; 0 | 1 = 1 ; 1 | 1 = 1;\n\"位与\": 0 & 0 = 0 ; 0 & 1 = 0 ; 1 & 1 = 1;\n\n对移位枚举进行\"位或\"运算 \nEnumTypeTop | EnumTypeBottom | EnumTypeLeft | EnumTypeRight | EnumTypeCenter 转换成二进制就是\n\n0000 0001 | 0000 0010 | 0000 0100 | 0000 1000 | 0010 0000 = 0011 1111  其10进制的值时63\n\n所以\"needMutEnum\"这个方法传入的值```type```是十进制的63\n\n使用的时候又用```type```的值和枚举做\"位与运算\"\n\n63的二进制是 0011 1111  EnumTypeTop的二进制是 0000 0001\n\"位与\"运算的结果就是 0000 0001\n\n也就是说传入的```type```的值转换成二进制,那个位上是```1```,对应的那个类型的枚举就被传入了\n\n但是要注意的是,如果不需要None的状态,就不要把第一个枚举状态设置成```0```","slug":"枚举的实现方式(移位枚举)/枚举的实现方式(移位枚举)","published":1,"date":"2018-07-04T09:31:39.035Z","updated":"2018-07-04T09:31:39.035Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnfk7voz0011zb7ucyakulur","content":"<p>##普通的枚举</p>\n<p>###第一种实现方式</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> &#123;</div><div class=\"line\">    EnumTypeTop,</div><div class=\"line\">    EnumTypeBottom</div><div class=\"line\">&#125;EnumType</div></pre></td></tr></table></figure>\n<p>###第二种实现方式</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_ENUM</span>(<span class=\"built_in\">NSInteger</span>,EnumType) &#123;</div><div class=\"line\">    EnumTypeTop,</div><div class=\"line\">    EnumTypeBottom</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>枚举的作用就是增加程序的可读性,将原来使用数值代表的状态转换成自然语言中有相应含义的单词,所以这样写出来的代码更易读懂。编译器会为枚举分配一个独有的编号,从0开始,每个枚举递增1</p>\n<p>##移位枚举</p>\n<p>###实现方式</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_OPTIONS</span>(<span class=\"built_in\">NSUInteger</span>, EnumType) &#123;</div><div class=\"line\">   EnumTypeNone  = <span class=\"number\">0</span>,     <span class=\"comment\">// 0000 0000   0</span></div><div class=\"line\">   EnumTypeTop    = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">0</span>, <span class=\"comment\">// 0000 0001   1</span></div><div class=\"line\">   EnumTypeBottom = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">1</span>, <span class=\"comment\">// 0000 0010   2</span></div><div class=\"line\">   EnumTypeLeft   = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">2</span>, <span class=\"comment\">// 0000 0100   4</span></div><div class=\"line\">   EnumTypeRight  = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">3</span>, <span class=\"comment\">// 0000 1000   8</span></div><div class=\"line\">   EnumTypeCenter = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">4</span>, <span class=\"comment\">// 0001 0000   16</span></div><div class=\"line\">   EnumTypeHeight = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">5</span>, <span class=\"comment\">// 0010 0000   32</span></div><div class=\"line\">   EnumTypeWidth  = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">6</span>  <span class=\"comment\">// 0100 0000   64</span></div><div class=\"line\">   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面就是一个移位枚举, 和普通的枚举的区别就是,每个状态的值不是递增的,而是用只有1个二进制位的值是1数字表示的,这么做的好处就是可以对状态值进行”位或”运算,从而实现同时使用多个枚举</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)testEnum &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> needMutEnum:EnumTypeTop | EnumTypeBottom | EnumTypeLeft | EnumTypeRight | EnumTypeCenter];</div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)needMutEnum:(EnumType) type &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type==<span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeNone\"</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeTop) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeTop\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeBottom) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeBottom\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeLeft) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeLeft\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeRight) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeRight\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeCenter) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeCenter\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeHeight) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeHeight\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeWidth) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeWidth\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">EnumTypeTop</div><div class=\"line\">EnumTypeBottom</div><div class=\"line\">EnumTypeLeft</div><div class=\"line\">EnumTypeRight</div><div class=\"line\">EnumTypeCenter</div></pre></td></tr></table></figure>\n<p>这样就实现了同时使用多个枚举</p>\n<p>####原因<br>“位或”和”位与”运算<br>“位或”: 0 | 0 = 0 ; 0 | 1 = 1 ; 1 | 1 = 1;<br>“位与”: 0 &amp; 0 = 0 ; 0 &amp; 1 = 0 ; 1 &amp; 1 = 1;</p>\n<p>对移位枚举进行”位或”运算<br>EnumTypeTop | EnumTypeBottom | EnumTypeLeft | EnumTypeRight | EnumTypeCenter 转换成二进制就是</p>\n<p>0000 0001 | 0000 0010 | 0000 0100 | 0000 1000 | 0010 0000 = 0011 1111  其10进制的值时63</p>\n<p>所以”needMutEnum”这个方法传入的值<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">使用的时候又用```type```的值和枚举做&quot;位与运算&quot;</div><div class=\"line\"></div><div class=\"line\">63的二进制是 0011 1111  EnumTypeTop的二进制是 0000 0001</div><div class=\"line\">&quot;位与&quot;运算的结果就是 0000 0001</div><div class=\"line\"></div><div class=\"line\">也就是说传入的```type```的值转换成二进制,那个位上是```1```,对应的那个类型的枚举就被传入了</div><div class=\"line\"></div><div class=\"line\">但是要注意的是,如果不需要None的状态,就不要把第一个枚举状态设置成```0</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>##普通的枚举</p>\n<p>###第一种实现方式</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> &#123;</div><div class=\"line\">    EnumTypeTop,</div><div class=\"line\">    EnumTypeBottom</div><div class=\"line\">&#125;EnumType</div></pre></td></tr></table></figure>\n<p>###第二种实现方式</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_ENUM</span>(<span class=\"built_in\">NSInteger</span>,EnumType) &#123;</div><div class=\"line\">    EnumTypeTop,</div><div class=\"line\">    EnumTypeBottom</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>枚举的作用就是增加程序的可读性,将原来使用数值代表的状态转换成自然语言中有相应含义的单词,所以这样写出来的代码更易读懂。编译器会为枚举分配一个独有的编号,从0开始,每个枚举递增1</p>\n<p>##移位枚举</p>\n<p>###实现方式</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_OPTIONS</span>(<span class=\"built_in\">NSUInteger</span>, EnumType) &#123;</div><div class=\"line\">   EnumTypeNone  = <span class=\"number\">0</span>,     <span class=\"comment\">// 0000 0000   0</span></div><div class=\"line\">   EnumTypeTop    = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">0</span>, <span class=\"comment\">// 0000 0001   1</span></div><div class=\"line\">   EnumTypeBottom = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">1</span>, <span class=\"comment\">// 0000 0010   2</span></div><div class=\"line\">   EnumTypeLeft   = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">2</span>, <span class=\"comment\">// 0000 0100   4</span></div><div class=\"line\">   EnumTypeRight  = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">3</span>, <span class=\"comment\">// 0000 1000   8</span></div><div class=\"line\">   EnumTypeCenter = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">4</span>, <span class=\"comment\">// 0001 0000   16</span></div><div class=\"line\">   EnumTypeHeight = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">5</span>, <span class=\"comment\">// 0010 0000   32</span></div><div class=\"line\">   EnumTypeWidth  = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">6</span>  <span class=\"comment\">// 0100 0000   64</span></div><div class=\"line\">   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面就是一个移位枚举, 和普通的枚举的区别就是,每个状态的值不是递增的,而是用只有1个二进制位的值是1数字表示的,这么做的好处就是可以对状态值进行”位或”运算,从而实现同时使用多个枚举</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)testEnum &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> needMutEnum:EnumTypeTop | EnumTypeBottom | EnumTypeLeft | EnumTypeRight | EnumTypeCenter];</div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)needMutEnum:(EnumType) type &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type==<span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeNone\"</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeTop) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeTop\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeBottom) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeBottom\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeLeft) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeLeft\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeRight) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeRight\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeCenter) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeCenter\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeHeight) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeHeight\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeWidth) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeWidth\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">EnumTypeTop</div><div class=\"line\">EnumTypeBottom</div><div class=\"line\">EnumTypeLeft</div><div class=\"line\">EnumTypeRight</div><div class=\"line\">EnumTypeCenter</div></pre></td></tr></table></figure>\n<p>这样就实现了同时使用多个枚举</p>\n<p>####原因<br>“位或”和”位与”运算<br>“位或”: 0 | 0 = 0 ; 0 | 1 = 1 ; 1 | 1 = 1;<br>“位与”: 0 &amp; 0 = 0 ; 0 &amp; 1 = 0 ; 1 &amp; 1 = 1;</p>\n<p>对移位枚举进行”位或”运算<br>EnumTypeTop | EnumTypeBottom | EnumTypeLeft | EnumTypeRight | EnumTypeCenter 转换成二进制就是</p>\n<p>0000 0001 | 0000 0010 | 0000 0100 | 0000 1000 | 0010 0000 = 0011 1111  其10进制的值时63</p>\n<p>所以”needMutEnum”这个方法传入的值<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">使用的时候又用```type```的值和枚举做&quot;位与运算&quot;</div><div class=\"line\"></div><div class=\"line\">63的二进制是 0011 1111  EnumTypeTop的二进制是 0000 0001</div><div class=\"line\">&quot;位与&quot;运算的结果就是 0000 0001</div><div class=\"line\"></div><div class=\"line\">也就是说传入的```type```的值转换成二进制,那个位上是```1```,对应的那个类型的枚举就被传入了</div><div class=\"line\"></div><div class=\"line\">但是要注意的是,如果不需要None的状态,就不要把第一个枚举状态设置成```0</div></pre></td></tr></table></figure></p>\n"},{"_content":"## 原因 ##\n\n这是因为Xcode8引进的新的安全机制, Code signing不允许app的bundle里面的文件有未知的文件系统扩展属性\n\n## 解决方法 ##\n在终端中输入 `xattr -lr <path_to_app_bundle>` 可以查看存在未知扩展属性的文件\n\n在终端中输入 `xattr -cr <path_to_app_bundle>` 可以移除所有未知的扩展属性\n\n然后清理Xcode 重新build 工程","source":"_posts/Xcode8 报错resource fork, Finder information, or similar detritus not allowed/Xcode8 报错resource fork, Finder information, or similar detritus not allowed.md","raw":"## 原因 ##\n\n这是因为Xcode8引进的新的安全机制, Code signing不允许app的bundle里面的文件有未知的文件系统扩展属性\n\n## 解决方法 ##\n在终端中输入 `xattr -lr <path_to_app_bundle>` 可以查看存在未知扩展属性的文件\n\n在终端中输入 `xattr -cr <path_to_app_bundle>` 可以移除所有未知的扩展属性\n\n然后清理Xcode 重新build 工程","slug":"Xcode8 报错resource fork, Finder information, or similar detritus not allowed/Xcode8 报错resource fork, Finder information, or similar detritus not allowed","published":1,"date":"2018-07-04T09:32:37.570Z","updated":"2018-07-04T09:32:37.570Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnfk7vp10012zb7uaq3twn8e","content":"<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>这是因为Xcode8引进的新的安全机制, Code signing不允许app的bundle里面的文件有未知的文件系统扩展属性</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>在终端中输入 <code>xattr -lr &lt;path_to_app_bundle&gt;</code> 可以查看存在未知扩展属性的文件</p>\n<p>在终端中输入 <code>xattr -cr &lt;path_to_app_bundle&gt;</code> 可以移除所有未知的扩展属性</p>\n<p>然后清理Xcode 重新build 工程</p>\n","excerpt":"","more":"<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>这是因为Xcode8引进的新的安全机制, Code signing不允许app的bundle里面的文件有未知的文件系统扩展属性</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>在终端中输入 <code>xattr -lr &lt;path_to_app_bundle&gt;</code> 可以查看存在未知扩展属性的文件</p>\n<p>在终端中输入 <code>xattr -cr &lt;path_to_app_bundle&gt;</code> 可以移除所有未知的扩展属性</p>\n<p>然后清理Xcode 重新build 工程</p>\n"},{"_content":"假设有当前情景:A要发送一条消息\"你好\"给B\n\n如果不使用任何加密方法,直接发送,消息一旦被C截获,C就知道了消息的内容\n\n## 对称加密算法 ##\n如果A和B事先约定好了一个规则,比如\"1\"代表\"你\",\"2\"代表\"好\",那么A给B发送消息的时候就可以发送\"12\",B收到消息后通过查看约定的规则知道A发送的消息是\"你好\",如果消息被C截获,C并不知道约定的规则,所以C得到的消息就是\"12\",这对C来说是完全没有意义的,因为C并不知道\"12\"的真正的意义,这就做到了简单的数据加密\n\n上面的过程就是一个简化的\"对称加密算法\"\n\n数据发信方将明文（原始数据）和加密密钥（miyao）一起经过特殊加密算法处理后，使其变成复杂的加密密文发送出去。收信方收到密文后，若想解读原文，则需要使用加密用过的密钥及相同算法的逆算法对密文进行解密，才能使其恢复成可读明文。在对称加密算法中，使用的密钥只有一个，发收信双方都使用这个密钥对数据进行加密和解密，这就要求解密方事先必须知道加密密钥","source":"_posts/加密算法/加密算法.md","raw":"假设有当前情景:A要发送一条消息\"你好\"给B\n\n如果不使用任何加密方法,直接发送,消息一旦被C截获,C就知道了消息的内容\n\n## 对称加密算法 ##\n如果A和B事先约定好了一个规则,比如\"1\"代表\"你\",\"2\"代表\"好\",那么A给B发送消息的时候就可以发送\"12\",B收到消息后通过查看约定的规则知道A发送的消息是\"你好\",如果消息被C截获,C并不知道约定的规则,所以C得到的消息就是\"12\",这对C来说是完全没有意义的,因为C并不知道\"12\"的真正的意义,这就做到了简单的数据加密\n\n上面的过程就是一个简化的\"对称加密算法\"\n\n数据发信方将明文（原始数据）和加密密钥（miyao）一起经过特殊加密算法处理后，使其变成复杂的加密密文发送出去。收信方收到密文后，若想解读原文，则需要使用加密用过的密钥及相同算法的逆算法对密文进行解密，才能使其恢复成可读明文。在对称加密算法中，使用的密钥只有一个，发收信双方都使用这个密钥对数据进行加密和解密，这就要求解密方事先必须知道加密密钥","slug":"加密算法/加密算法","published":1,"date":"2018-07-04T09:32:10.073Z","updated":"2018-07-04T09:32:10.074Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnfk7vp30013zb7ukfc4ybtx","content":"<p>假设有当前情景:A要发送一条消息”你好”给B</p>\n<p>如果不使用任何加密方法,直接发送,消息一旦被C截获,C就知道了消息的内容</p>\n<h2 id=\"对称加密算法\"><a href=\"#对称加密算法\" class=\"headerlink\" title=\"对称加密算法\"></a>对称加密算法</h2><p>如果A和B事先约定好了一个规则,比如”1”代表”你”,”2”代表”好”,那么A给B发送消息的时候就可以发送”12”,B收到消息后通过查看约定的规则知道A发送的消息是”你好”,如果消息被C截获,C并不知道约定的规则,所以C得到的消息就是”12”,这对C来说是完全没有意义的,因为C并不知道”12”的真正的意义,这就做到了简单的数据加密</p>\n<p>上面的过程就是一个简化的”对称加密算法”</p>\n<p>数据发信方将明文（原始数据）和加密密钥（miyao）一起经过特殊加密算法处理后，使其变成复杂的加密密文发送出去。收信方收到密文后，若想解读原文，则需要使用加密用过的密钥及相同算法的逆算法对密文进行解密，才能使其恢复成可读明文。在对称加密算法中，使用的密钥只有一个，发收信双方都使用这个密钥对数据进行加密和解密，这就要求解密方事先必须知道加密密钥</p>\n","excerpt":"","more":"<p>假设有当前情景:A要发送一条消息”你好”给B</p>\n<p>如果不使用任何加密方法,直接发送,消息一旦被C截获,C就知道了消息的内容</p>\n<h2 id=\"对称加密算法\"><a href=\"#对称加密算法\" class=\"headerlink\" title=\"对称加密算法\"></a>对称加密算法</h2><p>如果A和B事先约定好了一个规则,比如”1”代表”你”,”2”代表”好”,那么A给B发送消息的时候就可以发送”12”,B收到消息后通过查看约定的规则知道A发送的消息是”你好”,如果消息被C截获,C并不知道约定的规则,所以C得到的消息就是”12”,这对C来说是完全没有意义的,因为C并不知道”12”的真正的意义,这就做到了简单的数据加密</p>\n<p>上面的过程就是一个简化的”对称加密算法”</p>\n<p>数据发信方将明文（原始数据）和加密密钥（miyao）一起经过特殊加密算法处理后，使其变成复杂的加密密文发送出去。收信方收到密文后，若想解读原文，则需要使用加密用过的密钥及相同算法的逆算法对密文进行解密，才能使其恢复成可读明文。在对称加密算法中，使用的密钥只有一个，发收信双方都使用这个密钥对数据进行加密和解密，这就要求解密方事先必须知道加密密钥</p>\n"},{"_content":"## NSObject 类的alloc方法执行过程 ##\n\n当一个NSObject类调用了 `alloc` 类方法,其内部的调用顺序是 \n\n1.+alloc\n\n2.+allocWithZone:\n\n3.class_createInstance\n\n4.calloc\n\n## retainCount/retain/release 实例方法的实现 ##\n\n```objectivec\n- retainCount\n__CFDoExternRefOperation\nCFBasicHashGetCountOfKey\n\n- retain\n__CFDoExternRefOperation\nCFBasicHashAddValue\n\n- release\n__CFDoExternRefOperation\nCFBasicHashRemoveValue  //CFBasicHashRemoveValue返回0时 release会调用dealloc\n```\n\n__CFDoExternRefOperation 干的事情就是获取对应对象存放引用计数的hash(散列)表,然后对表调用对应的操作的hash(散列)表操作\n\n\n_objc_autoreleasePoolPrint() 运行此函数,会在控制台打印出AutoreleasePoolPage类使用情况\n\n## ARC ##\n\n同一个程序中按文件为单位可以选择ARC有效/无效\n\n### 设置ARC有效的编译方法 ###\n\n1.使用clang(LLVM编译器)3.0或以上版本\n2.指定编译器属性为\"-fobjc-arc\" 具体步骤\n  在工程文件中选择Build Phases => Compile Sources => 找到对应要修改的类双击 =>在里面输入\"-fobjc-arc\"则当前类开启arc,如果输入\"-fno-objc-arc\"则当前类使用mrc;\n  \n注意:xcode 从4.2之后默认是开启arc的","source":"_posts/内存管理/内存管理.md","raw":"## NSObject 类的alloc方法执行过程 ##\n\n当一个NSObject类调用了 `alloc` 类方法,其内部的调用顺序是 \n\n1.+alloc\n\n2.+allocWithZone:\n\n3.class_createInstance\n\n4.calloc\n\n## retainCount/retain/release 实例方法的实现 ##\n\n```objectivec\n- retainCount\n__CFDoExternRefOperation\nCFBasicHashGetCountOfKey\n\n- retain\n__CFDoExternRefOperation\nCFBasicHashAddValue\n\n- release\n__CFDoExternRefOperation\nCFBasicHashRemoveValue  //CFBasicHashRemoveValue返回0时 release会调用dealloc\n```\n\n__CFDoExternRefOperation 干的事情就是获取对应对象存放引用计数的hash(散列)表,然后对表调用对应的操作的hash(散列)表操作\n\n\n_objc_autoreleasePoolPrint() 运行此函数,会在控制台打印出AutoreleasePoolPage类使用情况\n\n## ARC ##\n\n同一个程序中按文件为单位可以选择ARC有效/无效\n\n### 设置ARC有效的编译方法 ###\n\n1.使用clang(LLVM编译器)3.0或以上版本\n2.指定编译器属性为\"-fobjc-arc\" 具体步骤\n  在工程文件中选择Build Phases => Compile Sources => 找到对应要修改的类双击 =>在里面输入\"-fobjc-arc\"则当前类开启arc,如果输入\"-fno-objc-arc\"则当前类使用mrc;\n  \n注意:xcode 从4.2之后默认是开启arc的","slug":"内存管理/内存管理","published":1,"date":"2018-07-04T09:31:56.034Z","updated":"2018-07-04T09:31:56.034Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnfk7vp40014zb7uwcoowv37","content":"<h2 id=\"NSObject-类的alloc方法执行过程\"><a href=\"#NSObject-类的alloc方法执行过程\" class=\"headerlink\" title=\"NSObject 类的alloc方法执行过程\"></a>NSObject 类的alloc方法执行过程</h2><p>当一个NSObject类调用了 <code>alloc</code> 类方法,其内部的调用顺序是 </p>\n<p>1.+alloc</p>\n<p>2.+allocWithZone:</p>\n<p>3.class_createInstance</p>\n<p>4.calloc</p>\n<h2 id=\"retainCount-retain-release-实例方法的实现\"><a href=\"#retainCount-retain-release-实例方法的实现\" class=\"headerlink\" title=\"retainCount/retain/release 实例方法的实现\"></a>retainCount/retain/release 实例方法的实现</h2><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">- retainCount</div><div class=\"line\">__CFDoExternRefOperation</div><div class=\"line\"><span class=\"built_in\">CFBasicHashGetCountOfKey</span></div><div class=\"line\"></div><div class=\"line\">- <span class=\"keyword\">retain</span></div><div class=\"line\">__CFDoExternRefOperation</div><div class=\"line\"><span class=\"built_in\">CFBasicHashAddValue</span></div><div class=\"line\"></div><div class=\"line\">- release</div><div class=\"line\">__CFDoExternRefOperation</div><div class=\"line\"><span class=\"built_in\">CFBasicHashRemoveValue</span>  <span class=\"comment\">//CFBasicHashRemoveValue返回0时 release会调用dealloc</span></div></pre></td></tr></table></figure>\n<p>__CFDoExternRefOperation 干的事情就是获取对应对象存放引用计数的hash(散列)表,然后对表调用对应的操作的hash(散列)表操作</p>\n<p>_objc_autoreleasePoolPrint() 运行此函数,会在控制台打印出AutoreleasePoolPage类使用情况</p>\n<h2 id=\"ARC\"><a href=\"#ARC\" class=\"headerlink\" title=\"ARC\"></a>ARC</h2><p>同一个程序中按文件为单位可以选择ARC有效/无效</p>\n<h3 id=\"设置ARC有效的编译方法\"><a href=\"#设置ARC有效的编译方法\" class=\"headerlink\" title=\"设置ARC有效的编译方法\"></a>设置ARC有效的编译方法</h3><p>1.使用clang(LLVM编译器)3.0或以上版本<br>2.指定编译器属性为”-fobjc-arc” 具体步骤<br>  在工程文件中选择Build Phases =&gt; Compile Sources =&gt; 找到对应要修改的类双击 =&gt;在里面输入”-fobjc-arc”则当前类开启arc,如果输入”-fno-objc-arc”则当前类使用mrc;</p>\n<p>注意:xcode 从4.2之后默认是开启arc的</p>\n","excerpt":"","more":"<h2 id=\"NSObject-类的alloc方法执行过程\"><a href=\"#NSObject-类的alloc方法执行过程\" class=\"headerlink\" title=\"NSObject 类的alloc方法执行过程\"></a>NSObject 类的alloc方法执行过程</h2><p>当一个NSObject类调用了 <code>alloc</code> 类方法,其内部的调用顺序是 </p>\n<p>1.+alloc</p>\n<p>2.+allocWithZone:</p>\n<p>3.class_createInstance</p>\n<p>4.calloc</p>\n<h2 id=\"retainCount-retain-release-实例方法的实现\"><a href=\"#retainCount-retain-release-实例方法的实现\" class=\"headerlink\" title=\"retainCount/retain/release 实例方法的实现\"></a>retainCount/retain/release 实例方法的实现</h2><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">- retainCount</div><div class=\"line\">__CFDoExternRefOperation</div><div class=\"line\"><span class=\"built_in\">CFBasicHashGetCountOfKey</span></div><div class=\"line\"></div><div class=\"line\">- <span class=\"keyword\">retain</span></div><div class=\"line\">__CFDoExternRefOperation</div><div class=\"line\"><span class=\"built_in\">CFBasicHashAddValue</span></div><div class=\"line\"></div><div class=\"line\">- release</div><div class=\"line\">__CFDoExternRefOperation</div><div class=\"line\"><span class=\"built_in\">CFBasicHashRemoveValue</span>  <span class=\"comment\">//CFBasicHashRemoveValue返回0时 release会调用dealloc</span></div></pre></td></tr></table></figure>\n<p>__CFDoExternRefOperation 干的事情就是获取对应对象存放引用计数的hash(散列)表,然后对表调用对应的操作的hash(散列)表操作</p>\n<p>_objc_autoreleasePoolPrint() 运行此函数,会在控制台打印出AutoreleasePoolPage类使用情况</p>\n<h2 id=\"ARC\"><a href=\"#ARC\" class=\"headerlink\" title=\"ARC\"></a>ARC</h2><p>同一个程序中按文件为单位可以选择ARC有效/无效</p>\n<h3 id=\"设置ARC有效的编译方法\"><a href=\"#设置ARC有效的编译方法\" class=\"headerlink\" title=\"设置ARC有效的编译方法\"></a>设置ARC有效的编译方法</h3><p>1.使用clang(LLVM编译器)3.0或以上版本<br>2.指定编译器属性为”-fobjc-arc” 具体步骤<br>  在工程文件中选择Build Phases =&gt; Compile Sources =&gt; 找到对应要修改的类双击 =&gt;在里面输入”-fobjc-arc”则当前类开启arc,如果输入”-fno-objc-arc”则当前类使用mrc;</p>\n<p>注意:xcode 从4.2之后默认是开启arc的</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjnfk7vfw0002zb7ump629kxp","tag_id":"cjnfk7vg30005zb7u2g11v8eb","_id":"cjnfk7vge000azb7u519dedpz"},{"post_id":"cjnfk7vg10004zb7ukse0bxmc","tag_id":"cjnfk7vgd0009zb7uwulmk65k","_id":"cjnfk7vgl000fzb7uk8pvs46z"},{"post_id":"cjnfk7vgh000czb7ul3c091ss","tag_id":"cjnfk7vgd0009zb7uwulmk65k","_id":"cjnfk7vgo000hzb7uy6vknmeb"},{"post_id":"cjnfk7vgk000ezb7u9xt7x8ow","tag_id":"cjnfk7vgd0009zb7uwulmk65k","_id":"cjnfk7vgq000kzb7uphh8rfeo"},{"post_id":"cjnfk7vg70006zb7uw0hmrf91","tag_id":"cjnfk7vgd0009zb7uwulmk65k","_id":"cjnfk7vgs000mzb7u6pqrarl6"},{"post_id":"cjnfk7vgp000jzb7uwyqwyo1n","tag_id":"cjnfk7vgd0009zb7uwulmk65k","_id":"cjnfk7vgw000pzb7u6rin8b4l"},{"post_id":"cjnfk7vgc0008zb7uqzdta94q","tag_id":"cjnfk7vgo000izb7uiukzy4xh","_id":"cjnfk7vh0000rzb7uhwsay89w"},{"post_id":"cjnfk7vgr000lzb7upcsqedt1","tag_id":"cjnfk7vgd0009zb7uwulmk65k","_id":"cjnfk7vh1000tzb7uvml815a1"},{"post_id":"cjnfk7vgn000gzb7u77oqg5ha","tag_id":"cjnfk7vgt000nzb7ul7xkqwcf","_id":"cjnfk7vh1000uzb7u64n300i3"},{"post_id":"cjnfk7vgv000ozb7ui19ooop1","tag_id":"cjnfk7vh0000szb7ueci6wv4v","_id":"cjnfk7vh3000wzb7u3sq684v8"},{"post_id":"cjnfk7vgz000qzb7ui8ah5j66","tag_id":"cjnfk7vh3000vzb7uuyece5yw","_id":"cjnfk7vh5000xzb7u16zjtgrb"},{"post_id":"cjnfk7vot000yzb7uymubkjyq","tag_id":"cjnfk7vgd0009zb7uwulmk65k","_id":"cjnfk7voy0010zb7uizkrxeci"}],"Tag":[{"name":"JavaScript","_id":"cjnfk7vg30005zb7u2g11v8eb"},{"name":"iOS","_id":"cjnfk7vgd0009zb7uwulmk65k"},{"name":"appium","_id":"cjnfk7vgo000izb7uiukzy4xh"},{"name":"hello","_id":"cjnfk7vgt000nzb7ul7xkqwcf"},{"name":"Linux","_id":"cjnfk7vh0000szb7ueci6wv4v"},{"name":"VPS那些事","_id":"cjnfk7vh3000vzb7uuyece5yw"}]}}