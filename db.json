{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME.ml","path":"CNAME.ml","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.4a39e8.css","path":"main.4a39e8.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.d238ee.js","path":"mobile.d238ee.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.e97a05.js","path":"slider.e97a05.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.4a39e8.js","path":"main.4a39e8.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","path":"fonts/iconfont.b7ae25.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","path":"fonts/iconfont.dba24b.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","path":"fonts/iconfont.59e68b.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","path":"fonts/iconfont.ca3627.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/header.jpeg","path":"img/header.jpeg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/alipay.jpg","path":"img/alipay.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME.ml","hash":"d62d122efe6c38068bd2f4d2e6e1bbf301eb9c80","modified":1486613210000},{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1484105935000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1483813536000},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1483813536000},{"_id":"themes/yilia/.DS_Store","hash":"e9434f14cc19c7c486926e9bf2dfaf51a15ee3c9","modified":1491558968000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1483813536000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1483813536000},{"_id":"themes/yilia/README.md","hash":"0becd9c18f9d44fc364788a34a4f3ec82ca7940a","modified":1483813536000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1483813536000},{"_id":"themes/yilia/package.json","hash":"946b26ae0dff42c590068f0a58ecd326ed059b68","modified":1483813536000},{"_id":"themes/yilia/_config.yml","hash":"d17b133168f1bbf0ffcf6cb97b71911703db4966","modified":1491479999000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1483813536000},{"_id":"themes/yilia/webpack.config.js","hash":"c4dca5c60822c90359e48fad373be768ae9fb43d","modified":1483813536000},{"_id":"source/_posts/Untitled.md","hash":"c43775ea2c21066b61765461f6a37e668d1f322b","modified":1491831810000},{"_id":"source/_posts/OC使用静态库中的类别.md","hash":"b33b0110d25c848d3ec3f4f5ff86413dc4ffc4c1","modified":1491450535000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1491397936000},{"_id":"source/_posts/JavaScript.md","hash":"8db137d48e5d2e8046c16099e59b2b9979ce9b35","modified":1491481584000},{"_id":"source/_posts/Xcode8 报错resource fork, Finder information, or similar detritus not allowed.md","hash":"0bcd1c365e43174385c552b316dbe523c36ad952","modified":1491394618000},{"_id":"source/_posts/appium测试时候的那些事.md","hash":"2b20e37d1d2988de01b9e3c75a20c4d76c55ac8c","modified":1487215247000},{"_id":"source/_posts/bridged.md","hash":"e120052e4054e7850539d3c2d6427a3abd2386d3","modified":1491484859000},{"_id":"source/_posts/ssh连接报错.md","hash":"3aeac10d6bec8e63775d3ccaca159c0e17d5f2e8","modified":1499485007000},{"_id":"source/_posts/再给你写一个看看这就是所谓的blog.md","hash":"ce0e931cadbbb3c7dd16b4f58bcc8bef76e8ad76","modified":1484107433000},{"_id":"source/_posts/枚举的实现方式(移位枚举).md","hash":"699c4495723f65e8cfa4801b33f1cf8c6ccda834","modified":1490866007000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1484642734000},{"_id":"source/_posts/my-first-blog.md","hash":"0680931befcaa34f362706642599c0276f6704be","modified":1484128049000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1483813536000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1483813536000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1483813536000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1483813536000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1483813536000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1483813536000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1483813536000},{"_id":"themes/yilia/source/.DS_Store","hash":"027b69422bb9ac46d2fac54136ff2d6abee4eef5","modified":1484105981000},{"_id":"themes/yilia/source/main.4a39e8.css","hash":"739ea3f46c86efc2e875536655ebd24c530efe08","modified":1483813536000},{"_id":"themes/yilia/layout/.DS_Store","hash":"fc5a428fe40854a0ba66b4cea196c6700a57cae7","modified":1491475695000},{"_id":"themes/yilia/source/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1491561582000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1483813536000},{"_id":"themes/yilia/source/slider.e97a05.js","hash":"1d9c31ad6b19668753ca8fc9026bc5243866c4d4","modified":1491561600000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1483813536000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1483813536000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1483813536000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1483813536000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1483813536000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1483813536000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1483813536000},{"_id":"themes/yilia/source-src/.DS_Store","hash":"7adc94c3b0cb58816c6e0292876504591d2568c6","modified":1491558968000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1483813536000},{"_id":"themes/yilia/source/main.4a39e8.js","hash":"988c141a741441812bcf4c408ef530d7a01522f3","modified":1491561592000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1483813536000},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1483813536000},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","hash":"3313bf984fbee56b022942a5d19c916b4734fd60","modified":1483813536000},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1483813536000},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1483813536000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1483813536000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1483813536000},{"_id":"themes/yilia/source/img/header.jpeg","hash":"c04a1acaa898505134f4373630e128ccc72bf99a","modified":1484127199000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1483813536000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1483813536000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"143710485f734c5a997e0b1c26192bbba2982bcc","modified":1483813536000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1483813536000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1483813536000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"aadab85a35042afdcbce768a32bb9121b0ad1831","modified":1483813536000},{"_id":"themes/yilia/layout/_partial/.DS_Store","hash":"b23b477f2ae40596f80e1b691ec002c66835f2c6","modified":1491475701000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"d0430e8563231a8284fb502962250cd2dbda5df6","modified":1491531997000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1483813536000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1483813536000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"e0a2b40c7dfaac1c771c2b1a7b50aeb57ffea288","modified":1483813536000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1483813536000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"08f8d223e07fb3146b68edcbf5e437acbada6fa3","modified":1491560648000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"2bb938c0e474f12f0d5bfe74f7afedcf4d0e4391","modified":1491569309000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1483813536000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1483813536000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1483813536000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"f5e98b6013c968afb867626ed6617cd1cedc3d3a","modified":1483813536000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"3d2ed645f62fc7ee7703ac8a6017500f49284346","modified":1491561615000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1483813536000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"b750499d5120f963b683d0c96ac3f345c714e448","modified":1483813536000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1483813536000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"ff0a759a40c1f4791f65c182b0a79f80df8e03d3","modified":1491562583000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"b68772aa2b47d0ed89ce95d4e9d3d27931fe885c","modified":1483813536000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1483813536000},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"7c00f9102c9b102aa1370a346a0730e743351fbb","modified":1483813536000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"d9c1a22a561dc6072833a2f049b3639c0007283d","modified":1483813536000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1483813536000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1483813536000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1483813536000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"819774a2979d0d94eb4e3ebf62afc96f803bac67","modified":1483813536000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1483813536000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"40c055e8360973a75db7c13f3280a4f465f9e5e3","modified":1483813536000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1483813536000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"89373929055697d34f709cdf0085ac6d14b3c118","modified":1491562302000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"12abb65289eed5391d657b963a20f96a473b1cbd","modified":1483813536000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1483813536000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1483813536000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1483813536000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1483813536000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a14f37a57ce7a720a36196f6469d8be955284f8c","modified":1483813536000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1483813536000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1483813536000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1483813536000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"61917c928d09783a3bc8a91503a59ab3a8696e90","modified":1483813536000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1483813536000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1483813536000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"17be4f27eb8951835c29dafd0f6ba1b18e47cc6b","modified":1483813536000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1483813536000},{"_id":"themes/yilia/source-src/js/main.js","hash":"d665f4cf30450984591bc8ad2348a1baf720d04b","modified":1483813536000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1483813536000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1483813536000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1483813536000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"78b039228012a4bd42d1c80e40475af5eb36d9da","modified":1483813536000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"808a2e1ed407984cfdc929b827d3638f70ec9a2a","modified":1483813536000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1491561607000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1483813536000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"c2dccf1a95ec09ceeee5004293ac7edb7e1c9a66","modified":1483813536000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1483813536000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1483813536000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1483813536000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1483813536000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1483813536000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1483813536000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1483813536000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1483813536000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1483813536000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1483813536000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1483813536000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1483813536000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"3313bf984fbee56b022942a5d19c916b4734fd60","modified":1483813536000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1483813536000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1483813536000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1483813536000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1483813536000},{"_id":"themes/yilia/source/img/alipay.jpg","hash":"400a136d82c6f8783230dd0b5b7054f2f925ac92","modified":1484105866000}],"Category":[],"Data":[],"Page":[],"Post":[{"_content":"# AFNetworking 相关 #\n\n## 网络通讯 ##\n建立一个`TCP`协议的连接通常需要三次\"握手\",断开一个`TCP`协议的连接需要四次\"挥手\"\n\n### 三次\"握手\" ###\n* 1.\"Client\"端(客户端)发送连接请求报文.\n* 2.\"Server\"端(服务端)接受连接后回复ACK(指令正确)报文,并为这次连接分配资源\n* 3.\"Client\"端(客户端)收到ACK报文后像\"Server\"端发送ACK(指令正确报文),并分配资源\n\n举个栗子:\n    A(客户端)和B(服务端)进行交易\n    A:\"我要的东西带来了么?\" (客户端向服务端请求)\n    B:\"天王盖地府,先对暗号\" (服务端给客户端一个回应,表示知道客户端要请求了,并且准备好了请求资源)\n    A:\"小鸡炖蘑菇\" (客户端给服务端一个回应,表示自己知道已经连接上服务端,并且知道服务端准备好了,且自己也准备好了)\n    接头完成,进行可以进行交易(连接成功)\n","source":"_posts/Untitled.md","raw":"# AFNetworking 相关 #\n\n## 网络通讯 ##\n建立一个`TCP`协议的连接通常需要三次\"握手\",断开一个`TCP`协议的连接需要四次\"挥手\"\n\n### 三次\"握手\" ###\n* 1.\"Client\"端(客户端)发送连接请求报文.\n* 2.\"Server\"端(服务端)接受连接后回复ACK(指令正确)报文,并为这次连接分配资源\n* 3.\"Client\"端(客户端)收到ACK报文后像\"Server\"端发送ACK(指令正确报文),并分配资源\n\n举个栗子:\n    A(客户端)和B(服务端)进行交易\n    A:\"我要的东西带来了么?\" (客户端向服务端请求)\n    B:\"天王盖地府,先对暗号\" (服务端给客户端一个回应,表示知道客户端要请求了,并且准备好了请求资源)\n    A:\"小鸡炖蘑菇\" (客户端给服务端一个回应,表示自己知道已经连接上服务端,并且知道服务端准备好了,且自己也准备好了)\n    接头完成,进行可以进行交易(连接成功)\n","slug":"Untitled","published":1,"date":"2017-03-28T09:49:52.000Z","updated":"2017-04-10T13:43:30.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4uqxna50000nts6xm5ajk8v","content":"<h1 id=\"AFNetworking-相关\"><a href=\"#AFNetworking-相关\" class=\"headerlink\" title=\"AFNetworking 相关\"></a>AFNetworking 相关</h1><h2 id=\"网络通讯\"><a href=\"#网络通讯\" class=\"headerlink\" title=\"网络通讯\"></a>网络通讯</h2><p>建立一个<code>TCP</code>协议的连接通常需要三次”握手”,断开一个<code>TCP</code>协议的连接需要四次”挥手”</p>\n<h3 id=\"三次”握手”\"><a href=\"#三次”握手”\" class=\"headerlink\" title=\"三次”握手”\"></a>三次”握手”</h3><ul>\n<li>1.”Client”端(客户端)发送连接请求报文.</li>\n<li>2.”Server”端(服务端)接受连接后回复ACK(指令正确)报文,并为这次连接分配资源</li>\n<li>3.”Client”端(客户端)收到ACK报文后像”Server”端发送ACK(指令正确报文),并分配资源</li>\n</ul>\n<p>举个栗子:<br>    A(客户端)和B(服务端)进行交易<br>    A:”我要的东西带来了么?” (客户端向服务端请求)<br>    B:”天王盖地府,先对暗号” (服务端给客户端一个回应,表示知道客户端要请求了,并且准备好了请求资源)<br>    A:”小鸡炖蘑菇” (客户端给服务端一个回应,表示自己知道已经连接上服务端,并且知道服务端准备好了,且自己也准备好了)<br>    接头完成,进行可以进行交易(连接成功)</p>\n","excerpt":"","more":"<h1 id=\"AFNetworking-相关\"><a href=\"#AFNetworking-相关\" class=\"headerlink\" title=\"AFNetworking 相关\"></a>AFNetworking 相关</h1><h2 id=\"网络通讯\"><a href=\"#网络通讯\" class=\"headerlink\" title=\"网络通讯\"></a>网络通讯</h2><p>建立一个<code>TCP</code>协议的连接通常需要三次”握手”,断开一个<code>TCP</code>协议的连接需要四次”挥手”</p>\n<h3 id=\"三次”握手”\"><a href=\"#三次”握手”\" class=\"headerlink\" title=\"三次”握手”\"></a>三次”握手”</h3><ul>\n<li>1.”Client”端(客户端)发送连接请求报文.</li>\n<li>2.”Server”端(服务端)接受连接后回复ACK(指令正确)报文,并为这次连接分配资源</li>\n<li>3.”Client”端(客户端)收到ACK报文后像”Server”端发送ACK(指令正确报文),并分配资源</li>\n</ul>\n<p>举个栗子:<br>    A(客户端)和B(服务端)进行交易<br>    A:”我要的东西带来了么?” (客户端向服务端请求)<br>    B:”天王盖地府,先对暗号” (服务端给客户端一个回应,表示知道客户端要请求了,并且准备好了请求资源)<br>    A:”小鸡炖蘑菇” (客户端给服务端一个回应,表示自己知道已经连接上服务端,并且知道服务端准备好了,且自己也准备好了)<br>    接头完成,进行可以进行交易(连接成功)</p>\n"},{"title":"OC使用静态库中的类别","date":"2017-04-05T12:02:30.000Z","_content":"\n## OC中使用静态库中的类别的问题 ##\n\nOC的源文件经过 `clang` 编译首先生成中间代码,接着通过优化生成目标代码(目标代码中包括符号表,标示了此代码中的全局符号和静态符号,还标示了导入符号等),连接器会根据符号表分析各个目标代码之间的调用关系,然后将使用到的代码进行连接和重定位,最后生成可执行文件.\n\n在编译Objective-C源文件到目标文件时,编译器并不知道方法的对应实现,只能在运行时才知道,所以编译器只会为类生成连接符号,不会对类中的方法生成连接符号,由于Category方法并不对应一个新类,所以不会生成连接符号,连接器也不会将Category方法合并到原始的类中,最终导致连接器忽略了Category方法,不会将其连接到可执行文件中.\n\n\n> 在OC使用静态库中的类别,需要设置下面5种方法中的一种\n\n\n## Other Linker Flags 设置 ##\n\n* 1.通过在Other Linder Flags 添加 `-all\\_load` 它会告诉编译器对”所有文档中的所有对象文件,不管里面的符号有没有被用到,全部都载入”,这样会产生比较大的二进制文件\n\n* 2.通过在Other Linder Flags 添加 `-force\\_load 和指定路径` e.g: `-force\\_load $(SRCROOT)/RHAddressBook/libRHAddressBook.a` 这种方法会只载入指定的归档\n\n* 3.通过在Other Linder Flags 添加 `-ObjC` ,这个标识告诉编译器”如果在文档中发现了OC代码,就把文档载入” \n\n* 4.在Xcode里build setting中的 Perform Single-Object PreLink，如果启用这个选项，所有的对象文件都会被合并成一个单文件（这不是真正的链接，所以叫做预链接），这个对象文件（有时被称做主对象文件(master object file)）被添加到文档中。现在如果主对象文件中的任何符号被认为是“在使用”，整个主对象文件都会被认为在使用，这样它里面的OC部分就会被载入了。因为里面的类都被正常符号化了，所以能使从这样的静态库中使用所有的Category\n\n* 5.最后一种解决方法是在只有Category的源文件里添加Fake symbol。如果你想在运行时使用Category，一定要确保你以某种方法在编译时引用了fake symbol，这会使得对象文件以及它里面的OC代码被载入。例如，它可以是一个有空函数体的函数，也可以是一个被访问的全局变量（例如一个全局的int变量，只要它被读或者写了一次就足够了）。和上面其他的解决方法不一样，这种解决方法可以控制哪些category可以在运行时被编译后的代码使用（可以通过使用这个符号，使它们被链接并变得可用；也可以不使用这个符号，这样链接器就会忽略它）\n","source":"_posts/OC使用静态库中的类别.md","raw":"---\ntitle: OC使用静态库中的类别\ndate: 2017-04-05 20:02:30\ntags: iOS\n---\n\n## OC中使用静态库中的类别的问题 ##\n\nOC的源文件经过 `clang` 编译首先生成中间代码,接着通过优化生成目标代码(目标代码中包括符号表,标示了此代码中的全局符号和静态符号,还标示了导入符号等),连接器会根据符号表分析各个目标代码之间的调用关系,然后将使用到的代码进行连接和重定位,最后生成可执行文件.\n\n在编译Objective-C源文件到目标文件时,编译器并不知道方法的对应实现,只能在运行时才知道,所以编译器只会为类生成连接符号,不会对类中的方法生成连接符号,由于Category方法并不对应一个新类,所以不会生成连接符号,连接器也不会将Category方法合并到原始的类中,最终导致连接器忽略了Category方法,不会将其连接到可执行文件中.\n\n\n> 在OC使用静态库中的类别,需要设置下面5种方法中的一种\n\n\n## Other Linker Flags 设置 ##\n\n* 1.通过在Other Linder Flags 添加 `-all\\_load` 它会告诉编译器对”所有文档中的所有对象文件,不管里面的符号有没有被用到,全部都载入”,这样会产生比较大的二进制文件\n\n* 2.通过在Other Linder Flags 添加 `-force\\_load 和指定路径` e.g: `-force\\_load $(SRCROOT)/RHAddressBook/libRHAddressBook.a` 这种方法会只载入指定的归档\n\n* 3.通过在Other Linder Flags 添加 `-ObjC` ,这个标识告诉编译器”如果在文档中发现了OC代码,就把文档载入” \n\n* 4.在Xcode里build setting中的 Perform Single-Object PreLink，如果启用这个选项，所有的对象文件都会被合并成一个单文件（这不是真正的链接，所以叫做预链接），这个对象文件（有时被称做主对象文件(master object file)）被添加到文档中。现在如果主对象文件中的任何符号被认为是“在使用”，整个主对象文件都会被认为在使用，这样它里面的OC部分就会被载入了。因为里面的类都被正常符号化了，所以能使从这样的静态库中使用所有的Category\n\n* 5.最后一种解决方法是在只有Category的源文件里添加Fake symbol。如果你想在运行时使用Category，一定要确保你以某种方法在编译时引用了fake symbol，这会使得对象文件以及它里面的OC代码被载入。例如，它可以是一个有空函数体的函数，也可以是一个被访问的全局变量（例如一个全局的int变量，只要它被读或者写了一次就足够了）。和上面其他的解决方法不一样，这种解决方法可以控制哪些category可以在运行时被编译后的代码使用（可以通过使用这个符号，使它们被链接并变得可用；也可以不使用这个符号，这样链接器就会忽略它）\n","slug":"OC使用静态库中的类别","published":1,"updated":"2017-04-06T03:48:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4uqxnab0001nts6wzlyfniy","content":"<h2 id=\"OC中使用静态库中的类别的问题\"><a href=\"#OC中使用静态库中的类别的问题\" class=\"headerlink\" title=\"OC中使用静态库中的类别的问题\"></a>OC中使用静态库中的类别的问题</h2><p>OC的源文件经过 <code>clang</code> 编译首先生成中间代码,接着通过优化生成目标代码(目标代码中包括符号表,标示了此代码中的全局符号和静态符号,还标示了导入符号等),连接器会根据符号表分析各个目标代码之间的调用关系,然后将使用到的代码进行连接和重定位,最后生成可执行文件.</p>\n<p>在编译Objective-C源文件到目标文件时,编译器并不知道方法的对应实现,只能在运行时才知道,所以编译器只会为类生成连接符号,不会对类中的方法生成连接符号,由于Category方法并不对应一个新类,所以不会生成连接符号,连接器也不会将Category方法合并到原始的类中,最终导致连接器忽略了Category方法,不会将其连接到可执行文件中.</p>\n<blockquote>\n<p>在OC使用静态库中的类别,需要设置下面5种方法中的一种</p>\n</blockquote>\n<h2 id=\"Other-Linker-Flags-设置\"><a href=\"#Other-Linker-Flags-设置\" class=\"headerlink\" title=\"Other Linker Flags 设置\"></a>Other Linker Flags 设置</h2><ul>\n<li><p>1.通过在Other Linder Flags 添加 <code>-all\\_load</code> 它会告诉编译器对”所有文档中的所有对象文件,不管里面的符号有没有被用到,全部都载入”,这样会产生比较大的二进制文件</p>\n</li>\n<li><p>2.通过在Other Linder Flags 添加 <code>-force\\_load 和指定路径</code> e.g: <code>-force\\_load $(SRCROOT)/RHAddressBook/libRHAddressBook.a</code> 这种方法会只载入指定的归档</p>\n</li>\n<li><p>3.通过在Other Linder Flags 添加 <code>-ObjC</code> ,这个标识告诉编译器”如果在文档中发现了OC代码,就把文档载入” </p>\n</li>\n<li><p>4.在Xcode里build setting中的 Perform Single-Object PreLink，如果启用这个选项，所有的对象文件都会被合并成一个单文件（这不是真正的链接，所以叫做预链接），这个对象文件（有时被称做主对象文件(master object file)）被添加到文档中。现在如果主对象文件中的任何符号被认为是“在使用”，整个主对象文件都会被认为在使用，这样它里面的OC部分就会被载入了。因为里面的类都被正常符号化了，所以能使从这样的静态库中使用所有的Category</p>\n</li>\n<li><p>5.最后一种解决方法是在只有Category的源文件里添加Fake symbol。如果你想在运行时使用Category，一定要确保你以某种方法在编译时引用了fake symbol，这会使得对象文件以及它里面的OC代码被载入。例如，它可以是一个有空函数体的函数，也可以是一个被访问的全局变量（例如一个全局的int变量，只要它被读或者写了一次就足够了）。和上面其他的解决方法不一样，这种解决方法可以控制哪些category可以在运行时被编译后的代码使用（可以通过使用这个符号，使它们被链接并变得可用；也可以不使用这个符号，这样链接器就会忽略它）</p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"OC中使用静态库中的类别的问题\"><a href=\"#OC中使用静态库中的类别的问题\" class=\"headerlink\" title=\"OC中使用静态库中的类别的问题\"></a>OC中使用静态库中的类别的问题</h2><p>OC的源文件经过 <code>clang</code> 编译首先生成中间代码,接着通过优化生成目标代码(目标代码中包括符号表,标示了此代码中的全局符号和静态符号,还标示了导入符号等),连接器会根据符号表分析各个目标代码之间的调用关系,然后将使用到的代码进行连接和重定位,最后生成可执行文件.</p>\n<p>在编译Objective-C源文件到目标文件时,编译器并不知道方法的对应实现,只能在运行时才知道,所以编译器只会为类生成连接符号,不会对类中的方法生成连接符号,由于Category方法并不对应一个新类,所以不会生成连接符号,连接器也不会将Category方法合并到原始的类中,最终导致连接器忽略了Category方法,不会将其连接到可执行文件中.</p>\n<blockquote>\n<p>在OC使用静态库中的类别,需要设置下面5种方法中的一种</p>\n</blockquote>\n<h2 id=\"Other-Linker-Flags-设置\"><a href=\"#Other-Linker-Flags-设置\" class=\"headerlink\" title=\"Other Linker Flags 设置\"></a>Other Linker Flags 设置</h2><ul>\n<li><p>1.通过在Other Linder Flags 添加 <code>-all\\_load</code> 它会告诉编译器对”所有文档中的所有对象文件,不管里面的符号有没有被用到,全部都载入”,这样会产生比较大的二进制文件</p>\n</li>\n<li><p>2.通过在Other Linder Flags 添加 <code>-force\\_load 和指定路径</code> e.g: <code>-force\\_load $(SRCROOT)/RHAddressBook/libRHAddressBook.a</code> 这种方法会只载入指定的归档</p>\n</li>\n<li><p>3.通过在Other Linder Flags 添加 <code>-ObjC</code> ,这个标识告诉编译器”如果在文档中发现了OC代码,就把文档载入” </p>\n</li>\n<li><p>4.在Xcode里build setting中的 Perform Single-Object PreLink，如果启用这个选项，所有的对象文件都会被合并成一个单文件（这不是真正的链接，所以叫做预链接），这个对象文件（有时被称做主对象文件(master object file)）被添加到文档中。现在如果主对象文件中的任何符号被认为是“在使用”，整个主对象文件都会被认为在使用，这样它里面的OC部分就会被载入了。因为里面的类都被正常符号化了，所以能使从这样的静态库中使用所有的Category</p>\n</li>\n<li><p>5.最后一种解决方法是在只有Category的源文件里添加Fake symbol。如果你想在运行时使用Category，一定要确保你以某种方法在编译时引用了fake symbol，这会使得对象文件以及它里面的OC代码被载入。例如，它可以是一个有空函数体的函数，也可以是一个被访问的全局变量（例如一个全局的int变量，只要它被读或者写了一次就足够了）。和上面其他的解决方法不一样，这种解决方法可以控制哪些category可以在运行时被编译后的代码使用（可以通过使用这个符号，使它们被链接并变得可用；也可以不使用这个符号，这样链接器就会忽略它）</p>\n</li>\n</ul>\n"},{"title":"Learn JavaScript","date":"2017-01-11T03:10:12.000Z","_content":"\n## Equality (相等比较符) ##\n\n```Javascript\nvar foo = 42;\nvar bar = 42;\nvar baz = \"42\";\nvar qux = \"life\";\n```\n定义了四个变量在Javascript中 `==`是用来比较两个值但是不会判断类型故 `foo == baz`返回的值是`true`\n\n使用`==`比较的时候编译器会先把类型转换成相同的类型,再去比较\n\n因此在JavaScript 要是比较不同类型的两个值可以使用`===`这样会先判断类型,如果类型不同就会返回`false`\n\n所以推荐使用`===`比较\n\n<!----- more ----->\n\n注意: 1.`NaN`是个特殊的Number,他与所有其他值都不相等,包括它自己\n```JavaScript\nNaN === NaN ; // false\n```\n唯一能判断NaN的方法是通过isNaN()函数:\n```JavaScript\nisNaN(NaN); // true\n```\n\n2.浮点数的比较:\n```JavaScript\n1/3 === (1 - 2 / 3); //false\n```\n这个结果是正确的,出现这个结果这是因为浮点数在运算过程中会产生误差,计算机无法精确的表示无限小数,所以要比较两个浮点数是否相等,只能计算他们之差的绝对值,看是否小于某个阈值:\n\n```JavaScript\nMath.abs(1/3 - (1 - 2 / 3)) < 0.0000001; //true\n```\n\n\n## Types ##\n\n### numbers\n\nJavaScript中只有一种数字类型 – 64-bit float point,类似于Java中的double类型,所以在JavaScript中1和1.0是相同的值\nnumber可以直接做四则运算，规则和数学一致\n\n### 字符串\n\n字符串是以'单引号'或\"双引号\"括起来的文本,如`'abc'` `\"xyz\"`\n\n注意`' '`和`\" \"`并不是字符串的一部分\n\n如果字符串中包含`'` 就使用`\"\"`把文本包起来,如果字符串中包含`\"` 就需要使用转义字符了`\\`\n\n在多行字符串中换行使用的是`\\n` 但是如果行数太多`\\n`需要写多个,不方便,在JavaScript中又增加了一种表示方法(ES6),就是将多行文本用\\`... \\`括起来,就是键盘上tab键上边的那个按键.\n\n#### 模板字符串\n多个字符串可以使用`+`连接起来.字符串也可以是变量如:\n\n```JavaScript\nvar name = '小王吧';\nvar age = '100';\nvar message = '你好,' + name + ',你现在' + age + '岁';\n```\n同样,如果要连接的变量有很多,使用`+`就会很不方便,在JavaScript中增加了一种模板字符串的表示(ES6):\n\n```JavaScript\nvar name = '小王吧';\nvar age = '101';\nvar message = `${name},你今年${age}岁,是不是?`\n```\n注意:新的表示方法使用的是\\` ,就是新的多行文本使用的符号,就是键盘上`tab`按键上边的那个按键,不能使用`\"\"或''`,那样无法转换变量\n\n#### 字符串操作 ####\n获取字符的长度\n\n```JavaScript\nvar name = 'xiao wang ba.';\nalert(name.length); //13\n```\n\n获取指定位置字符,可以把字符串看成是特殊的数组,对字符串进行下标操作,从0索引开始\n\n```JavaScript\nvar name = 'xiao wang ba.';\nname[0]; //'x'\nname[1]; //'i'\nname[4]; //' '\nname[12];//'.'\nname[13];//undefined 超出范围的索引一律返回undefined\n```\n注意:给字符串的索引赋值不会有报错,也不会有任何效果,字符串也不会改变\n\n改变字符串为大写\n\n```JavaScript\nvar name = 'xiao wang ba.';\nname.toUpperCase(); //返回'XIAO WANG BA.'\n```\n\n改变字符串为小写\n\n```JavaScript\nvar name = 'Xiao Wang Ba.';\nname.toLowerCase(); //返回'xiao wang ba.'\n```\n注意:如果字符串是中文,则没效果\n\n返回字符串出现的位置\n\n```JavaScript\nvar name = 'Xiao Wang Ba.';\nname.indexOf('Wang');//返回5\nname.indexOf('wang');//如果没有找到指定的子串,返回-1\n```\n\n获取字符串中的子串\n\n```JavaScript\nvar name = 'xiao wang ba.';\nname.substring(0,4);//从索引0开始到4(不包括4),返回'xiao'\nname.substring(10);//从索引10开始到结束,返回'ba.'\n```\n\n\n### 布尔值\nJavaScript中的布尔值有`true`和`false`两种值,可以直接用`true`或`false`表示,也可以通过布尔运算计算出来\n\n### null和undefined\n`null`表示一个\"空\"的值,同Java中的`null`,Swift中的nil,Python中的None用法类似.\n`undefined`表示\"未定义\".\nJavaScript设计的时候希望用`null`表示一个空的值,用`undefined`表示值未定义,但是大多数情况下我们都应该用`null`.`undefined`仅仅在判断函数参数是否传递的情况下有用\n\n### 数组\n数组是一组按顺序排列的集合,集合的每个值称为元素.JavaScript的数组可以包括任意数据类型.\n创建方法:\n\n```JavaScript\n[1,2,3.14,\"hello\",null,true]; //推荐使用\n```\n另一种创建方法:\n\n```JavaScript\nnew Array(1,2,3);\n```\n\n获取数组的长度\n\n```JavaScript\nvar arr = [1,2,3.14,\"hello\",null,true];\narr.length;//6\n//可以给数组的长度赋值,改变数组的大小\narr.length = 7;//数组改变为[1,2,3.14,\"hello\",null,true,undefined]\narr.length = 4;//数组改变为[1,2,3.14,\"hello\"]\n```\n\n\n数组可以通过索引来访问每个元素的值,也可以改变索引对应元素的值:\n\n```JavaScript\nvar arr = [1,2,3.14,\"hello\",null,true];\narr[0]; //数组第一个元素,值为1\narr[1] = 10;//修改数组第二个元素的值为10\n```\n\n注意:如果通过索引给数组赋值的时候,索引超过了数组长度,数组会被变大\n\n```JavaScript\nvar arr = ['A', 'B', 'C'];\narr[5] = 'F';//arr会变为['A', 'B', 'C', undefined, undefined, 'F'];\n```\n\n获取对应元素的索引\n\n```JavaScript\nvar arr = [10, 20 ,'30', 'xyz'];\narr.indexOf(10);//元素10的索引是0\narr.indexOf(20);//元素20的索引是1\narr.indexOf(30);//元素30的索引是 -1 因为没有找到元素\narr.indexOf('30');//元素'30'的索引是2\n```\n注意：数字`30`和`'30'`是不同的元素\n\n获取数组中的部分元素\n\n```JavaScript\nvar arr =['A','B','C','D','E','F','G'];\narr.slice(0,3);//从索引0开始,到索引3结束,但不包括索引3:['A','B','C']\narr.slice(3);//从索引3开始到结束:['D','E','F','G']\n\n```\n\n注意:`slice()`的起止参数包括开始索引,不包括结束索引\n如果不给`slice()`传递任何参数,它会从头到尾截取所有元素,这个方法可以复制一个`array`\n\n```JavaScript\nvar arr = ['A','B','C','D','E','F','G'];\nvar aCopy = arr.slice();\naCopy; //['A','B','C','D','E','F','G'];\naCopy === arr; //false\nif(aCopy.toString() === arr.toString()) {\n    alert('一样');//数组相同\n}else {\n    alert('不一样');//数组不同\n}\n```\n注意:`JavaScript`比较两个数组是否相同不能直接使用`===` 要比较两个数组是否相同,需要先把数组转换成字符串,然后再比较\n\n在数组末尾添加或删除若干元素,`push()`和`pop()`\n\n```JavaScript\nvar arr = [1 , 2];\narr.push('A','B'); //返回新的长度为4的数组\narr; //[1,2,'A','B']\narr.pop();//pop()返回'B'\narr; // [1,2,'A']\narr.pop();arr.pop();arr.pop(); //连续pop 3次\narr; //[]\narr.pop(); //空数组继续pop不会报错,而是返回undefined\narr;//[]\n```\n\n在数组头部添加或删除若干元素,`unshift()`和`shift()`\n\n```JavaScript\nvar arr =[1,2];\narr.unshift('A','B');//返回新的长度为4的数组\narr;//['A','B',1,2]\narr.shift();//'A'\narr;//['B',1,2]\narr.shift();arr.shift();arr.shift();//连续shift 3次\narr;//[]\narr.shift();//空数组继续shift不会报错,而是返回undefined\narr;//[]\n```\n\n数组排序\n`sort()`可以对当前数组进行排序,它会直接修改当前的数组元素的位置,直接调用时,会按照默认顺序排序\n\n```JavaScript\nvar arr = ['B','C','A'];\narr.sort();\narr;//['A','B','C']\n```\n注意 在函数中可以自定义排序条件\n\n数组反转\n\n`reverse()`可以把数组的元素反转\n\n```JavaScript\nvar arr = ['A','B','C'];\narr.reverse();\narr;//['three','two','one']\n```\n\n数组修改的\"万能方法\",可以从指定索引开始删除若干元素,然后再从该位置添加若干元素\n\n```JavaScript\nvar arr =['Microsoft','Apple','Yahoo','AOL','Excite','Oracle']\narr.splice(2,3,'Google','Facebook');//从索引2开始删除3个元素,然后再添加两个元素,返回删除的元素['Yahoo','AOL','Excite']\narr.splice(2,2);//只删除不添加,返回['Google','Facebook']\narr;//['Microsoft','Apple','Oracle']\narr.splice(2.0,'Google','Facebook');//只添加,不删除,返回[]\narr;//['Microsoft','Apple','Google','Facebook','Oracle']\n```\n把两个数组连接起来,返回一个新的数组\n\n```JavaScript\nvar arr = ['A','B','C'];\nvar added = arr.concat([1,2,3]);\nadded; //['A','B','C',1,2,3]\nARR;//['A','B','C']\n```\n注意 `concat()`方法并没有修改当前数组,而是返回了一个新的数组\n\n而且`concat()`可以接收任意个元素和数组,并把所有数组自动拆开,添加到新的数组中\n\n```JavaScript\nvar arr = ['A','B','C'];\narr.concat(1,2,[3,4]);//['A','B','C',1,2,3,4]\n```\n\n把数组的每个元素都用指定的字符串连接起来,然后返回字符串\n\n```JavaScript\nvar arr = ['A','B','C',1,2,3];\narr.join('-'); //'A-B-C-1-2-3'\n```\n注意如果数组的元素不是字符串,会自动转换成字符串再连接\n\n多维数组,指的是数组中的某个元素又是一个数组\n\n```JavaScript\nvar arr = [[1,2,3],[400,500,600],'-'];\n```\n\n上述`Array`包含3个元素,其中头两个元素本身也是`Array`\n\n\n### 对象\n对象是一组由键-值组成的无序集合:\n\n```JavaScript\nvar person = {\n\tname: 'XiaoWang',\n\ttags: ['js', 'web', 'mobile'],\n\tage: 12,\n\tcity: 'shanghai',\n\thasCar: false,\n\tzipcode: null\n};\n```\n\nJavaScript用一个`{...}` 表示一个对象,键值对以`xxx: xxx`形式申明,用`,`隔开,最后一个键值对不需要加\n\nJavaScript对象的键都是字符串类型,值可以是任意数据类型,每个键都是对象的一个属性,获取属性的方法:\n\n```JavaScript\nperson.name; // 'XiaoWang'\nperson.zipcode; // null\n```\n注:`var person` 是JavaScript的一个变量,`person`是变量名,变量名是大小写英文,数字,`$`和`_`的组合,且不能用数字开头,也不能使用JavaScript中的关键字\n\n\n#### strict模式\n蛋疼的布兰登在设计JavaScript的时候为了赶工期,并没有强制使用`var`声明变量,如果一个变量没有通过`var`声明就被使用,这个变量就会被自动声明为全局变量\n\n```JavaScript\ni = 10; //i就是一个全局变量\n```\n\n如果在不同的JavaScript文件中,你都使用了同样名字的变量,而且都没有用`var`声明,那么你就麻烦了.\n\n因此,为了给布兰登填坑,ECMA在后续的规范中推出了strict模式,在strict模式下运行JavaScript代码不允许使用没有`var`声明的变量,如果有那么就给你报错\n\n启动strict模式的方法很简单,就是在JavaScript代码的第一行写上:\n\n```JavaScript\n'use strict';\n```\n注:如果你用的是老爷机,你的浏览器太老了,他会自以为是的把上面那就话当做一个字符串语句执行,如果这样的话还是换个最新版的浏览器吧\n\n#### Advanced Operaters (高级运算符)\n取余运算 `x = y % 2`\n累加运算 `a = 5`\n\t\t`c = a++`/Users/YaoWanXin/Desktop/app.html resulets : c = 5 and a = 6\n\t\t`c = ++a` resulets : c = 6 and a = 6\n累减运算 `a = 5`\n\t\t`c = a--` resulets : c = 5 and a = 4\n\t\t`c = --a` resulets : c = 4 and a = 4\n","source":"_posts/JavaScript.md","raw":"---\ntitle: Learn JavaScript\ndate: 2017-01-11 11:10:12\ntags: JavaScript\n---\n\n## Equality (相等比较符) ##\n\n```Javascript\nvar foo = 42;\nvar bar = 42;\nvar baz = \"42\";\nvar qux = \"life\";\n```\n定义了四个变量在Javascript中 `==`是用来比较两个值但是不会判断类型故 `foo == baz`返回的值是`true`\n\n使用`==`比较的时候编译器会先把类型转换成相同的类型,再去比较\n\n因此在JavaScript 要是比较不同类型的两个值可以使用`===`这样会先判断类型,如果类型不同就会返回`false`\n\n所以推荐使用`===`比较\n\n<!----- more ----->\n\n注意: 1.`NaN`是个特殊的Number,他与所有其他值都不相等,包括它自己\n```JavaScript\nNaN === NaN ; // false\n```\n唯一能判断NaN的方法是通过isNaN()函数:\n```JavaScript\nisNaN(NaN); // true\n```\n\n2.浮点数的比较:\n```JavaScript\n1/3 === (1 - 2 / 3); //false\n```\n这个结果是正确的,出现这个结果这是因为浮点数在运算过程中会产生误差,计算机无法精确的表示无限小数,所以要比较两个浮点数是否相等,只能计算他们之差的绝对值,看是否小于某个阈值:\n\n```JavaScript\nMath.abs(1/3 - (1 - 2 / 3)) < 0.0000001; //true\n```\n\n\n## Types ##\n\n### numbers\n\nJavaScript中只有一种数字类型 – 64-bit float point,类似于Java中的double类型,所以在JavaScript中1和1.0是相同的值\nnumber可以直接做四则运算，规则和数学一致\n\n### 字符串\n\n字符串是以'单引号'或\"双引号\"括起来的文本,如`'abc'` `\"xyz\"`\n\n注意`' '`和`\" \"`并不是字符串的一部分\n\n如果字符串中包含`'` 就使用`\"\"`把文本包起来,如果字符串中包含`\"` 就需要使用转义字符了`\\`\n\n在多行字符串中换行使用的是`\\n` 但是如果行数太多`\\n`需要写多个,不方便,在JavaScript中又增加了一种表示方法(ES6),就是将多行文本用\\`... \\`括起来,就是键盘上tab键上边的那个按键.\n\n#### 模板字符串\n多个字符串可以使用`+`连接起来.字符串也可以是变量如:\n\n```JavaScript\nvar name = '小王吧';\nvar age = '100';\nvar message = '你好,' + name + ',你现在' + age + '岁';\n```\n同样,如果要连接的变量有很多,使用`+`就会很不方便,在JavaScript中增加了一种模板字符串的表示(ES6):\n\n```JavaScript\nvar name = '小王吧';\nvar age = '101';\nvar message = `${name},你今年${age}岁,是不是?`\n```\n注意:新的表示方法使用的是\\` ,就是新的多行文本使用的符号,就是键盘上`tab`按键上边的那个按键,不能使用`\"\"或''`,那样无法转换变量\n\n#### 字符串操作 ####\n获取字符的长度\n\n```JavaScript\nvar name = 'xiao wang ba.';\nalert(name.length); //13\n```\n\n获取指定位置字符,可以把字符串看成是特殊的数组,对字符串进行下标操作,从0索引开始\n\n```JavaScript\nvar name = 'xiao wang ba.';\nname[0]; //'x'\nname[1]; //'i'\nname[4]; //' '\nname[12];//'.'\nname[13];//undefined 超出范围的索引一律返回undefined\n```\n注意:给字符串的索引赋值不会有报错,也不会有任何效果,字符串也不会改变\n\n改变字符串为大写\n\n```JavaScript\nvar name = 'xiao wang ba.';\nname.toUpperCase(); //返回'XIAO WANG BA.'\n```\n\n改变字符串为小写\n\n```JavaScript\nvar name = 'Xiao Wang Ba.';\nname.toLowerCase(); //返回'xiao wang ba.'\n```\n注意:如果字符串是中文,则没效果\n\n返回字符串出现的位置\n\n```JavaScript\nvar name = 'Xiao Wang Ba.';\nname.indexOf('Wang');//返回5\nname.indexOf('wang');//如果没有找到指定的子串,返回-1\n```\n\n获取字符串中的子串\n\n```JavaScript\nvar name = 'xiao wang ba.';\nname.substring(0,4);//从索引0开始到4(不包括4),返回'xiao'\nname.substring(10);//从索引10开始到结束,返回'ba.'\n```\n\n\n### 布尔值\nJavaScript中的布尔值有`true`和`false`两种值,可以直接用`true`或`false`表示,也可以通过布尔运算计算出来\n\n### null和undefined\n`null`表示一个\"空\"的值,同Java中的`null`,Swift中的nil,Python中的None用法类似.\n`undefined`表示\"未定义\".\nJavaScript设计的时候希望用`null`表示一个空的值,用`undefined`表示值未定义,但是大多数情况下我们都应该用`null`.`undefined`仅仅在判断函数参数是否传递的情况下有用\n\n### 数组\n数组是一组按顺序排列的集合,集合的每个值称为元素.JavaScript的数组可以包括任意数据类型.\n创建方法:\n\n```JavaScript\n[1,2,3.14,\"hello\",null,true]; //推荐使用\n```\n另一种创建方法:\n\n```JavaScript\nnew Array(1,2,3);\n```\n\n获取数组的长度\n\n```JavaScript\nvar arr = [1,2,3.14,\"hello\",null,true];\narr.length;//6\n//可以给数组的长度赋值,改变数组的大小\narr.length = 7;//数组改变为[1,2,3.14,\"hello\",null,true,undefined]\narr.length = 4;//数组改变为[1,2,3.14,\"hello\"]\n```\n\n\n数组可以通过索引来访问每个元素的值,也可以改变索引对应元素的值:\n\n```JavaScript\nvar arr = [1,2,3.14,\"hello\",null,true];\narr[0]; //数组第一个元素,值为1\narr[1] = 10;//修改数组第二个元素的值为10\n```\n\n注意:如果通过索引给数组赋值的时候,索引超过了数组长度,数组会被变大\n\n```JavaScript\nvar arr = ['A', 'B', 'C'];\narr[5] = 'F';//arr会变为['A', 'B', 'C', undefined, undefined, 'F'];\n```\n\n获取对应元素的索引\n\n```JavaScript\nvar arr = [10, 20 ,'30', 'xyz'];\narr.indexOf(10);//元素10的索引是0\narr.indexOf(20);//元素20的索引是1\narr.indexOf(30);//元素30的索引是 -1 因为没有找到元素\narr.indexOf('30');//元素'30'的索引是2\n```\n注意：数字`30`和`'30'`是不同的元素\n\n获取数组中的部分元素\n\n```JavaScript\nvar arr =['A','B','C','D','E','F','G'];\narr.slice(0,3);//从索引0开始,到索引3结束,但不包括索引3:['A','B','C']\narr.slice(3);//从索引3开始到结束:['D','E','F','G']\n\n```\n\n注意:`slice()`的起止参数包括开始索引,不包括结束索引\n如果不给`slice()`传递任何参数,它会从头到尾截取所有元素,这个方法可以复制一个`array`\n\n```JavaScript\nvar arr = ['A','B','C','D','E','F','G'];\nvar aCopy = arr.slice();\naCopy; //['A','B','C','D','E','F','G'];\naCopy === arr; //false\nif(aCopy.toString() === arr.toString()) {\n    alert('一样');//数组相同\n}else {\n    alert('不一样');//数组不同\n}\n```\n注意:`JavaScript`比较两个数组是否相同不能直接使用`===` 要比较两个数组是否相同,需要先把数组转换成字符串,然后再比较\n\n在数组末尾添加或删除若干元素,`push()`和`pop()`\n\n```JavaScript\nvar arr = [1 , 2];\narr.push('A','B'); //返回新的长度为4的数组\narr; //[1,2,'A','B']\narr.pop();//pop()返回'B'\narr; // [1,2,'A']\narr.pop();arr.pop();arr.pop(); //连续pop 3次\narr; //[]\narr.pop(); //空数组继续pop不会报错,而是返回undefined\narr;//[]\n```\n\n在数组头部添加或删除若干元素,`unshift()`和`shift()`\n\n```JavaScript\nvar arr =[1,2];\narr.unshift('A','B');//返回新的长度为4的数组\narr;//['A','B',1,2]\narr.shift();//'A'\narr;//['B',1,2]\narr.shift();arr.shift();arr.shift();//连续shift 3次\narr;//[]\narr.shift();//空数组继续shift不会报错,而是返回undefined\narr;//[]\n```\n\n数组排序\n`sort()`可以对当前数组进行排序,它会直接修改当前的数组元素的位置,直接调用时,会按照默认顺序排序\n\n```JavaScript\nvar arr = ['B','C','A'];\narr.sort();\narr;//['A','B','C']\n```\n注意 在函数中可以自定义排序条件\n\n数组反转\n\n`reverse()`可以把数组的元素反转\n\n```JavaScript\nvar arr = ['A','B','C'];\narr.reverse();\narr;//['three','two','one']\n```\n\n数组修改的\"万能方法\",可以从指定索引开始删除若干元素,然后再从该位置添加若干元素\n\n```JavaScript\nvar arr =['Microsoft','Apple','Yahoo','AOL','Excite','Oracle']\narr.splice(2,3,'Google','Facebook');//从索引2开始删除3个元素,然后再添加两个元素,返回删除的元素['Yahoo','AOL','Excite']\narr.splice(2,2);//只删除不添加,返回['Google','Facebook']\narr;//['Microsoft','Apple','Oracle']\narr.splice(2.0,'Google','Facebook');//只添加,不删除,返回[]\narr;//['Microsoft','Apple','Google','Facebook','Oracle']\n```\n把两个数组连接起来,返回一个新的数组\n\n```JavaScript\nvar arr = ['A','B','C'];\nvar added = arr.concat([1,2,3]);\nadded; //['A','B','C',1,2,3]\nARR;//['A','B','C']\n```\n注意 `concat()`方法并没有修改当前数组,而是返回了一个新的数组\n\n而且`concat()`可以接收任意个元素和数组,并把所有数组自动拆开,添加到新的数组中\n\n```JavaScript\nvar arr = ['A','B','C'];\narr.concat(1,2,[3,4]);//['A','B','C',1,2,3,4]\n```\n\n把数组的每个元素都用指定的字符串连接起来,然后返回字符串\n\n```JavaScript\nvar arr = ['A','B','C',1,2,3];\narr.join('-'); //'A-B-C-1-2-3'\n```\n注意如果数组的元素不是字符串,会自动转换成字符串再连接\n\n多维数组,指的是数组中的某个元素又是一个数组\n\n```JavaScript\nvar arr = [[1,2,3],[400,500,600],'-'];\n```\n\n上述`Array`包含3个元素,其中头两个元素本身也是`Array`\n\n\n### 对象\n对象是一组由键-值组成的无序集合:\n\n```JavaScript\nvar person = {\n\tname: 'XiaoWang',\n\ttags: ['js', 'web', 'mobile'],\n\tage: 12,\n\tcity: 'shanghai',\n\thasCar: false,\n\tzipcode: null\n};\n```\n\nJavaScript用一个`{...}` 表示一个对象,键值对以`xxx: xxx`形式申明,用`,`隔开,最后一个键值对不需要加\n\nJavaScript对象的键都是字符串类型,值可以是任意数据类型,每个键都是对象的一个属性,获取属性的方法:\n\n```JavaScript\nperson.name; // 'XiaoWang'\nperson.zipcode; // null\n```\n注:`var person` 是JavaScript的一个变量,`person`是变量名,变量名是大小写英文,数字,`$`和`_`的组合,且不能用数字开头,也不能使用JavaScript中的关键字\n\n\n#### strict模式\n蛋疼的布兰登在设计JavaScript的时候为了赶工期,并没有强制使用`var`声明变量,如果一个变量没有通过`var`声明就被使用,这个变量就会被自动声明为全局变量\n\n```JavaScript\ni = 10; //i就是一个全局变量\n```\n\n如果在不同的JavaScript文件中,你都使用了同样名字的变量,而且都没有用`var`声明,那么你就麻烦了.\n\n因此,为了给布兰登填坑,ECMA在后续的规范中推出了strict模式,在strict模式下运行JavaScript代码不允许使用没有`var`声明的变量,如果有那么就给你报错\n\n启动strict模式的方法很简单,就是在JavaScript代码的第一行写上:\n\n```JavaScript\n'use strict';\n```\n注:如果你用的是老爷机,你的浏览器太老了,他会自以为是的把上面那就话当做一个字符串语句执行,如果这样的话还是换个最新版的浏览器吧\n\n#### Advanced Operaters (高级运算符)\n取余运算 `x = y % 2`\n累加运算 `a = 5`\n\t\t`c = a++`/Users/YaoWanXin/Desktop/app.html resulets : c = 5 and a = 6\n\t\t`c = ++a` resulets : c = 6 and a = 6\n累减运算 `a = 5`\n\t\t`c = a--` resulets : c = 5 and a = 4\n\t\t`c = --a` resulets : c = 4 and a = 4\n","slug":"JavaScript","published":1,"updated":"2017-04-06T12:26:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4uqxnae0002nts6d7ctuda1","content":"<h2 id=\"Equality-相等比较符\"><a href=\"#Equality-相等比较符\" class=\"headerlink\" title=\"Equality (相等比较符)\"></a>Equality (相等比较符)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">42</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"number\">42</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> baz = <span class=\"string\">\"42\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> qux = <span class=\"string\">\"life\"</span>;</div></pre></td></tr></table></figure>\n<p>定义了四个变量在Javascript中 <code>==</code>是用来比较两个值但是不会判断类型故 <code>foo == baz</code>返回的值是<code>true</code></p>\n<p>使用<code>==</code>比较的时候编译器会先把类型转换成相同的类型,再去比较</p>\n<p>因此在JavaScript 要是比较不同类型的两个值可以使用<code>===</code>这样会先判断类型,如果类型不同就会返回<code>false</code></p>\n<p>所以推荐使用<code>===</code>比较</p>\n<a id=\"more\"></a>\n<p>注意: 1.<code>NaN</code>是个特殊的Number,他与所有其他值都不相等,包括它自己<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span> ; <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<p>唯一能判断NaN的方法是通过isNaN()函数:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>2.浮点数的比较:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>/<span class=\"number\">3</span> === (<span class=\"number\">1</span> - <span class=\"number\">2</span> / <span class=\"number\">3</span>); <span class=\"comment\">//false</span></div></pre></td></tr></table></figure></p>\n<p>这个结果是正确的,出现这个结果这是因为浮点数在运算过程中会产生误差,计算机无法精确的表示无限小数,所以要比较两个浮点数是否相等,只能计算他们之差的绝对值,看是否小于某个阈值:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Math</span>.abs(<span class=\"number\">1</span>/<span class=\"number\">3</span> - (<span class=\"number\">1</span> - <span class=\"number\">2</span> / <span class=\"number\">3</span>)) &lt; <span class=\"number\">0.0000001</span>; <span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<h2 id=\"Types\"><a href=\"#Types\" class=\"headerlink\" title=\"Types\"></a>Types</h2><h3 id=\"numbers\"><a href=\"#numbers\" class=\"headerlink\" title=\"numbers\"></a>numbers</h3><p>JavaScript中只有一种数字类型 – 64-bit float point,类似于Java中的double类型,所以在JavaScript中1和1.0是相同的值<br>number可以直接做四则运算，规则和数学一致</p>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>字符串是以’单引号’或”双引号”括起来的文本,如<code>&#39;abc&#39;</code> <code>&quot;xyz&quot;</code></p>\n<p>注意<code>&#39; &#39;</code>和<code>&quot; &quot;</code>并不是字符串的一部分</p>\n<p>如果字符串中包含<code>&#39;</code> 就使用<code>&quot;&quot;</code>把文本包起来,如果字符串中包含<code>&quot;</code> 就需要使用转义字符了<code>\\</code></p>\n<p>在多行字符串中换行使用的是<code>\\n</code> 但是如果行数太多<code>\\n</code>需要写多个,不方便,在JavaScript中又增加了一种表示方法(ES6),就是将多行文本用`… `括起来,就是键盘上tab键上边的那个按键.</p>\n<h4 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h4><p>多个字符串可以使用<code>+</code>连接起来.字符串也可以是变量如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'小王吧'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"string\">'100'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">'你好,'</span> + name + <span class=\"string\">',你现在'</span> + age + <span class=\"string\">'岁'</span>;</div></pre></td></tr></table></figure>\n<p>同样,如果要连接的变量有很多,使用<code>+</code>就会很不方便,在JavaScript中增加了一种模板字符串的表示(ES6):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'小王吧'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"string\">'101'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>,你今年<span class=\"subst\">$&#123;age&#125;</span>岁,是不是?`</span></div></pre></td></tr></table></figure>\n<p>注意:新的表示方法使用的是` ,就是新的多行文本使用的符号,就是键盘上<code>tab</code>按键上边的那个按键,不能使用<code>&quot;&quot;或&#39;&#39;</code>,那样无法转换变量</p>\n<h4 id=\"字符串操作\"><a href=\"#字符串操作\" class=\"headerlink\" title=\"字符串操作\"></a>字符串操作</h4><p>获取字符的长度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'xiao wang ba.'</span>;</div><div class=\"line\">alert(name.length); <span class=\"comment\">//13</span></div></pre></td></tr></table></figure>\n<p>获取指定位置字符,可以把字符串看成是特殊的数组,对字符串进行下标操作,从0索引开始</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'xiao wang ba.'</span>;</div><div class=\"line\">name[<span class=\"number\">0</span>]; <span class=\"comment\">//'x'</span></div><div class=\"line\">name[<span class=\"number\">1</span>]; <span class=\"comment\">//'i'</span></div><div class=\"line\">name[<span class=\"number\">4</span>]; <span class=\"comment\">//' '</span></div><div class=\"line\">name[<span class=\"number\">12</span>];<span class=\"comment\">//'.'</span></div><div class=\"line\">name[<span class=\"number\">13</span>];<span class=\"comment\">//undefined 超出范围的索引一律返回undefined</span></div></pre></td></tr></table></figure>\n<p>注意:给字符串的索引赋值不会有报错,也不会有任何效果,字符串也不会改变</p>\n<p>改变字符串为大写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'xiao wang ba.'</span>;</div><div class=\"line\">name.toUpperCase(); <span class=\"comment\">//返回'XIAO WANG BA.'</span></div></pre></td></tr></table></figure>\n<p>改变字符串为小写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'Xiao Wang Ba.'</span>;</div><div class=\"line\">name.toLowerCase(); <span class=\"comment\">//返回'xiao wang ba.'</span></div></pre></td></tr></table></figure>\n<p>注意:如果字符串是中文,则没效果</p>\n<p>返回字符串出现的位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'Xiao Wang Ba.'</span>;</div><div class=\"line\">name.indexOf(<span class=\"string\">'Wang'</span>);<span class=\"comment\">//返回5</span></div><div class=\"line\">name.indexOf(<span class=\"string\">'wang'</span>);<span class=\"comment\">//如果没有找到指定的子串,返回-1</span></div></pre></td></tr></table></figure>\n<p>获取字符串中的子串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'xiao wang ba.'</span>;</div><div class=\"line\">name.substring(<span class=\"number\">0</span>,<span class=\"number\">4</span>);<span class=\"comment\">//从索引0开始到4(不包括4),返回'xiao'</span></div><div class=\"line\">name.substring(<span class=\"number\">10</span>);<span class=\"comment\">//从索引10开始到结束,返回'ba.'</span></div></pre></td></tr></table></figure>\n<h3 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h3><p>JavaScript中的布尔值有<code>true</code>和<code>false</code>两种值,可以直接用<code>true</code>或<code>false</code>表示,也可以通过布尔运算计算出来</p>\n<h3 id=\"null和undefined\"><a href=\"#null和undefined\" class=\"headerlink\" title=\"null和undefined\"></a>null和undefined</h3><p><code>null</code>表示一个”空”的值,同Java中的<code>null</code>,Swift中的nil,Python中的None用法类似.<br><code>undefined</code>表示”未定义”.<br>JavaScript设计的时候希望用<code>null</code>表示一个空的值,用<code>undefined</code>表示值未定义,但是大多数情况下我们都应该用<code>null</code>.<code>undefined</code>仅仅在判断函数参数是否传递的情况下有用</p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>数组是一组按顺序排列的集合,集合的每个值称为元素.JavaScript的数组可以包括任意数据类型.<br>创建方法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3.14</span>,<span class=\"string\">\"hello\"</span>,<span class=\"literal\">null</span>,<span class=\"literal\">true</span>]; <span class=\"comment\">//推荐使用</span></div></pre></td></tr></table></figure>\n<p>另一种创建方法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n<p>获取数组的长度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3.14</span>,<span class=\"string\">\"hello\"</span>,<span class=\"literal\">null</span>,<span class=\"literal\">true</span>];</div><div class=\"line\">arr.length;<span class=\"comment\">//6</span></div><div class=\"line\"><span class=\"comment\">//可以给数组的长度赋值,改变数组的大小</span></div><div class=\"line\">arr.length = <span class=\"number\">7</span>;<span class=\"comment\">//数组改变为[1,2,3.14,\"hello\",null,true,undefined]</span></div><div class=\"line\">arr.length = <span class=\"number\">4</span>;<span class=\"comment\">//数组改变为[1,2,3.14,\"hello\"]</span></div></pre></td></tr></table></figure>\n<p>数组可以通过索引来访问每个元素的值,也可以改变索引对应元素的值:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3.14</span>,<span class=\"string\">\"hello\"</span>,<span class=\"literal\">null</span>,<span class=\"literal\">true</span>];</div><div class=\"line\">arr[<span class=\"number\">0</span>]; <span class=\"comment\">//数组第一个元素,值为1</span></div><div class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"number\">10</span>;<span class=\"comment\">//修改数组第二个元素的值为10</span></div></pre></td></tr></table></figure>\n<p>注意:如果通过索引给数组赋值的时候,索引超过了数组长度,数组会被变大</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\">arr[<span class=\"number\">5</span>] = <span class=\"string\">'F'</span>;<span class=\"comment\">//arr会变为['A', 'B', 'C', undefined, undefined, 'F'];</span></div></pre></td></tr></table></figure>\n<p>获取对应元素的索引</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">20</span> ,<span class=\"string\">'30'</span>, <span class=\"string\">'xyz'</span>];</div><div class=\"line\">arr.indexOf(<span class=\"number\">10</span>);<span class=\"comment\">//元素10的索引是0</span></div><div class=\"line\">arr.indexOf(<span class=\"number\">20</span>);<span class=\"comment\">//元素20的索引是1</span></div><div class=\"line\">arr.indexOf(<span class=\"number\">30</span>);<span class=\"comment\">//元素30的索引是 -1 因为没有找到元素</span></div><div class=\"line\">arr.indexOf(<span class=\"string\">'30'</span>);<span class=\"comment\">//元素'30'的索引是2</span></div></pre></td></tr></table></figure>\n<p>注意：数字<code>30</code>和<code>&#39;30&#39;</code>是不同的元素</p>\n<p>获取数组中的部分元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr =[<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>,<span class=\"string\">'D'</span>,<span class=\"string\">'E'</span>,<span class=\"string\">'F'</span>,<span class=\"string\">'G'</span>];</div><div class=\"line\">arr.slice(<span class=\"number\">0</span>,<span class=\"number\">3</span>);<span class=\"comment\">//从索引0开始,到索引3结束,但不包括索引3:['A','B','C']</span></div><div class=\"line\">arr.slice(<span class=\"number\">3</span>);<span class=\"comment\">//从索引3开始到结束:['D','E','F','G']</span></div></pre></td></tr></table></figure>\n<p>注意:<code>slice()</code>的起止参数包括开始索引,不包括结束索引<br>如果不给<code>slice()</code>传递任何参数,它会从头到尾截取所有元素,这个方法可以复制一个<code>array</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>,<span class=\"string\">'D'</span>,<span class=\"string\">'E'</span>,<span class=\"string\">'F'</span>,<span class=\"string\">'G'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> aCopy = arr.slice();</div><div class=\"line\">aCopy; <span class=\"comment\">//['A','B','C','D','E','F','G'];</span></div><div class=\"line\">aCopy === arr; <span class=\"comment\">//false</span></div><div class=\"line\"><span class=\"keyword\">if</span>(aCopy.toString() === arr.toString()) &#123;</div><div class=\"line\">    alert(<span class=\"string\">'一样'</span>);<span class=\"comment\">//数组相同</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    alert(<span class=\"string\">'不一样'</span>);<span class=\"comment\">//数组不同</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意:<code>JavaScript</code>比较两个数组是否相同不能直接使用<code>===</code> 要比较两个数组是否相同,需要先把数组转换成字符串,然后再比较</p>\n<p>在数组末尾添加或删除若干元素,<code>push()</code>和<code>pop()</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span> , <span class=\"number\">2</span>];</div><div class=\"line\">arr.push(<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>); <span class=\"comment\">//返回新的长度为4的数组</span></div><div class=\"line\">arr; <span class=\"comment\">//[1,2,'A','B']</span></div><div class=\"line\">arr.pop();<span class=\"comment\">//pop()返回'B'</span></div><div class=\"line\">arr; <span class=\"comment\">// [1,2,'A']</span></div><div class=\"line\">arr.pop();arr.pop();arr.pop(); <span class=\"comment\">//连续pop 3次</span></div><div class=\"line\">arr; <span class=\"comment\">//[]</span></div><div class=\"line\">arr.pop(); <span class=\"comment\">//空数组继续pop不会报错,而是返回undefined</span></div><div class=\"line\">arr;<span class=\"comment\">//[]</span></div></pre></td></tr></table></figure>\n<p>在数组头部添加或删除若干元素,<code>unshift()</code>和<code>shift()</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr =[<span class=\"number\">1</span>,<span class=\"number\">2</span>];</div><div class=\"line\">arr.unshift(<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>);<span class=\"comment\">//返回新的长度为4的数组</span></div><div class=\"line\">arr;<span class=\"comment\">//['A','B',1,2]</span></div><div class=\"line\">arr.shift();<span class=\"comment\">//'A'</span></div><div class=\"line\">arr;<span class=\"comment\">//['B',1,2]</span></div><div class=\"line\">arr.shift();arr.shift();arr.shift();<span class=\"comment\">//连续shift 3次</span></div><div class=\"line\">arr;<span class=\"comment\">//[]</span></div><div class=\"line\">arr.shift();<span class=\"comment\">//空数组继续shift不会报错,而是返回undefined</span></div><div class=\"line\">arr;<span class=\"comment\">//[]</span></div></pre></td></tr></table></figure>\n<p>数组排序<br><code>sort()</code>可以对当前数组进行排序,它会直接修改当前的数组元素的位置,直接调用时,会按照默认顺序排序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>,<span class=\"string\">'A'</span>];</div><div class=\"line\">arr.sort();</div><div class=\"line\">arr;<span class=\"comment\">//['A','B','C']</span></div></pre></td></tr></table></figure>\n<p>注意 在函数中可以自定义排序条件</p>\n<p>数组反转</p>\n<p><code>reverse()</code>可以把数组的元素反转</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>];</div><div class=\"line\">arr.reverse();</div><div class=\"line\">arr;<span class=\"comment\">//['three','two','one']</span></div></pre></td></tr></table></figure>\n<p>数组修改的”万能方法”,可以从指定索引开始删除若干元素,然后再从该位置添加若干元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr =[<span class=\"string\">'Microsoft'</span>,<span class=\"string\">'Apple'</span>,<span class=\"string\">'Yahoo'</span>,<span class=\"string\">'AOL'</span>,<span class=\"string\">'Excite'</span>,<span class=\"string\">'Oracle'</span>]</div><div class=\"line\">arr.splice(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">'Google'</span>,<span class=\"string\">'Facebook'</span>);<span class=\"comment\">//从索引2开始删除3个元素,然后再添加两个元素,返回删除的元素['Yahoo','AOL','Excite']</span></div><div class=\"line\">arr.splice(<span class=\"number\">2</span>,<span class=\"number\">2</span>);<span class=\"comment\">//只删除不添加,返回['Google','Facebook']</span></div><div class=\"line\">arr;<span class=\"comment\">//['Microsoft','Apple','Oracle']</span></div><div class=\"line\">arr.splice(<span class=\"number\">2.0</span>,<span class=\"string\">'Google'</span>,<span class=\"string\">'Facebook'</span>);<span class=\"comment\">//只添加,不删除,返回[]</span></div><div class=\"line\">arr;<span class=\"comment\">//['Microsoft','Apple','Google','Facebook','Oracle']</span></div></pre></td></tr></table></figure>\n<p>把两个数组连接起来,返回一个新的数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> added = arr.concat([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]);</div><div class=\"line\">added; <span class=\"comment\">//['A','B','C',1,2,3]</span></div><div class=\"line\">ARR;<span class=\"comment\">//['A','B','C']</span></div></pre></td></tr></table></figure>\n<p>注意 <code>concat()</code>方法并没有修改当前数组,而是返回了一个新的数组</p>\n<p>而且<code>concat()</code>可以接收任意个元素和数组,并把所有数组自动拆开,添加到新的数组中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>];</div><div class=\"line\">arr.concat(<span class=\"number\">1</span>,<span class=\"number\">2</span>,[<span class=\"number\">3</span>,<span class=\"number\">4</span>]);<span class=\"comment\">//['A','B','C',1,2,3,4]</span></div></pre></td></tr></table></figure>\n<p>把数组的每个元素都用指定的字符串连接起来,然后返回字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</div><div class=\"line\">arr.join(<span class=\"string\">'-'</span>); <span class=\"comment\">//'A-B-C-1-2-3'</span></div></pre></td></tr></table></figure>\n<p>注意如果数组的元素不是字符串,会自动转换成字符串再连接</p>\n<p>多维数组,指的是数组中的某个元素又是一个数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">400</span>,<span class=\"number\">500</span>,<span class=\"number\">600</span>],<span class=\"string\">'-'</span>];</div></pre></td></tr></table></figure>\n<p>上述<code>Array</code>包含3个元素,其中头两个元素本身也是<code>Array</code></p>\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p>对象是一组由键-值组成的无序集合:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">'XiaoWang'</span>,</div><div class=\"line\">\t<span class=\"attr\">tags</span>: [<span class=\"string\">'js'</span>, <span class=\"string\">'web'</span>, <span class=\"string\">'mobile'</span>],</div><div class=\"line\">\t<span class=\"attr\">age</span>: <span class=\"number\">12</span>,</div><div class=\"line\">\t<span class=\"attr\">city</span>: <span class=\"string\">'shanghai'</span>,</div><div class=\"line\">\t<span class=\"attr\">hasCar</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">\t<span class=\"attr\">zipcode</span>: <span class=\"literal\">null</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>JavaScript用一个<code>{...}</code> 表示一个对象,键值对以<code>xxx: xxx</code>形式申明,用<code>,</code>隔开,最后一个键值对不需要加</p>\n<p>JavaScript对象的键都是字符串类型,值可以是任意数据类型,每个键都是对象的一个属性,获取属性的方法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">person.name; <span class=\"comment\">// 'XiaoWang'</span></div><div class=\"line\">person.zipcode; <span class=\"comment\">// null</span></div></pre></td></tr></table></figure>\n<p>注:<code>var person</code> 是JavaScript的一个变量,<code>person</code>是变量名,变量名是大小写英文,数字,<code>$</code>和<code>_</code>的组合,且不能用数字开头,也不能使用JavaScript中的关键字</p>\n<h4 id=\"strict模式\"><a href=\"#strict模式\" class=\"headerlink\" title=\"strict模式\"></a>strict模式</h4><p>蛋疼的布兰登在设计JavaScript的时候为了赶工期,并没有强制使用<code>var</code>声明变量,如果一个变量没有通过<code>var</code>声明就被使用,这个变量就会被自动声明为全局变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">i = <span class=\"number\">10</span>; <span class=\"comment\">//i就是一个全局变量</span></div></pre></td></tr></table></figure>\n<p>如果在不同的JavaScript文件中,你都使用了同样名字的变量,而且都没有用<code>var</code>声明,那么你就麻烦了.</p>\n<p>因此,为了给布兰登填坑,ECMA在后续的规范中推出了strict模式,在strict模式下运行JavaScript代码不允许使用没有<code>var</code>声明的变量,如果有那么就给你报错</p>\n<p>启动strict模式的方法很简单,就是在JavaScript代码的第一行写上:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div></pre></td></tr></table></figure>\n<p>注:如果你用的是老爷机,你的浏览器太老了,他会自以为是的把上面那就话当做一个字符串语句执行,如果这样的话还是换个最新版的浏览器吧</p>\n<h4 id=\"Advanced-Operaters-高级运算符\"><a href=\"#Advanced-Operaters-高级运算符\" class=\"headerlink\" title=\"Advanced Operaters (高级运算符)\"></a>Advanced Operaters (高级运算符)</h4><p>取余运算 <code>x = y % 2</code><br>累加运算 <code>a = 5</code><br>        <code>c = a++</code>/Users/YaoWanXin/Desktop/app.html resulets : c = 5 and a = 6<br>        <code>c = ++a</code> resulets : c = 6 and a = 6<br>累减运算 <code>a = 5</code><br>        <code>c = a--</code> resulets : c = 5 and a = 4<br>        <code>c = --a</code> resulets : c = 4 and a = 4</p>\n","excerpt":"<h2 id=\"Equality-相等比较符\"><a href=\"#Equality-相等比较符\" class=\"headerlink\" title=\"Equality (相等比较符)\"></a>Equality (相等比较符)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">42</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"number\">42</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> baz = <span class=\"string\">\"42\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> qux = <span class=\"string\">\"life\"</span>;</div></pre></td></tr></table></figure>\n<p>定义了四个变量在Javascript中 <code>==</code>是用来比较两个值但是不会判断类型故 <code>foo == baz</code>返回的值是<code>true</code></p>\n<p>使用<code>==</code>比较的时候编译器会先把类型转换成相同的类型,再去比较</p>\n<p>因此在JavaScript 要是比较不同类型的两个值可以使用<code>===</code>这样会先判断类型,如果类型不同就会返回<code>false</code></p>\n<p>所以推荐使用<code>===</code>比较</p>","more":"<p>注意: 1.<code>NaN</code>是个特殊的Number,他与所有其他值都不相等,包括它自己<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span> ; <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<p>唯一能判断NaN的方法是通过isNaN()函数:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>2.浮点数的比较:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>/<span class=\"number\">3</span> === (<span class=\"number\">1</span> - <span class=\"number\">2</span> / <span class=\"number\">3</span>); <span class=\"comment\">//false</span></div></pre></td></tr></table></figure></p>\n<p>这个结果是正确的,出现这个结果这是因为浮点数在运算过程中会产生误差,计算机无法精确的表示无限小数,所以要比较两个浮点数是否相等,只能计算他们之差的绝对值,看是否小于某个阈值:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Math</span>.abs(<span class=\"number\">1</span>/<span class=\"number\">3</span> - (<span class=\"number\">1</span> - <span class=\"number\">2</span> / <span class=\"number\">3</span>)) &lt; <span class=\"number\">0.0000001</span>; <span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<h2 id=\"Types\"><a href=\"#Types\" class=\"headerlink\" title=\"Types\"></a>Types</h2><h3 id=\"numbers\"><a href=\"#numbers\" class=\"headerlink\" title=\"numbers\"></a>numbers</h3><p>JavaScript中只有一种数字类型 – 64-bit float point,类似于Java中的double类型,所以在JavaScript中1和1.0是相同的值<br>number可以直接做四则运算，规则和数学一致</p>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>字符串是以’单引号’或”双引号”括起来的文本,如<code>&#39;abc&#39;</code> <code>&quot;xyz&quot;</code></p>\n<p>注意<code>&#39; &#39;</code>和<code>&quot; &quot;</code>并不是字符串的一部分</p>\n<p>如果字符串中包含<code>&#39;</code> 就使用<code>&quot;&quot;</code>把文本包起来,如果字符串中包含<code>&quot;</code> 就需要使用转义字符了<code>\\</code></p>\n<p>在多行字符串中换行使用的是<code>\\n</code> 但是如果行数太多<code>\\n</code>需要写多个,不方便,在JavaScript中又增加了一种表示方法(ES6),就是将多行文本用`… `括起来,就是键盘上tab键上边的那个按键.</p>\n<h4 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h4><p>多个字符串可以使用<code>+</code>连接起来.字符串也可以是变量如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'小王吧'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"string\">'100'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">'你好,'</span> + name + <span class=\"string\">',你现在'</span> + age + <span class=\"string\">'岁'</span>;</div></pre></td></tr></table></figure>\n<p>同样,如果要连接的变量有很多,使用<code>+</code>就会很不方便,在JavaScript中增加了一种模板字符串的表示(ES6):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'小王吧'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"string\">'101'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>,你今年<span class=\"subst\">$&#123;age&#125;</span>岁,是不是?`</span></div></pre></td></tr></table></figure>\n<p>注意:新的表示方法使用的是` ,就是新的多行文本使用的符号,就是键盘上<code>tab</code>按键上边的那个按键,不能使用<code>&quot;&quot;或&#39;&#39;</code>,那样无法转换变量</p>\n<h4 id=\"字符串操作\"><a href=\"#字符串操作\" class=\"headerlink\" title=\"字符串操作\"></a>字符串操作</h4><p>获取字符的长度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'xiao wang ba.'</span>;</div><div class=\"line\">alert(name.length); <span class=\"comment\">//13</span></div></pre></td></tr></table></figure>\n<p>获取指定位置字符,可以把字符串看成是特殊的数组,对字符串进行下标操作,从0索引开始</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'xiao wang ba.'</span>;</div><div class=\"line\">name[<span class=\"number\">0</span>]; <span class=\"comment\">//'x'</span></div><div class=\"line\">name[<span class=\"number\">1</span>]; <span class=\"comment\">//'i'</span></div><div class=\"line\">name[<span class=\"number\">4</span>]; <span class=\"comment\">//' '</span></div><div class=\"line\">name[<span class=\"number\">12</span>];<span class=\"comment\">//'.'</span></div><div class=\"line\">name[<span class=\"number\">13</span>];<span class=\"comment\">//undefined 超出范围的索引一律返回undefined</span></div></pre></td></tr></table></figure>\n<p>注意:给字符串的索引赋值不会有报错,也不会有任何效果,字符串也不会改变</p>\n<p>改变字符串为大写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'xiao wang ba.'</span>;</div><div class=\"line\">name.toUpperCase(); <span class=\"comment\">//返回'XIAO WANG BA.'</span></div></pre></td></tr></table></figure>\n<p>改变字符串为小写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'Xiao Wang Ba.'</span>;</div><div class=\"line\">name.toLowerCase(); <span class=\"comment\">//返回'xiao wang ba.'</span></div></pre></td></tr></table></figure>\n<p>注意:如果字符串是中文,则没效果</p>\n<p>返回字符串出现的位置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'Xiao Wang Ba.'</span>;</div><div class=\"line\">name.indexOf(<span class=\"string\">'Wang'</span>);<span class=\"comment\">//返回5</span></div><div class=\"line\">name.indexOf(<span class=\"string\">'wang'</span>);<span class=\"comment\">//如果没有找到指定的子串,返回-1</span></div></pre></td></tr></table></figure>\n<p>获取字符串中的子串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'xiao wang ba.'</span>;</div><div class=\"line\">name.substring(<span class=\"number\">0</span>,<span class=\"number\">4</span>);<span class=\"comment\">//从索引0开始到4(不包括4),返回'xiao'</span></div><div class=\"line\">name.substring(<span class=\"number\">10</span>);<span class=\"comment\">//从索引10开始到结束,返回'ba.'</span></div></pre></td></tr></table></figure>\n<h3 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h3><p>JavaScript中的布尔值有<code>true</code>和<code>false</code>两种值,可以直接用<code>true</code>或<code>false</code>表示,也可以通过布尔运算计算出来</p>\n<h3 id=\"null和undefined\"><a href=\"#null和undefined\" class=\"headerlink\" title=\"null和undefined\"></a>null和undefined</h3><p><code>null</code>表示一个”空”的值,同Java中的<code>null</code>,Swift中的nil,Python中的None用法类似.<br><code>undefined</code>表示”未定义”.<br>JavaScript设计的时候希望用<code>null</code>表示一个空的值,用<code>undefined</code>表示值未定义,但是大多数情况下我们都应该用<code>null</code>.<code>undefined</code>仅仅在判断函数参数是否传递的情况下有用</p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>数组是一组按顺序排列的集合,集合的每个值称为元素.JavaScript的数组可以包括任意数据类型.<br>创建方法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3.14</span>,<span class=\"string\">\"hello\"</span>,<span class=\"literal\">null</span>,<span class=\"literal\">true</span>]; <span class=\"comment\">//推荐使用</span></div></pre></td></tr></table></figure>\n<p>另一种创建方法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n<p>获取数组的长度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3.14</span>,<span class=\"string\">\"hello\"</span>,<span class=\"literal\">null</span>,<span class=\"literal\">true</span>];</div><div class=\"line\">arr.length;<span class=\"comment\">//6</span></div><div class=\"line\"><span class=\"comment\">//可以给数组的长度赋值,改变数组的大小</span></div><div class=\"line\">arr.length = <span class=\"number\">7</span>;<span class=\"comment\">//数组改变为[1,2,3.14,\"hello\",null,true,undefined]</span></div><div class=\"line\">arr.length = <span class=\"number\">4</span>;<span class=\"comment\">//数组改变为[1,2,3.14,\"hello\"]</span></div></pre></td></tr></table></figure>\n<p>数组可以通过索引来访问每个元素的值,也可以改变索引对应元素的值:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3.14</span>,<span class=\"string\">\"hello\"</span>,<span class=\"literal\">null</span>,<span class=\"literal\">true</span>];</div><div class=\"line\">arr[<span class=\"number\">0</span>]; <span class=\"comment\">//数组第一个元素,值为1</span></div><div class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"number\">10</span>;<span class=\"comment\">//修改数组第二个元素的值为10</span></div></pre></td></tr></table></figure>\n<p>注意:如果通过索引给数组赋值的时候,索引超过了数组长度,数组会被变大</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\">arr[<span class=\"number\">5</span>] = <span class=\"string\">'F'</span>;<span class=\"comment\">//arr会变为['A', 'B', 'C', undefined, undefined, 'F'];</span></div></pre></td></tr></table></figure>\n<p>获取对应元素的索引</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">20</span> ,<span class=\"string\">'30'</span>, <span class=\"string\">'xyz'</span>];</div><div class=\"line\">arr.indexOf(<span class=\"number\">10</span>);<span class=\"comment\">//元素10的索引是0</span></div><div class=\"line\">arr.indexOf(<span class=\"number\">20</span>);<span class=\"comment\">//元素20的索引是1</span></div><div class=\"line\">arr.indexOf(<span class=\"number\">30</span>);<span class=\"comment\">//元素30的索引是 -1 因为没有找到元素</span></div><div class=\"line\">arr.indexOf(<span class=\"string\">'30'</span>);<span class=\"comment\">//元素'30'的索引是2</span></div></pre></td></tr></table></figure>\n<p>注意：数字<code>30</code>和<code>&#39;30&#39;</code>是不同的元素</p>\n<p>获取数组中的部分元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr =[<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>,<span class=\"string\">'D'</span>,<span class=\"string\">'E'</span>,<span class=\"string\">'F'</span>,<span class=\"string\">'G'</span>];</div><div class=\"line\">arr.slice(<span class=\"number\">0</span>,<span class=\"number\">3</span>);<span class=\"comment\">//从索引0开始,到索引3结束,但不包括索引3:['A','B','C']</span></div><div class=\"line\">arr.slice(<span class=\"number\">3</span>);<span class=\"comment\">//从索引3开始到结束:['D','E','F','G']</span></div></pre></td></tr></table></figure>\n<p>注意:<code>slice()</code>的起止参数包括开始索引,不包括结束索引<br>如果不给<code>slice()</code>传递任何参数,它会从头到尾截取所有元素,这个方法可以复制一个<code>array</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>,<span class=\"string\">'D'</span>,<span class=\"string\">'E'</span>,<span class=\"string\">'F'</span>,<span class=\"string\">'G'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> aCopy = arr.slice();</div><div class=\"line\">aCopy; <span class=\"comment\">//['A','B','C','D','E','F','G'];</span></div><div class=\"line\">aCopy === arr; <span class=\"comment\">//false</span></div><div class=\"line\"><span class=\"keyword\">if</span>(aCopy.toString() === arr.toString()) &#123;</div><div class=\"line\">    alert(<span class=\"string\">'一样'</span>);<span class=\"comment\">//数组相同</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    alert(<span class=\"string\">'不一样'</span>);<span class=\"comment\">//数组不同</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意:<code>JavaScript</code>比较两个数组是否相同不能直接使用<code>===</code> 要比较两个数组是否相同,需要先把数组转换成字符串,然后再比较</p>\n<p>在数组末尾添加或删除若干元素,<code>push()</code>和<code>pop()</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span> , <span class=\"number\">2</span>];</div><div class=\"line\">arr.push(<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>); <span class=\"comment\">//返回新的长度为4的数组</span></div><div class=\"line\">arr; <span class=\"comment\">//[1,2,'A','B']</span></div><div class=\"line\">arr.pop();<span class=\"comment\">//pop()返回'B'</span></div><div class=\"line\">arr; <span class=\"comment\">// [1,2,'A']</span></div><div class=\"line\">arr.pop();arr.pop();arr.pop(); <span class=\"comment\">//连续pop 3次</span></div><div class=\"line\">arr; <span class=\"comment\">//[]</span></div><div class=\"line\">arr.pop(); <span class=\"comment\">//空数组继续pop不会报错,而是返回undefined</span></div><div class=\"line\">arr;<span class=\"comment\">//[]</span></div></pre></td></tr></table></figure>\n<p>在数组头部添加或删除若干元素,<code>unshift()</code>和<code>shift()</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr =[<span class=\"number\">1</span>,<span class=\"number\">2</span>];</div><div class=\"line\">arr.unshift(<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>);<span class=\"comment\">//返回新的长度为4的数组</span></div><div class=\"line\">arr;<span class=\"comment\">//['A','B',1,2]</span></div><div class=\"line\">arr.shift();<span class=\"comment\">//'A'</span></div><div class=\"line\">arr;<span class=\"comment\">//['B',1,2]</span></div><div class=\"line\">arr.shift();arr.shift();arr.shift();<span class=\"comment\">//连续shift 3次</span></div><div class=\"line\">arr;<span class=\"comment\">//[]</span></div><div class=\"line\">arr.shift();<span class=\"comment\">//空数组继续shift不会报错,而是返回undefined</span></div><div class=\"line\">arr;<span class=\"comment\">//[]</span></div></pre></td></tr></table></figure>\n<p>数组排序<br><code>sort()</code>可以对当前数组进行排序,它会直接修改当前的数组元素的位置,直接调用时,会按照默认顺序排序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>,<span class=\"string\">'A'</span>];</div><div class=\"line\">arr.sort();</div><div class=\"line\">arr;<span class=\"comment\">//['A','B','C']</span></div></pre></td></tr></table></figure>\n<p>注意 在函数中可以自定义排序条件</p>\n<p>数组反转</p>\n<p><code>reverse()</code>可以把数组的元素反转</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>];</div><div class=\"line\">arr.reverse();</div><div class=\"line\">arr;<span class=\"comment\">//['three','two','one']</span></div></pre></td></tr></table></figure>\n<p>数组修改的”万能方法”,可以从指定索引开始删除若干元素,然后再从该位置添加若干元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr =[<span class=\"string\">'Microsoft'</span>,<span class=\"string\">'Apple'</span>,<span class=\"string\">'Yahoo'</span>,<span class=\"string\">'AOL'</span>,<span class=\"string\">'Excite'</span>,<span class=\"string\">'Oracle'</span>]</div><div class=\"line\">arr.splice(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">'Google'</span>,<span class=\"string\">'Facebook'</span>);<span class=\"comment\">//从索引2开始删除3个元素,然后再添加两个元素,返回删除的元素['Yahoo','AOL','Excite']</span></div><div class=\"line\">arr.splice(<span class=\"number\">2</span>,<span class=\"number\">2</span>);<span class=\"comment\">//只删除不添加,返回['Google','Facebook']</span></div><div class=\"line\">arr;<span class=\"comment\">//['Microsoft','Apple','Oracle']</span></div><div class=\"line\">arr.splice(<span class=\"number\">2.0</span>,<span class=\"string\">'Google'</span>,<span class=\"string\">'Facebook'</span>);<span class=\"comment\">//只添加,不删除,返回[]</span></div><div class=\"line\">arr;<span class=\"comment\">//['Microsoft','Apple','Google','Facebook','Oracle']</span></div></pre></td></tr></table></figure>\n<p>把两个数组连接起来,返回一个新的数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> added = arr.concat([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]);</div><div class=\"line\">added; <span class=\"comment\">//['A','B','C',1,2,3]</span></div><div class=\"line\">ARR;<span class=\"comment\">//['A','B','C']</span></div></pre></td></tr></table></figure>\n<p>注意 <code>concat()</code>方法并没有修改当前数组,而是返回了一个新的数组</p>\n<p>而且<code>concat()</code>可以接收任意个元素和数组,并把所有数组自动拆开,添加到新的数组中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>];</div><div class=\"line\">arr.concat(<span class=\"number\">1</span>,<span class=\"number\">2</span>,[<span class=\"number\">3</span>,<span class=\"number\">4</span>]);<span class=\"comment\">//['A','B','C',1,2,3,4]</span></div></pre></td></tr></table></figure>\n<p>把数组的每个元素都用指定的字符串连接起来,然后返回字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</div><div class=\"line\">arr.join(<span class=\"string\">'-'</span>); <span class=\"comment\">//'A-B-C-1-2-3'</span></div></pre></td></tr></table></figure>\n<p>注意如果数组的元素不是字符串,会自动转换成字符串再连接</p>\n<p>多维数组,指的是数组中的某个元素又是一个数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">400</span>,<span class=\"number\">500</span>,<span class=\"number\">600</span>],<span class=\"string\">'-'</span>];</div></pre></td></tr></table></figure>\n<p>上述<code>Array</code>包含3个元素,其中头两个元素本身也是<code>Array</code></p>\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p>对象是一组由键-值组成的无序集合:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">\t<span class=\"attr\">name</span>: <span class=\"string\">'XiaoWang'</span>,</div><div class=\"line\">\t<span class=\"attr\">tags</span>: [<span class=\"string\">'js'</span>, <span class=\"string\">'web'</span>, <span class=\"string\">'mobile'</span>],</div><div class=\"line\">\t<span class=\"attr\">age</span>: <span class=\"number\">12</span>,</div><div class=\"line\">\t<span class=\"attr\">city</span>: <span class=\"string\">'shanghai'</span>,</div><div class=\"line\">\t<span class=\"attr\">hasCar</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">\t<span class=\"attr\">zipcode</span>: <span class=\"literal\">null</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>JavaScript用一个<code>{...}</code> 表示一个对象,键值对以<code>xxx: xxx</code>形式申明,用<code>,</code>隔开,最后一个键值对不需要加</p>\n<p>JavaScript对象的键都是字符串类型,值可以是任意数据类型,每个键都是对象的一个属性,获取属性的方法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">person.name; <span class=\"comment\">// 'XiaoWang'</span></div><div class=\"line\">person.zipcode; <span class=\"comment\">// null</span></div></pre></td></tr></table></figure>\n<p>注:<code>var person</code> 是JavaScript的一个变量,<code>person</code>是变量名,变量名是大小写英文,数字,<code>$</code>和<code>_</code>的组合,且不能用数字开头,也不能使用JavaScript中的关键字</p>\n<h4 id=\"strict模式\"><a href=\"#strict模式\" class=\"headerlink\" title=\"strict模式\"></a>strict模式</h4><p>蛋疼的布兰登在设计JavaScript的时候为了赶工期,并没有强制使用<code>var</code>声明变量,如果一个变量没有通过<code>var</code>声明就被使用,这个变量就会被自动声明为全局变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">i = <span class=\"number\">10</span>; <span class=\"comment\">//i就是一个全局变量</span></div></pre></td></tr></table></figure>\n<p>如果在不同的JavaScript文件中,你都使用了同样名字的变量,而且都没有用<code>var</code>声明,那么你就麻烦了.</p>\n<p>因此,为了给布兰登填坑,ECMA在后续的规范中推出了strict模式,在strict模式下运行JavaScript代码不允许使用没有<code>var</code>声明的变量,如果有那么就给你报错</p>\n<p>启动strict模式的方法很简单,就是在JavaScript代码的第一行写上:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div></pre></td></tr></table></figure>\n<p>注:如果你用的是老爷机,你的浏览器太老了,他会自以为是的把上面那就话当做一个字符串语句执行,如果这样的话还是换个最新版的浏览器吧</p>\n<h4 id=\"Advanced-Operaters-高级运算符\"><a href=\"#Advanced-Operaters-高级运算符\" class=\"headerlink\" title=\"Advanced Operaters (高级运算符)\"></a>Advanced Operaters (高级运算符)</h4><p>取余运算 <code>x = y % 2</code><br>累加运算 <code>a = 5</code><br>        <code>c = a++</code>/Users/YaoWanXin/Desktop/app.html resulets : c = 5 and a = 6<br>        <code>c = ++a</code> resulets : c = 6 and a = 6<br>累减运算 <code>a = 5</code><br>        <code>c = a--</code> resulets : c = 5 and a = 4<br>        <code>c = --a</code> resulets : c = 4 and a = 4</p>"},{"title":"Xcode8报错","date":"2017-03-31T03:02:30.000Z","_content":"\nXcode8 报错resource fork, Finder information, or similar detritus not allowed\n\n## 原因 ##\n\n这是因为Xcode8引进的新的安全机制, Code signing不允许app的bundle里面的文件有未知的文件系统扩展属性\n\n## 解决方法 ##\n在终端中输入 `xattr -lr <path_to_app_bundle>` 可以查看存在未知扩展属性的文件\n\n在终端中输入 `xattr -cr <path_to_app_bundle>` 可以移除所有未知的扩展属性\n\n然后清理Xcode 重新build 工程\n","source":"_posts/Xcode8 报错resource fork, Finder information, or similar detritus not allowed.md","raw":"---\ntitle: Xcode8报错\ndate: 2017-03-31 11:02:30\ntags: iOS\n---\n\nXcode8 报错resource fork, Finder information, or similar detritus not allowed\n\n## 原因 ##\n\n这是因为Xcode8引进的新的安全机制, Code signing不允许app的bundle里面的文件有未知的文件系统扩展属性\n\n## 解决方法 ##\n在终端中输入 `xattr -lr <path_to_app_bundle>` 可以查看存在未知扩展属性的文件\n\n在终端中输入 `xattr -cr <path_to_app_bundle>` 可以移除所有未知的扩展属性\n\n然后清理Xcode 重新build 工程\n","slug":"Xcode8 报错resource fork, Finder information, or similar detritus not allowed","published":1,"updated":"2017-04-05T12:16:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4uqxnav0004nts6u4atr7js","content":"<p>Xcode8 报错resource fork, Finder information, or similar detritus not allowed</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>这是因为Xcode8引进的新的安全机制, Code signing不允许app的bundle里面的文件有未知的文件系统扩展属性</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>在终端中输入 <code>xattr -lr &lt;path_to_app_bundle&gt;</code> 可以查看存在未知扩展属性的文件</p>\n<p>在终端中输入 <code>xattr -cr &lt;path_to_app_bundle&gt;</code> 可以移除所有未知的扩展属性</p>\n<p>然后清理Xcode 重新build 工程</p>\n","excerpt":"","more":"<p>Xcode8 报错resource fork, Finder information, or similar detritus not allowed</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>这是因为Xcode8引进的新的安全机制, Code signing不允许app的bundle里面的文件有未知的文件系统扩展属性</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>在终端中输入 <code>xattr -lr &lt;path_to_app_bundle&gt;</code> 可以查看存在未知扩展属性的文件</p>\n<p>在终端中输入 <code>xattr -cr &lt;path_to_app_bundle&gt;</code> 可以移除所有未知的扩展属性</p>\n<p>然后清理Xcode 重新build 工程</p>\n"},{"title":"appium测试时候的那些事","date":"2017-01-11T03:10:12.000Z","_content":"\n# 遇到的问题 #\n\n## 1.org.openqa.selenium.WebDriverException: Method has not yet been implemented ##\n\n<!----- more ----->\n\n在使用appium跑java脚本的时候,如果出现异常,提示如上面显示的,说明你的appium安装出现了问题,具体原因是我的appium当时卸载的时候没有完全卸载干净,导致appium无法连接到WebDriverException\n\n解决方法: 卸载appium ,最好再使用清理工具如:cleanMyMac 清理一下残留文件,然后从新安装新的appium ,问题就可以解决,如果还不行,可以新建一个电脑账户,在新的账户中重新搭建appium也可以","source":"_posts/appium测试时候的那些事.md","raw":"---\ntitle: appium测试时候的那些事\ndate: 2017-01-11 11:10:12\ntags: appium\n---\n\n# 遇到的问题 #\n\n## 1.org.openqa.selenium.WebDriverException: Method has not yet been implemented ##\n\n<!----- more ----->\n\n在使用appium跑java脚本的时候,如果出现异常,提示如上面显示的,说明你的appium安装出现了问题,具体原因是我的appium当时卸载的时候没有完全卸载干净,导致appium无法连接到WebDriverException\n\n解决方法: 卸载appium ,最好再使用清理工具如:cleanMyMac 清理一下残留文件,然后从新安装新的appium ,问题就可以解决,如果还不行,可以新建一个电脑账户,在新的账户中重新搭建appium也可以","slug":"appium测试时候的那些事","published":1,"updated":"2017-02-16T03:20:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4uqxnay0005nts6rotgjov7","content":"<h1 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h1><h2 id=\"1-org-openqa-selenium-WebDriverException-Method-has-not-yet-been-implemented\"><a href=\"#1-org-openqa-selenium-WebDriverException-Method-has-not-yet-been-implemented\" class=\"headerlink\" title=\"1.org.openqa.selenium.WebDriverException: Method has not yet been implemented\"></a>1.org.openqa.selenium.WebDriverException: Method has not yet been implemented</h2><a id=\"more\"></a>\n<p>在使用appium跑java脚本的时候,如果出现异常,提示如上面显示的,说明你的appium安装出现了问题,具体原因是我的appium当时卸载的时候没有完全卸载干净,导致appium无法连接到WebDriverException</p>\n<p>解决方法: 卸载appium ,最好再使用清理工具如:cleanMyMac 清理一下残留文件,然后从新安装新的appium ,问题就可以解决,如果还不行,可以新建一个电脑账户,在新的账户中重新搭建appium也可以</p>\n","excerpt":"<h1 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h1><h2 id=\"1-org-openqa-selenium-WebDriverException-Method-has-not-yet-been-implemented\"><a href=\"#1-org-openqa-selenium-WebDriverException-Method-has-not-yet-been-implemented\" class=\"headerlink\" title=\"1.org.openqa.selenium.WebDriverException: Method has not yet been implemented\"></a>1.org.openqa.selenium.WebDriverException: Method has not yet been implemented</h2>","more":"<p>在使用appium跑java脚本的时候,如果出现异常,提示如上面显示的,说明你的appium安装出现了问题,具体原因是我的appium当时卸载的时候没有完全卸载干净,导致appium无法连接到WebDriverException</p>\n<p>解决方法: 卸载appium ,最好再使用清理工具如:cleanMyMac 清理一下残留文件,然后从新安装新的appium ,问题就可以解决,如果还不行,可以新建一个电脑账户,在新的账户中重新搭建appium也可以</p>"},{"title":"iOS的CF和OC中间的类型转换","date":"2017-01-11T03:10:12.000Z","_content":"\n\n# iOS的CF和OC中间的类型转换 #\n\n## Toll-Free bridged ##\n\n`Toll-Free bridged`  是Core Foundation和Foundation之间交换使用数据类型的技术.即同一数据类型既可作为Core Foundation函数的参数,也可以作为接收者向其发送Objective-C消息.\n\n说的简单点,就是OC中的有些类型,通过`Toll-Free bridged` 既可以当做Core Foundation的类型使用(CFxxxx),又可以当做Foundation的类型使用(NSxxxx).\n\n\n\n<!----- more ----->\n\n\n## Toll-Free bridged原理 ##\n\n每一个能够bridge的ObjC类，都是一个类簇（class cluster）。类簇是一个公开的抽象类，但其核心功能的是在不同的私有子类中实现的，公开类只暴露一致的接口和实现一些辅助的创建方法。而与该ObjC类相对应的Core Foundation类的内存结构，正好与类簇的其中一个私有子类相同。\n\n举个例子，NSString是一个类簇，一个公开的抽象类，但每次创建一个NSString的实例时，实际上我们会获得其中一个私有子类的实例。而NSString的其中一个私有子类实现既为NSCFString，其内存的结构与CFString是相同的，CFString的isa指针就指向NSCFString类，即CFString对象就是一个NSCFString类的实例。\n所以，当NSString的实现刚好是NSCFString的时候，他们两者之间的转换是相当容易而直接的，他们就是同一个类的实例。\n\n当NSString的实现不是NSCFString的时候（比如我们自己subclass了NSString），我们调用CF函数，就需要先检查对象的具体实现。如果发现其不是NSCFString，我们不会调用CF函数的实现来获得结果，而是通过给对象发送与函数功能相对应的ObjC消息（调用相对应的NSString的接口）来获得其结果。\n\n例如CFStringGetLength函数，当收到一个作为参数传递进来的对象时，会先确认该对象到底是不是NSCFString实现。如果是的话，就会直接调用CFStringGetLength函数的实现来获得字符串的长度；如果不是的话，会给对象发送length消息（调用NSString的length接口），来得到字符串的长度。\n\n## Toll-Free bridged的内存管理 ##\n\n在ARC中编译器不知道如何处理这个同时拥有ObjC和CFTypeRef指向的对象,所以你必须为编译器提供额外的信息：将类型显示转换为互换类型；同时可能需明确对象的声明周期。 因此我们需要使用 `__bridge`, `__bridge_retained`, `__bridge_transfer` 修饰符告诉编译器该如何去做。\n\n### __bridge ###\n\n```objectivec\n//objc to cf\n NSString *str = @\"hello\";\n CFStringRef cfStr = (__bridge CFStringRef)str;\n CFRelease(cfStr);//这里不需要release\n```\n编译器会继续负责nsStr的内存管理的事情，不会在bridge的时候retain对象，所以也不需要开发者在CF 一端释放。需要注意的是，当nsStr被释放的时候（比如出了作用域），意味着cfStr指向的对象被释放了，这时如果继续使用cfStr将会引起程序崩溃。\n\n```objectivec\n//cf to objc\n CFStringRef cfStr = CFStringCreateWithCString(kCFAllpacatorDefaule,\"hello\",kCFStringEncodingUTF8);\n NSString *str = (__bridge NSString *)(cfStr);\n CFRelease(cfStr);//这里需要release\n```\n\n bridge的时候编译器不会做任何内存管理的事情，bridge之后，编译器会负责ObjC一端的内存管理的事情。同时，开发者需要负责管理CF 一端的内存管理的事情，需要在bridge之后，负责release对象。\n\n### __bridge_retained ###\n接着上面的例子，Foundation类型对应的Core Foundation类型时，为了防止str被释放，引起我们使用cfStr的时候程序崩溃，可以使用__bridge_retained修饰符。这意味着，在bridge的时候，编译器会retain对象，而由开发者在CF一端负责release。这样，就算str在objc一端被释放，只要开发者不手动去释放cfStr，其指向的对象就不会被真的销毁。但同时，开发者也必须保证和负责对象的释放。\n\n```objectivec\n//objc to cf\n NSString *str = @\"hello\";\n CFStringRef cfStr = (__bridge_retained CFStringRef)str;\n CFRelease(cfStr);//这里不需要release\n```\n\n### __bridge_transfer ###\n当Core Foundation类型转化为Foundation类型时，如果使用__bridge修饰符在cf转objc的时候非常的麻烦，我们既需要一个CFTypeRef的变量，还需要在bridge之后负责释放。这时我们可以使用__bridge_transfer，意味着在bridge的时候，编译器转移了对象的所有权，开发者不再需要负责对象的释放。\n\n```objectivec\n//cf to objc\n CFStringRef cfStr = CFStringCreateWithCString(kCFAllpacatorDefaule,\"hello\",kCFStringEncodingUTF8);\n NSString *str = (__bridge NSString *)(cfStr);\n CFRelease(cfStr);//这里需要release\n```\n\n## 总结 ##\n\n  * `__bridge` :编译器在bridge的时候不要做任何事情\n  * `__bridge_retained` :（ObjC转CF的时候使用）编译器在bridge的时候retain对象，开发者需要在CF一端负责释放对象\n  * `__bridge_transfer` :（CF转ObjC的时候使用）编译器转移CF对象的所有权，开发者不再需要在CF一端负责释放对象\n","source":"_posts/bridged.md","raw":"\n---\ntitle: iOS的CF和OC中间的类型转换\ndate: 2017-01-11 11:10:12\ntags: iOS\n---\n\n\n# iOS的CF和OC中间的类型转换 #\n\n## Toll-Free bridged ##\n\n`Toll-Free bridged`  是Core Foundation和Foundation之间交换使用数据类型的技术.即同一数据类型既可作为Core Foundation函数的参数,也可以作为接收者向其发送Objective-C消息.\n\n说的简单点,就是OC中的有些类型,通过`Toll-Free bridged` 既可以当做Core Foundation的类型使用(CFxxxx),又可以当做Foundation的类型使用(NSxxxx).\n\n\n\n<!----- more ----->\n\n\n## Toll-Free bridged原理 ##\n\n每一个能够bridge的ObjC类，都是一个类簇（class cluster）。类簇是一个公开的抽象类，但其核心功能的是在不同的私有子类中实现的，公开类只暴露一致的接口和实现一些辅助的创建方法。而与该ObjC类相对应的Core Foundation类的内存结构，正好与类簇的其中一个私有子类相同。\n\n举个例子，NSString是一个类簇，一个公开的抽象类，但每次创建一个NSString的实例时，实际上我们会获得其中一个私有子类的实例。而NSString的其中一个私有子类实现既为NSCFString，其内存的结构与CFString是相同的，CFString的isa指针就指向NSCFString类，即CFString对象就是一个NSCFString类的实例。\n所以，当NSString的实现刚好是NSCFString的时候，他们两者之间的转换是相当容易而直接的，他们就是同一个类的实例。\n\n当NSString的实现不是NSCFString的时候（比如我们自己subclass了NSString），我们调用CF函数，就需要先检查对象的具体实现。如果发现其不是NSCFString，我们不会调用CF函数的实现来获得结果，而是通过给对象发送与函数功能相对应的ObjC消息（调用相对应的NSString的接口）来获得其结果。\n\n例如CFStringGetLength函数，当收到一个作为参数传递进来的对象时，会先确认该对象到底是不是NSCFString实现。如果是的话，就会直接调用CFStringGetLength函数的实现来获得字符串的长度；如果不是的话，会给对象发送length消息（调用NSString的length接口），来得到字符串的长度。\n\n## Toll-Free bridged的内存管理 ##\n\n在ARC中编译器不知道如何处理这个同时拥有ObjC和CFTypeRef指向的对象,所以你必须为编译器提供额外的信息：将类型显示转换为互换类型；同时可能需明确对象的声明周期。 因此我们需要使用 `__bridge`, `__bridge_retained`, `__bridge_transfer` 修饰符告诉编译器该如何去做。\n\n### __bridge ###\n\n```objectivec\n//objc to cf\n NSString *str = @\"hello\";\n CFStringRef cfStr = (__bridge CFStringRef)str;\n CFRelease(cfStr);//这里不需要release\n```\n编译器会继续负责nsStr的内存管理的事情，不会在bridge的时候retain对象，所以也不需要开发者在CF 一端释放。需要注意的是，当nsStr被释放的时候（比如出了作用域），意味着cfStr指向的对象被释放了，这时如果继续使用cfStr将会引起程序崩溃。\n\n```objectivec\n//cf to objc\n CFStringRef cfStr = CFStringCreateWithCString(kCFAllpacatorDefaule,\"hello\",kCFStringEncodingUTF8);\n NSString *str = (__bridge NSString *)(cfStr);\n CFRelease(cfStr);//这里需要release\n```\n\n bridge的时候编译器不会做任何内存管理的事情，bridge之后，编译器会负责ObjC一端的内存管理的事情。同时，开发者需要负责管理CF 一端的内存管理的事情，需要在bridge之后，负责release对象。\n\n### __bridge_retained ###\n接着上面的例子，Foundation类型对应的Core Foundation类型时，为了防止str被释放，引起我们使用cfStr的时候程序崩溃，可以使用__bridge_retained修饰符。这意味着，在bridge的时候，编译器会retain对象，而由开发者在CF一端负责release。这样，就算str在objc一端被释放，只要开发者不手动去释放cfStr，其指向的对象就不会被真的销毁。但同时，开发者也必须保证和负责对象的释放。\n\n```objectivec\n//objc to cf\n NSString *str = @\"hello\";\n CFStringRef cfStr = (__bridge_retained CFStringRef)str;\n CFRelease(cfStr);//这里不需要release\n```\n\n### __bridge_transfer ###\n当Core Foundation类型转化为Foundation类型时，如果使用__bridge修饰符在cf转objc的时候非常的麻烦，我们既需要一个CFTypeRef的变量，还需要在bridge之后负责释放。这时我们可以使用__bridge_transfer，意味着在bridge的时候，编译器转移了对象的所有权，开发者不再需要负责对象的释放。\n\n```objectivec\n//cf to objc\n CFStringRef cfStr = CFStringCreateWithCString(kCFAllpacatorDefaule,\"hello\",kCFStringEncodingUTF8);\n NSString *str = (__bridge NSString *)(cfStr);\n CFRelease(cfStr);//这里需要release\n```\n\n## 总结 ##\n\n  * `__bridge` :编译器在bridge的时候不要做任何事情\n  * `__bridge_retained` :（ObjC转CF的时候使用）编译器在bridge的时候retain对象，开发者需要在CF一端负责释放对象\n  * `__bridge_transfer` :（CF转ObjC的时候使用）编译器转移CF对象的所有权，开发者不再需要在CF一端负责释放对象\n","slug":"bridged","published":1,"updated":"2017-04-06T13:20:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4uqxnb10006nts6ods3264h","content":"<h1 id=\"iOS的CF和OC中间的类型转换\"><a href=\"#iOS的CF和OC中间的类型转换\" class=\"headerlink\" title=\"iOS的CF和OC中间的类型转换\"></a>iOS的CF和OC中间的类型转换</h1><h2 id=\"Toll-Free-bridged\"><a href=\"#Toll-Free-bridged\" class=\"headerlink\" title=\"Toll-Free bridged\"></a>Toll-Free bridged</h2><p><code>Toll-Free bridged</code>  是Core Foundation和Foundation之间交换使用数据类型的技术.即同一数据类型既可作为Core Foundation函数的参数,也可以作为接收者向其发送Objective-C消息.</p>\n<p>说的简单点,就是OC中的有些类型,通过<code>Toll-Free bridged</code> 既可以当做Core Foundation的类型使用(CFxxxx),又可以当做Foundation的类型使用(NSxxxx).</p>\n<a id=\"more\"></a>\n<h2 id=\"Toll-Free-bridged原理\"><a href=\"#Toll-Free-bridged原理\" class=\"headerlink\" title=\"Toll-Free bridged原理\"></a>Toll-Free bridged原理</h2><p>每一个能够bridge的ObjC类，都是一个类簇（class cluster）。类簇是一个公开的抽象类，但其核心功能的是在不同的私有子类中实现的，公开类只暴露一致的接口和实现一些辅助的创建方法。而与该ObjC类相对应的Core Foundation类的内存结构，正好与类簇的其中一个私有子类相同。</p>\n<p>举个例子，NSString是一个类簇，一个公开的抽象类，但每次创建一个NSString的实例时，实际上我们会获得其中一个私有子类的实例。而NSString的其中一个私有子类实现既为NSCFString，其内存的结构与CFString是相同的，CFString的isa指针就指向NSCFString类，即CFString对象就是一个NSCFString类的实例。<br>所以，当NSString的实现刚好是NSCFString的时候，他们两者之间的转换是相当容易而直接的，他们就是同一个类的实例。</p>\n<p>当NSString的实现不是NSCFString的时候（比如我们自己subclass了NSString），我们调用CF函数，就需要先检查对象的具体实现。如果发现其不是NSCFString，我们不会调用CF函数的实现来获得结果，而是通过给对象发送与函数功能相对应的ObjC消息（调用相对应的NSString的接口）来获得其结果。</p>\n<p>例如CFStringGetLength函数，当收到一个作为参数传递进来的对象时，会先确认该对象到底是不是NSCFString实现。如果是的话，就会直接调用CFStringGetLength函数的实现来获得字符串的长度；如果不是的话，会给对象发送length消息（调用NSString的length接口），来得到字符串的长度。</p>\n<h2 id=\"Toll-Free-bridged的内存管理\"><a href=\"#Toll-Free-bridged的内存管理\" class=\"headerlink\" title=\"Toll-Free bridged的内存管理\"></a>Toll-Free bridged的内存管理</h2><p>在ARC中编译器不知道如何处理这个同时拥有ObjC和CFTypeRef指向的对象,所以你必须为编译器提供额外的信息：将类型显示转换为互换类型；同时可能需明确对象的声明周期。 因此我们需要使用 <code>__bridge</code>, <code>__bridge_retained</code>, <code>__bridge_transfer</code> 修饰符告诉编译器该如何去做。</p>\n<h3 id=\"bridge\"><a href=\"#bridge\" class=\"headerlink\" title=\"__bridge\"></a>__bridge</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//objc to cf</span></div><div class=\"line\"> <span class=\"built_in\">NSString</span> *str = <span class=\"string\">@\"hello\"</span>;</div><div class=\"line\"> <span class=\"built_in\">CFStringRef</span> cfStr = (__bridge <span class=\"built_in\">CFStringRef</span>)str;</div><div class=\"line\"> <span class=\"built_in\">CFRelease</span>(cfStr);<span class=\"comment\">//这里不需要release</span></div></pre></td></tr></table></figure>\n<p>编译器会继续负责nsStr的内存管理的事情，不会在bridge的时候retain对象，所以也不需要开发者在CF 一端释放。需要注意的是，当nsStr被释放的时候（比如出了作用域），意味着cfStr指向的对象被释放了，这时如果继续使用cfStr将会引起程序崩溃。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//cf to objc</span></div><div class=\"line\"> <span class=\"built_in\">CFStringRef</span> cfStr = <span class=\"built_in\">CFStringCreateWithCString</span>(kCFAllpacatorDefaule,<span class=\"string\">\"hello\"</span>,kCFStringEncodingUTF8);</div><div class=\"line\"> <span class=\"built_in\">NSString</span> *str = (__bridge <span class=\"built_in\">NSString</span> *)(cfStr);</div><div class=\"line\"> <span class=\"built_in\">CFRelease</span>(cfStr);<span class=\"comment\">//这里需要release</span></div></pre></td></tr></table></figure>\n<p> bridge的时候编译器不会做任何内存管理的事情，bridge之后，编译器会负责ObjC一端的内存管理的事情。同时，开发者需要负责管理CF 一端的内存管理的事情，需要在bridge之后，负责release对象。</p>\n<h3 id=\"bridge-retained\"><a href=\"#bridge-retained\" class=\"headerlink\" title=\"__bridge_retained\"></a>__bridge_retained</h3><p>接着上面的例子，Foundation类型对应的Core Foundation类型时，为了防止str被释放，引起我们使用cfStr的时候程序崩溃，可以使用__bridge_retained修饰符。这意味着，在bridge的时候，编译器会retain对象，而由开发者在CF一端负责release。这样，就算str在objc一端被释放，只要开发者不手动去释放cfStr，其指向的对象就不会被真的销毁。但同时，开发者也必须保证和负责对象的释放。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//objc to cf</span></div><div class=\"line\"> <span class=\"built_in\">NSString</span> *str = <span class=\"string\">@\"hello\"</span>;</div><div class=\"line\"> <span class=\"built_in\">CFStringRef</span> cfStr = (__bridge_retained <span class=\"built_in\">CFStringRef</span>)str;</div><div class=\"line\"> <span class=\"built_in\">CFRelease</span>(cfStr);<span class=\"comment\">//这里不需要release</span></div></pre></td></tr></table></figure>\n<h3 id=\"bridge-transfer\"><a href=\"#bridge-transfer\" class=\"headerlink\" title=\"__bridge_transfer\"></a>__bridge_transfer</h3><p>当Core Foundation类型转化为Foundation类型时，如果使用<strong>bridge修饰符在cf转objc的时候非常的麻烦，我们既需要一个CFTypeRef的变量，还需要在bridge之后负责释放。这时我们可以使用</strong>bridge_transfer，意味着在bridge的时候，编译器转移了对象的所有权，开发者不再需要负责对象的释放。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//cf to objc</span></div><div class=\"line\"> <span class=\"built_in\">CFStringRef</span> cfStr = <span class=\"built_in\">CFStringCreateWithCString</span>(kCFAllpacatorDefaule,<span class=\"string\">\"hello\"</span>,kCFStringEncodingUTF8);</div><div class=\"line\"> <span class=\"built_in\">NSString</span> *str = (__bridge <span class=\"built_in\">NSString</span> *)(cfStr);</div><div class=\"line\"> <span class=\"built_in\">CFRelease</span>(cfStr);<span class=\"comment\">//这里需要release</span></div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><code>__bridge</code> :编译器在bridge的时候不要做任何事情</li>\n<li><code>__bridge_retained</code> :（ObjC转CF的时候使用）编译器在bridge的时候retain对象，开发者需要在CF一端负责释放对象</li>\n<li><code>__bridge_transfer</code> :（CF转ObjC的时候使用）编译器转移CF对象的所有权，开发者不再需要在CF一端负责释放对象</li>\n</ul>\n","excerpt":"<h1 id=\"iOS的CF和OC中间的类型转换\"><a href=\"#iOS的CF和OC中间的类型转换\" class=\"headerlink\" title=\"iOS的CF和OC中间的类型转换\"></a>iOS的CF和OC中间的类型转换</h1><h2 id=\"Toll-Free-bridged\"><a href=\"#Toll-Free-bridged\" class=\"headerlink\" title=\"Toll-Free bridged\"></a>Toll-Free bridged</h2><p><code>Toll-Free bridged</code>  是Core Foundation和Foundation之间交换使用数据类型的技术.即同一数据类型既可作为Core Foundation函数的参数,也可以作为接收者向其发送Objective-C消息.</p>\n<p>说的简单点,就是OC中的有些类型,通过<code>Toll-Free bridged</code> 既可以当做Core Foundation的类型使用(CFxxxx),又可以当做Foundation的类型使用(NSxxxx).</p>","more":"<h2 id=\"Toll-Free-bridged原理\"><a href=\"#Toll-Free-bridged原理\" class=\"headerlink\" title=\"Toll-Free bridged原理\"></a>Toll-Free bridged原理</h2><p>每一个能够bridge的ObjC类，都是一个类簇（class cluster）。类簇是一个公开的抽象类，但其核心功能的是在不同的私有子类中实现的，公开类只暴露一致的接口和实现一些辅助的创建方法。而与该ObjC类相对应的Core Foundation类的内存结构，正好与类簇的其中一个私有子类相同。</p>\n<p>举个例子，NSString是一个类簇，一个公开的抽象类，但每次创建一个NSString的实例时，实际上我们会获得其中一个私有子类的实例。而NSString的其中一个私有子类实现既为NSCFString，其内存的结构与CFString是相同的，CFString的isa指针就指向NSCFString类，即CFString对象就是一个NSCFString类的实例。<br>所以，当NSString的实现刚好是NSCFString的时候，他们两者之间的转换是相当容易而直接的，他们就是同一个类的实例。</p>\n<p>当NSString的实现不是NSCFString的时候（比如我们自己subclass了NSString），我们调用CF函数，就需要先检查对象的具体实现。如果发现其不是NSCFString，我们不会调用CF函数的实现来获得结果，而是通过给对象发送与函数功能相对应的ObjC消息（调用相对应的NSString的接口）来获得其结果。</p>\n<p>例如CFStringGetLength函数，当收到一个作为参数传递进来的对象时，会先确认该对象到底是不是NSCFString实现。如果是的话，就会直接调用CFStringGetLength函数的实现来获得字符串的长度；如果不是的话，会给对象发送length消息（调用NSString的length接口），来得到字符串的长度。</p>\n<h2 id=\"Toll-Free-bridged的内存管理\"><a href=\"#Toll-Free-bridged的内存管理\" class=\"headerlink\" title=\"Toll-Free bridged的内存管理\"></a>Toll-Free bridged的内存管理</h2><p>在ARC中编译器不知道如何处理这个同时拥有ObjC和CFTypeRef指向的对象,所以你必须为编译器提供额外的信息：将类型显示转换为互换类型；同时可能需明确对象的声明周期。 因此我们需要使用 <code>__bridge</code>, <code>__bridge_retained</code>, <code>__bridge_transfer</code> 修饰符告诉编译器该如何去做。</p>\n<h3 id=\"bridge\"><a href=\"#bridge\" class=\"headerlink\" title=\"__bridge\"></a>__bridge</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//objc to cf</span></div><div class=\"line\"> <span class=\"built_in\">NSString</span> *str = <span class=\"string\">@\"hello\"</span>;</div><div class=\"line\"> <span class=\"built_in\">CFStringRef</span> cfStr = (__bridge <span class=\"built_in\">CFStringRef</span>)str;</div><div class=\"line\"> <span class=\"built_in\">CFRelease</span>(cfStr);<span class=\"comment\">//这里不需要release</span></div></pre></td></tr></table></figure>\n<p>编译器会继续负责nsStr的内存管理的事情，不会在bridge的时候retain对象，所以也不需要开发者在CF 一端释放。需要注意的是，当nsStr被释放的时候（比如出了作用域），意味着cfStr指向的对象被释放了，这时如果继续使用cfStr将会引起程序崩溃。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//cf to objc</span></div><div class=\"line\"> <span class=\"built_in\">CFStringRef</span> cfStr = <span class=\"built_in\">CFStringCreateWithCString</span>(kCFAllpacatorDefaule,<span class=\"string\">\"hello\"</span>,kCFStringEncodingUTF8);</div><div class=\"line\"> <span class=\"built_in\">NSString</span> *str = (__bridge <span class=\"built_in\">NSString</span> *)(cfStr);</div><div class=\"line\"> <span class=\"built_in\">CFRelease</span>(cfStr);<span class=\"comment\">//这里需要release</span></div></pre></td></tr></table></figure>\n<p> bridge的时候编译器不会做任何内存管理的事情，bridge之后，编译器会负责ObjC一端的内存管理的事情。同时，开发者需要负责管理CF 一端的内存管理的事情，需要在bridge之后，负责release对象。</p>\n<h3 id=\"bridge-retained\"><a href=\"#bridge-retained\" class=\"headerlink\" title=\"__bridge_retained\"></a>__bridge_retained</h3><p>接着上面的例子，Foundation类型对应的Core Foundation类型时，为了防止str被释放，引起我们使用cfStr的时候程序崩溃，可以使用__bridge_retained修饰符。这意味着，在bridge的时候，编译器会retain对象，而由开发者在CF一端负责release。这样，就算str在objc一端被释放，只要开发者不手动去释放cfStr，其指向的对象就不会被真的销毁。但同时，开发者也必须保证和负责对象的释放。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//objc to cf</span></div><div class=\"line\"> <span class=\"built_in\">NSString</span> *str = <span class=\"string\">@\"hello\"</span>;</div><div class=\"line\"> <span class=\"built_in\">CFStringRef</span> cfStr = (__bridge_retained <span class=\"built_in\">CFStringRef</span>)str;</div><div class=\"line\"> <span class=\"built_in\">CFRelease</span>(cfStr);<span class=\"comment\">//这里不需要release</span></div></pre></td></tr></table></figure>\n<h3 id=\"bridge-transfer\"><a href=\"#bridge-transfer\" class=\"headerlink\" title=\"__bridge_transfer\"></a>__bridge_transfer</h3><p>当Core Foundation类型转化为Foundation类型时，如果使用<strong>bridge修饰符在cf转objc的时候非常的麻烦，我们既需要一个CFTypeRef的变量，还需要在bridge之后负责释放。这时我们可以使用</strong>bridge_transfer，意味着在bridge的时候，编译器转移了对象的所有权，开发者不再需要负责对象的释放。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//cf to objc</span></div><div class=\"line\"> <span class=\"built_in\">CFStringRef</span> cfStr = <span class=\"built_in\">CFStringCreateWithCString</span>(kCFAllpacatorDefaule,<span class=\"string\">\"hello\"</span>,kCFStringEncodingUTF8);</div><div class=\"line\"> <span class=\"built_in\">NSString</span> *str = (__bridge <span class=\"built_in\">NSString</span> *)(cfStr);</div><div class=\"line\"> <span class=\"built_in\">CFRelease</span>(cfStr);<span class=\"comment\">//这里需要release</span></div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><code>__bridge</code> :编译器在bridge的时候不要做任何事情</li>\n<li><code>__bridge_retained</code> :（ObjC转CF的时候使用）编译器在bridge的时候retain对象，开发者需要在CF一端负责释放对象</li>\n<li><code>__bridge_transfer</code> :（CF转ObjC的时候使用）编译器转移CF对象的所有权，开发者不再需要在CF一端负责释放对象</li>\n</ul>"},{"title":"ssh连接报错","date":"2016-12-11T03:02:30.000Z","_content":"\n## 使用ssh连接远程服务器 ##\n\n在使用VPS的时候由于更换了数据中心，导致远程服务```ip```地址改变，使用```ssh```连接的时候报如下错误\n\n\n[user@hostname ~]$ ssh root@pong\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nIt is also possible that a host key has just been changed.\nThe fingerprint for the RSA key sent by the remote host is\n6e:45:f9:a8:af:38:3d:a1:a5:c7:76:1d:02:f8:77:00.\nPlease contact your system administrator.\nAdd correct host key in /home/hostname /.ssh/known_hosts to get rid of this message.\nOffending RSA key in /var/lib/sss/pubconf/known_hosts:4\nRSA host key for pong has changed and you have requested strict checking.\nHost key verification failed.\n\n\n## 解决办法 ##\n\n找到```~/.ssh/```路径下的```known_hosts```打开，删除对应的```ip```以及对应信息保存就好\n","source":"_posts/ssh连接报错.md","raw":"---\ntitle: ssh连接报错\ndate: 2016-12-11 11:02:30\ntags: VPS那些事\n---\n\n## 使用ssh连接远程服务器 ##\n\n在使用VPS的时候由于更换了数据中心，导致远程服务```ip```地址改变，使用```ssh```连接的时候报如下错误\n\n\n[user@hostname ~]$ ssh root@pong\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nIt is also possible that a host key has just been changed.\nThe fingerprint for the RSA key sent by the remote host is\n6e:45:f9:a8:af:38:3d:a1:a5:c7:76:1d:02:f8:77:00.\nPlease contact your system administrator.\nAdd correct host key in /home/hostname /.ssh/known_hosts to get rid of this message.\nOffending RSA key in /var/lib/sss/pubconf/known_hosts:4\nRSA host key for pong has changed and you have requested strict checking.\nHost key verification failed.\n\n\n## 解决办法 ##\n\n找到```~/.ssh/```路径下的```known_hosts```打开，删除对应的```ip```以及对应信息保存就好\n","slug":"ssh连接报错","published":1,"updated":"2017-07-08T03:36:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4uqxnb80009nts6i8epy5f2","content":"<h2 id=\"使用ssh连接远程服务器\"><a href=\"#使用ssh连接远程服务器\" class=\"headerlink\" title=\"使用ssh连接远程服务器\"></a>使用ssh连接远程服务器</h2><p>在使用VPS的时候由于更换了数据中心，导致远程服务<code>ip</code>地址改变，使用<code>ssh</code>连接的时候报如下错误</p>\n<p>[user@hostname ~]$ ssh root@pong<br>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<br>@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @<br>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<br>IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!<br>Someone could be eavesdropping on you right now (man-in-the-middle attack)!<br>It is also possible that a host key has just been changed.<br>The fingerprint for the RSA key sent by the remote host is<br>6e:45:f9:a8:af:38:3d:a1:a5:c7:76:1d:02:f8:77:00.<br>Please contact your system administrator.<br>Add correct host key in /home/hostname /.ssh/known_hosts to get rid of this message.<br>Offending RSA key in /var/lib/sss/pubconf/known_hosts:4<br>RSA host key for pong has changed and you have requested strict checking.<br>Host key verification failed.</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>找到<code>~/.ssh/</code>路径下的<code>known_hosts</code>打开，删除对应的<code>ip</code>以及对应信息保存就好</p>\n","excerpt":"","more":"<h2 id=\"使用ssh连接远程服务器\"><a href=\"#使用ssh连接远程服务器\" class=\"headerlink\" title=\"使用ssh连接远程服务器\"></a>使用ssh连接远程服务器</h2><p>在使用VPS的时候由于更换了数据中心，导致远程服务<code>ip</code>地址改变，使用<code>ssh</code>连接的时候报如下错误</p>\n<p>[user@hostname ~]$ ssh root@pong<br>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<br>@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @<br>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<br>IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!<br>Someone could be eavesdropping on you right now (man-in-the-middle attack)!<br>It is also possible that a host key has just been changed.<br>The fingerprint for the RSA key sent by the remote host is<br>6e:45:f9:a8:af:38:3d:a1:a5:c7:76:1d:02:f8:77:00.<br>Please contact your system administrator.<br>Add correct host key in /home/hostname /.ssh/known_hosts to get rid of this message.<br>Offending RSA key in /var/lib/sss/pubconf/known_hosts:4<br>RSA host key for pong has changed and you have requested strict checking.<br>Host key verification failed.</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>找到<code>~/.ssh/</code>路径下的<code>known_hosts</code>打开，删除对应的<code>ip</code>以及对应信息保存就好</p>\n"},{"title":"再给你写一个看看这就是所谓的blog","date":"2017-01-11T03:10:12.000Z","_content":"\n😁哈哈,又发了一个,这次能发钱了,来来来,有钱的捧个钱场没钱的充钱捧个钱场,O(∩_∩)O哈哈哈~,文字一定要多,不然支付宝的二维码就看不到了,O(∩_∩)O哈哈~\n\n\n\n\n\n\n都这么多了,还不够么\n\n\n\n\n\n\n再打点吧\n\n\n\n\n\n感觉还不够\n\n\n\n\n\n现在应该差不多了\n\n\n\n\n\n最后再来点\n\n\n\n\n\n这次一定够了\n","source":"_posts/再给你写一个看看这就是所谓的blog.md","raw":"---\ntitle: 再给你写一个看看这就是所谓的blog\ndate: 2017-01-11 11:10:12\ntags: 忘了叫什么\n---\n\n😁哈哈,又发了一个,这次能发钱了,来来来,有钱的捧个钱场没钱的充钱捧个钱场,O(∩_∩)O哈哈哈~,文字一定要多,不然支付宝的二维码就看不到了,O(∩_∩)O哈哈~\n\n\n\n\n\n\n都这么多了,还不够么\n\n\n\n\n\n\n再打点吧\n\n\n\n\n\n感觉还不够\n\n\n\n\n\n现在应该差不多了\n\n\n\n\n\n最后再来点\n\n\n\n\n\n这次一定够了\n","slug":"再给你写一个看看这就是所谓的blog","published":1,"updated":"2017-01-11T04:03:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4uqxnb9000bnts68jgx0zoj","content":"<p>😁哈哈,又发了一个,这次能发钱了,来来来,有钱的捧个钱场没钱的充钱捧个钱场,O(∩<em>∩)O哈哈哈~,文字一定要多,不然支付宝的二维码就看不到了,O(∩</em>∩)O哈哈~</p>\n<p>都这么多了,还不够么</p>\n<p>再打点吧</p>\n<p>感觉还不够</p>\n<p>现在应该差不多了</p>\n<p>最后再来点</p>\n<p>这次一定够了</p>\n","excerpt":"","more":"<p>😁哈哈,又发了一个,这次能发钱了,来来来,有钱的捧个钱场没钱的充钱捧个钱场,O(∩<em>∩)O哈哈哈~,文字一定要多,不然支付宝的二维码就看不到了,O(∩</em>∩)O哈哈~</p>\n<p>都这么多了,还不够么</p>\n<p>再打点吧</p>\n<p>感觉还不够</p>\n<p>现在应该差不多了</p>\n<p>最后再来点</p>\n<p>这次一定够了</p>\n"},{"title":"iOS中的枚举","date":"2016-05-11T03:02:30.000Z","_content":"\n## 普通的枚举 ##\n\n### 第一种实现方式 ###\n\n```objectivec\ntypedef enum {\n    EnumTypeTop,\n    EnumTypeBottom\n}EnumType\n```\n\n### 第二种实现方式 ###\n\n```objectivec\ntypedef NS_ENUM(NSInteger,EnumType) {\n    EnumTypeTop,\n    EnumTypeBottom\n};\n```\n\n枚举的作用就是增加程序的可读性,将原来使用数值代表的状态转换成自然语言中有相应含义的单词,所以这样写出来的代码更易读懂。编译器会为枚举分配一个独有的编号,从0开始,每个枚举递增1\n\n<!----- more ----->\n\n## 移位枚举 ##\n\n### 实现方式 ###\n\n```objectivec\ntypedef NS_OPTIONS(NSUInteger, EnumType) {\n   EnumTypeNone  = 0,     // 0000 0000   0\n   EnumTypeTop    = 1<<0, // 0000 0001   1\n   EnumTypeBottom = 1<<1, // 0000 0010   2\n   EnumTypeLeft   = 1<<2, // 0000 0100   4\n   EnumTypeRight  = 1<<3, // 0000 1000   8\n   EnumTypeCenter = 1<<4, // 0001 0000   16\n   EnumTypeHeight = 1<<5, // 0010 0000   32\n   EnumTypeWidth  = 1<<6  // 0100 0000   64\n}\n```\n\n上面就是一个移位枚举, 和普通的枚举的区别就是,每个状态的值不是递增的,而是用只有1个二进制位的值是1数字表示的,这么做的好处就是可以对状态值进行\"位或\"运算,从而实现同时使用多个枚举\n\n\n```objectivec\n- (void)testEnum {\n    [self needMutEnum:EnumTypeTop | EnumTypeBottom | EnumTypeLeft | EnumTypeRight | EnumTypeCenter];\n}\n\n- (void)needMutEnum:(EnumType) type {\n    if (type==0) {\n      NSLog(@\"EnumTypeNone\");\n      return;\n    }\n    if (type & EnumTypeTop) {\n        NSLog(@\"EnumTypeTop\");\n    }\n    if (type & EnumTypeBottom) {\n        NSLog(@\"EnumTypeBottom\");\n    }\n    if (type & EnumTypeLeft) {\n        NSLog(@\"EnumTypeLeft\");\n\n    }\n    if (type & EnumTypeRight) {\n        NSLog(@\"EnumTypeRight\");\n\n    }\n    if (type & EnumTypeCenter) {\n        NSLog(@\"EnumTypeCenter\");\n\n    }\n    if (type & EnumTypeHeight) {\n        NSLog(@\"EnumTypeHeight\");\n\n    }\n    if (type & EnumTypeWidth) {\n        NSLog(@\"EnumTypeWidth\");\n    }\n}\n```\n\n输出\n\n```\nEnumTypeTop\nEnumTypeBottom\nEnumTypeLeft\nEnumTypeRight\nEnumTypeCenter\n```\n\n这样就实现了同时使用多个枚举\n\n#### 原因 ####\n\"位或\"和\"位与\"运算\n\"位或\": 0 | 0 = 0 ; 0 | 1 = 1 ; 1 | 1 = 1;\n\"位与\": 0 & 0 = 0 ; 0 & 1 = 0 ; 1 & 1 = 1;\n\n对移位枚举进行\"位或\"运算\n\nEnumTypeTop | EnumTypeBottom | EnumTypeLeft | EnumTypeRight | EnumTypeCenter 转换成二进制就是\n\n0000 0001 | 0000 0010 | 0000 0100 | 0000 1000 | 0010 0000 = 0011 1111  其10进制的值时63\n\n所以\"needMutEnum\"这个方法传入的值 ```type``` 是十进制的63,\n\n当使用的时候又用 ```type``` 的值和枚举做\"位与运算\",63的二进制是 0011 1111  \n\nEnumTypeTop的二进制是 0000 0001 ,\"位与\"运算的结果就是 0000 0001 ,\n\n也就是说传入的 ```type``` 的值转换成二进制,哪个位上是 ```1``` ,对应的那个类型的枚举就被传入了,\n\n但是要注意的是,如果不需要None的状态,就不要把第一个枚举状态设置成 ```0``` ,直接从0000 0001 设置\n","source":"_posts/枚举的实现方式(移位枚举).md","raw":"---\ntitle: iOS中的枚举\ndate: 2016-05-11 11:02:30\ntags: iOS\n---\n\n## 普通的枚举 ##\n\n### 第一种实现方式 ###\n\n```objectivec\ntypedef enum {\n    EnumTypeTop,\n    EnumTypeBottom\n}EnumType\n```\n\n### 第二种实现方式 ###\n\n```objectivec\ntypedef NS_ENUM(NSInteger,EnumType) {\n    EnumTypeTop,\n    EnumTypeBottom\n};\n```\n\n枚举的作用就是增加程序的可读性,将原来使用数值代表的状态转换成自然语言中有相应含义的单词,所以这样写出来的代码更易读懂。编译器会为枚举分配一个独有的编号,从0开始,每个枚举递增1\n\n<!----- more ----->\n\n## 移位枚举 ##\n\n### 实现方式 ###\n\n```objectivec\ntypedef NS_OPTIONS(NSUInteger, EnumType) {\n   EnumTypeNone  = 0,     // 0000 0000   0\n   EnumTypeTop    = 1<<0, // 0000 0001   1\n   EnumTypeBottom = 1<<1, // 0000 0010   2\n   EnumTypeLeft   = 1<<2, // 0000 0100   4\n   EnumTypeRight  = 1<<3, // 0000 1000   8\n   EnumTypeCenter = 1<<4, // 0001 0000   16\n   EnumTypeHeight = 1<<5, // 0010 0000   32\n   EnumTypeWidth  = 1<<6  // 0100 0000   64\n}\n```\n\n上面就是一个移位枚举, 和普通的枚举的区别就是,每个状态的值不是递增的,而是用只有1个二进制位的值是1数字表示的,这么做的好处就是可以对状态值进行\"位或\"运算,从而实现同时使用多个枚举\n\n\n```objectivec\n- (void)testEnum {\n    [self needMutEnum:EnumTypeTop | EnumTypeBottom | EnumTypeLeft | EnumTypeRight | EnumTypeCenter];\n}\n\n- (void)needMutEnum:(EnumType) type {\n    if (type==0) {\n      NSLog(@\"EnumTypeNone\");\n      return;\n    }\n    if (type & EnumTypeTop) {\n        NSLog(@\"EnumTypeTop\");\n    }\n    if (type & EnumTypeBottom) {\n        NSLog(@\"EnumTypeBottom\");\n    }\n    if (type & EnumTypeLeft) {\n        NSLog(@\"EnumTypeLeft\");\n\n    }\n    if (type & EnumTypeRight) {\n        NSLog(@\"EnumTypeRight\");\n\n    }\n    if (type & EnumTypeCenter) {\n        NSLog(@\"EnumTypeCenter\");\n\n    }\n    if (type & EnumTypeHeight) {\n        NSLog(@\"EnumTypeHeight\");\n\n    }\n    if (type & EnumTypeWidth) {\n        NSLog(@\"EnumTypeWidth\");\n    }\n}\n```\n\n输出\n\n```\nEnumTypeTop\nEnumTypeBottom\nEnumTypeLeft\nEnumTypeRight\nEnumTypeCenter\n```\n\n这样就实现了同时使用多个枚举\n\n#### 原因 ####\n\"位或\"和\"位与\"运算\n\"位或\": 0 | 0 = 0 ; 0 | 1 = 1 ; 1 | 1 = 1;\n\"位与\": 0 & 0 = 0 ; 0 & 1 = 0 ; 1 & 1 = 1;\n\n对移位枚举进行\"位或\"运算\n\nEnumTypeTop | EnumTypeBottom | EnumTypeLeft | EnumTypeRight | EnumTypeCenter 转换成二进制就是\n\n0000 0001 | 0000 0010 | 0000 0100 | 0000 1000 | 0010 0000 = 0011 1111  其10进制的值时63\n\n所以\"needMutEnum\"这个方法传入的值 ```type``` 是十进制的63,\n\n当使用的时候又用 ```type``` 的值和枚举做\"位与运算\",63的二进制是 0011 1111  \n\nEnumTypeTop的二进制是 0000 0001 ,\"位与\"运算的结果就是 0000 0001 ,\n\n也就是说传入的 ```type``` 的值转换成二进制,哪个位上是 ```1``` ,对应的那个类型的枚举就被传入了,\n\n但是要注意的是,如果不需要None的状态,就不要把第一个枚举状态设置成 ```0``` ,直接从0000 0001 设置\n","slug":"枚举的实现方式(移位枚举)","published":1,"updated":"2017-03-30T09:26:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4uqxnbb000dnts6um561jk1","content":"<h2 id=\"普通的枚举\"><a href=\"#普通的枚举\" class=\"headerlink\" title=\"普通的枚举\"></a>普通的枚举</h2><h3 id=\"第一种实现方式\"><a href=\"#第一种实现方式\" class=\"headerlink\" title=\"第一种实现方式\"></a>第一种实现方式</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> &#123;</div><div class=\"line\">    EnumTypeTop,</div><div class=\"line\">    EnumTypeBottom</div><div class=\"line\">&#125;EnumType</div></pre></td></tr></table></figure>\n<h3 id=\"第二种实现方式\"><a href=\"#第二种实现方式\" class=\"headerlink\" title=\"第二种实现方式\"></a>第二种实现方式</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_ENUM</span>(<span class=\"built_in\">NSInteger</span>,EnumType) &#123;</div><div class=\"line\">    EnumTypeTop,</div><div class=\"line\">    EnumTypeBottom</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>枚举的作用就是增加程序的可读性,将原来使用数值代表的状态转换成自然语言中有相应含义的单词,所以这样写出来的代码更易读懂。编译器会为枚举分配一个独有的编号,从0开始,每个枚举递增1</p>\n<a id=\"more\"></a>\n<h2 id=\"移位枚举\"><a href=\"#移位枚举\" class=\"headerlink\" title=\"移位枚举\"></a>移位枚举</h2><h3 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_OPTIONS</span>(<span class=\"built_in\">NSUInteger</span>, EnumType) &#123;</div><div class=\"line\">   EnumTypeNone  = <span class=\"number\">0</span>,     <span class=\"comment\">// 0000 0000   0</span></div><div class=\"line\">   EnumTypeTop    = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">0</span>, <span class=\"comment\">// 0000 0001   1</span></div><div class=\"line\">   EnumTypeBottom = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">1</span>, <span class=\"comment\">// 0000 0010   2</span></div><div class=\"line\">   EnumTypeLeft   = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">2</span>, <span class=\"comment\">// 0000 0100   4</span></div><div class=\"line\">   EnumTypeRight  = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">3</span>, <span class=\"comment\">// 0000 1000   8</span></div><div class=\"line\">   EnumTypeCenter = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">4</span>, <span class=\"comment\">// 0001 0000   16</span></div><div class=\"line\">   EnumTypeHeight = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">5</span>, <span class=\"comment\">// 0010 0000   32</span></div><div class=\"line\">   EnumTypeWidth  = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">6</span>  <span class=\"comment\">// 0100 0000   64</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面就是一个移位枚举, 和普通的枚举的区别就是,每个状态的值不是递增的,而是用只有1个二进制位的值是1数字表示的,这么做的好处就是可以对状态值进行”位或”运算,从而实现同时使用多个枚举</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)testEnum &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> needMutEnum:EnumTypeTop | EnumTypeBottom | EnumTypeLeft | EnumTypeRight | EnumTypeCenter];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)needMutEnum:(EnumType) type &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type==<span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeNone\"</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeTop) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeTop\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeBottom) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeBottom\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeLeft) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeLeft\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeRight) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeRight\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeCenter) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeCenter\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeHeight) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeHeight\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeWidth) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeWidth\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">EnumTypeTop</div><div class=\"line\">EnumTypeBottom</div><div class=\"line\">EnumTypeLeft</div><div class=\"line\">EnumTypeRight</div><div class=\"line\">EnumTypeCenter</div></pre></td></tr></table></figure>\n<p>这样就实现了同时使用多个枚举</p>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>“位或”和”位与”运算<br>“位或”: 0 | 0 = 0 ; 0 | 1 = 1 ; 1 | 1 = 1;<br>“位与”: 0 &amp; 0 = 0 ; 0 &amp; 1 = 0 ; 1 &amp; 1 = 1;</p>\n<p>对移位枚举进行”位或”运算</p>\n<p>EnumTypeTop | EnumTypeBottom | EnumTypeLeft | EnumTypeRight | EnumTypeCenter 转换成二进制就是</p>\n<p>0000 0001 | 0000 0010 | 0000 0100 | 0000 1000 | 0010 0000 = 0011 1111  其10进制的值时63</p>\n<p>所以”needMutEnum”这个方法传入的值 <code>type</code> 是十进制的63,</p>\n<p>当使用的时候又用 <code>type</code> 的值和枚举做”位与运算”,63的二进制是 0011 1111  </p>\n<p>EnumTypeTop的二进制是 0000 0001 ,”位与”运算的结果就是 0000 0001 ,</p>\n<p>也就是说传入的 <code>type</code> 的值转换成二进制,哪个位上是 <code>1</code> ,对应的那个类型的枚举就被传入了,</p>\n<p>但是要注意的是,如果不需要None的状态,就不要把第一个枚举状态设置成 <code>0</code> ,直接从0000 0001 设置</p>\n","excerpt":"<h2 id=\"普通的枚举\"><a href=\"#普通的枚举\" class=\"headerlink\" title=\"普通的枚举\"></a>普通的枚举</h2><h3 id=\"第一种实现方式\"><a href=\"#第一种实现方式\" class=\"headerlink\" title=\"第一种实现方式\"></a>第一种实现方式</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> &#123;</div><div class=\"line\">    EnumTypeTop,</div><div class=\"line\">    EnumTypeBottom</div><div class=\"line\">&#125;EnumType</div></pre></td></tr></table></figure>\n<h3 id=\"第二种实现方式\"><a href=\"#第二种实现方式\" class=\"headerlink\" title=\"第二种实现方式\"></a>第二种实现方式</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_ENUM</span>(<span class=\"built_in\">NSInteger</span>,EnumType) &#123;</div><div class=\"line\">    EnumTypeTop,</div><div class=\"line\">    EnumTypeBottom</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>枚举的作用就是增加程序的可读性,将原来使用数值代表的状态转换成自然语言中有相应含义的单词,所以这样写出来的代码更易读懂。编译器会为枚举分配一个独有的编号,从0开始,每个枚举递增1</p>","more":"<h2 id=\"移位枚举\"><a href=\"#移位枚举\" class=\"headerlink\" title=\"移位枚举\"></a>移位枚举</h2><h3 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_OPTIONS</span>(<span class=\"built_in\">NSUInteger</span>, EnumType) &#123;</div><div class=\"line\">   EnumTypeNone  = <span class=\"number\">0</span>,     <span class=\"comment\">// 0000 0000   0</span></div><div class=\"line\">   EnumTypeTop    = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">0</span>, <span class=\"comment\">// 0000 0001   1</span></div><div class=\"line\">   EnumTypeBottom = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">1</span>, <span class=\"comment\">// 0000 0010   2</span></div><div class=\"line\">   EnumTypeLeft   = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">2</span>, <span class=\"comment\">// 0000 0100   4</span></div><div class=\"line\">   EnumTypeRight  = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">3</span>, <span class=\"comment\">// 0000 1000   8</span></div><div class=\"line\">   EnumTypeCenter = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">4</span>, <span class=\"comment\">// 0001 0000   16</span></div><div class=\"line\">   EnumTypeHeight = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">5</span>, <span class=\"comment\">// 0010 0000   32</span></div><div class=\"line\">   EnumTypeWidth  = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">6</span>  <span class=\"comment\">// 0100 0000   64</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面就是一个移位枚举, 和普通的枚举的区别就是,每个状态的值不是递增的,而是用只有1个二进制位的值是1数字表示的,这么做的好处就是可以对状态值进行”位或”运算,从而实现同时使用多个枚举</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)testEnum &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> needMutEnum:EnumTypeTop | EnumTypeBottom | EnumTypeLeft | EnumTypeRight | EnumTypeCenter];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)needMutEnum:(EnumType) type &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type==<span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeNone\"</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeTop) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeTop\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeBottom) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeBottom\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeLeft) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeLeft\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeRight) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeRight\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeCenter) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeCenter\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeHeight) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeHeight\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (type &amp; EnumTypeWidth) &#123;</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"EnumTypeWidth\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">EnumTypeTop</div><div class=\"line\">EnumTypeBottom</div><div class=\"line\">EnumTypeLeft</div><div class=\"line\">EnumTypeRight</div><div class=\"line\">EnumTypeCenter</div></pre></td></tr></table></figure>\n<p>这样就实现了同时使用多个枚举</p>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>“位或”和”位与”运算<br>“位或”: 0 | 0 = 0 ; 0 | 1 = 1 ; 1 | 1 = 1;<br>“位与”: 0 &amp; 0 = 0 ; 0 &amp; 1 = 0 ; 1 &amp; 1 = 1;</p>\n<p>对移位枚举进行”位或”运算</p>\n<p>EnumTypeTop | EnumTypeBottom | EnumTypeLeft | EnumTypeRight | EnumTypeCenter 转换成二进制就是</p>\n<p>0000 0001 | 0000 0010 | 0000 0100 | 0000 1000 | 0010 0000 = 0011 1111  其10进制的值时63</p>\n<p>所以”needMutEnum”这个方法传入的值 <code>type</code> 是十进制的63,</p>\n<p>当使用的时候又用 <code>type</code> 的值和枚举做”位与运算”,63的二进制是 0011 1111  </p>\n<p>EnumTypeTop的二进制是 0000 0001 ,”位与”运算的结果就是 0000 0001 ,</p>\n<p>也就是说传入的 <code>type</code> 的值转换成二进制,哪个位上是 <code>1</code> ,对应的那个类型的枚举就被传入了,</p>\n<p>但是要注意的是,如果不需要None的状态,就不要把第一个枚举状态设置成 <code>0</code> ,直接从0000 0001 设置</p>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-01-11T02:34:00.000Z","updated":"2017-01-17T08:45:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4uqxnbd000fnts649czkug4","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"my first blog","date":"2017-01-11T03:02:30.000Z","_content":"\n这就是传说中的第一个blog\n\n\n<!------ 查看全文 ------>\n\n\n#超级偶像\n\n<embed src=\"http://www.xiami.com/widget/52304397_1773753998/singlePlayer.swf\" type=\"application/x-shockwave-flash\" width=\"257\" height=\"33\" wmode=\"transparent\"></embed>\n","source":"_posts/my-first-blog.md","raw":"---\ntitle: my first blog\ndate: 2017-01-11 11:02:30\ntags: hello\n---\n\n这就是传说中的第一个blog\n\n\n<!------ 查看全文 ------>\n\n\n#超级偶像\n\n<embed src=\"http://www.xiami.com/widget/52304397_1773753998/singlePlayer.swf\" type=\"application/x-shockwave-flash\" width=\"257\" height=\"33\" wmode=\"transparent\"></embed>\n","slug":"my-first-blog","published":1,"updated":"2017-01-11T09:47:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4uqxnbh000ints69ngmg8fk","content":"<p>这就是传说中的第一个blog</p>\n<!------ 查看全文 ------>\n<p>#超级偶像</p>\n<embed src=\"http://www.xiami.com/widget/52304397_1773753998/singlePlayer.swf\" type=\"application/x-shockwave-flash\" width=\"257\" height=\"33\" wmode=\"transparent\">\n","excerpt":"","more":"<p>这就是传说中的第一个blog</p>\n<!------ 查看全文 ------>\n<p>#超级偶像</p>\n<embed src=\"http://www.xiami.com/widget/52304397_1773753998/singlePlayer.swf\" type=\"application/x-shockwave-flash\" width=\"257\" height=\"33\" wmode=\"transparent\"></embed>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj4uqxnab0001nts6wzlyfniy","tag_id":"cj4uqxnaq0003nts6ge5fp0j1","_id":"cj4uqxnb70008nts6yh2sq34h"},{"post_id":"cj4uqxnb10006nts6ods3264h","tag_id":"cj4uqxnaq0003nts6ge5fp0j1","_id":"cj4uqxnb9000ants6f20mckqo"},{"post_id":"cj4uqxnae0002nts6d7ctuda1","tag_id":"cj4uqxnb60007nts6qaznuv5g","_id":"cj4uqxnbc000ents6s4yy96vh"},{"post_id":"cj4uqxnbb000dnts6um561jk1","tag_id":"cj4uqxnaq0003nts6ge5fp0j1","_id":"cj4uqxnbg000hnts6c36jik1t"},{"post_id":"cj4uqxnav0004nts6u4atr7js","tag_id":"cj4uqxnaq0003nts6ge5fp0j1","_id":"cj4uqxnbi000jnts6cznb288i"},{"post_id":"cj4uqxnay0005nts6rotgjov7","tag_id":"cj4uqxnbf000gnts69arh8k2h","_id":"cj4uqxnbk000lnts6goaroe3g"},{"post_id":"cj4uqxnb80009nts6i8epy5f2","tag_id":"cj4uqxnbj000knts6cv7a29b5","_id":"cj4uqxnbk000nnts6ee0k6en5"},{"post_id":"cj4uqxnb9000bnts68jgx0zoj","tag_id":"cj4uqxnbk000mnts6qpn98g3k","_id":"cj4uqxnbo000pnts62a8uv1p8"},{"post_id":"cj4uqxnbh000ints69ngmg8fk","tag_id":"cj4uqxnbm000onts6vgrw7k59","_id":"cj4uqxnbp000qnts6v6mlxeco"}],"Tag":[{"name":"iOS","_id":"cj4uqxnaq0003nts6ge5fp0j1"},{"name":"JavaScript","_id":"cj4uqxnb60007nts6qaznuv5g"},{"name":"appium","_id":"cj4uqxnbf000gnts69arh8k2h"},{"name":"VPS那些事","_id":"cj4uqxnbj000knts6cv7a29b5"},{"name":"忘了叫什么","_id":"cj4uqxnbk000mnts6qpn98g3k"},{"name":"hello","_id":"cj4uqxnbm000onts6vgrw7k59"}]}}